// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2018.3 (lin64) Build 2405991 Thu Dec  6 23:36:41 MST 2018
// Date        : Sat May 11 12:33:02 2019
// Host        : AndoUbuntu running 64-bit Ubuntu 16.04.6 LTS
// Command     : write_verilog -force -mode funcsim axi_mem2stream.vm
// Design      : axi_mem2stream
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7z020clg484-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* APB_AW = "32" *) (* APB_DS = "4" *) (* APB_DW = "32" *) 
(* AXIS_WIDTH_DATA = "32" *) (* AXIS_WIDTH_DS = "4" *) (* AXI_MST_ID = "1" *) 
(* AXI_WIDTH_AD = "32" *) (* AXI_WIDTH_CID = "4" *) (* AXI_WIDTH_DA = "32" *) 
(* AXI_WIDTH_DS = "4" *) (* AXI_WIDTH_ID = "4" *) (* AXI_WIDTH_SID = "8" *) 
(* NotValidForBitStream *)
module axi_mem2stream
   (ARESETn,
    ACLK,
    M_MID,
    M_AWID,
    M_AWADDR,
    M_AWLEN,
    M_AWLOCK,
    M_AWSIZE,
    M_AWBURST,
    M_AWVALID,
    M_AWREADY,
    M_AWQOS,
    M_AWREGION,
    M_WID,
    M_WDATA,
    M_WSTRB,
    M_WLAST,
    M_WVALID,
    M_WREADY,
    M_BID,
    M_BRESP,
    M_BVALID,
    M_BREADY,
    M_ARID,
    M_ARADDR,
    M_ARLEN,
    M_ARLOCK,
    M_ARSIZE,
    M_ARBURST,
    M_ARVALID,
    M_ARREADY,
    M_ARQOS,
    M_ARREGION,
    M_RID,
    M_RDATA,
    M_RRESP,
    M_RLAST,
    M_RVALID,
    M_RREADY,
    AXIS_CLK,
    AXIS_TREADY,
    AXIS_TVALID,
    AXIS_TDATA,
    AXIS_TSTRB,
    AXIS_TLAST,
    AXIS_TSTART,
    PRESETn,
    PCLK,
    PSEL,
    PENABLE,
    PADDR,
    PWRITE,
    PRDATA,
    PWDATA,
    PREADY,
    PSLVERR,
    PSTRB,
    PPROT,
    IRQ);
  input ARESETn;
  input ACLK;
  output [3:0]M_MID;
  output [3:0]M_AWID;
  output [31:0]M_AWADDR;
  output [7:0]M_AWLEN;
  output M_AWLOCK;
  output [2:0]M_AWSIZE;
  output [1:0]M_AWBURST;
  output M_AWVALID;
  input M_AWREADY;
  output [3:0]M_AWQOS;
  output [3:0]M_AWREGION;
  output [3:0]M_WID;
  output [31:0]M_WDATA;
  output [3:0]M_WSTRB;
  output M_WLAST;
  output M_WVALID;
  input M_WREADY;
  input [3:0]M_BID;
  input [1:0]M_BRESP;
  input M_BVALID;
  output M_BREADY;
  output [3:0]M_ARID;
  output [31:0]M_ARADDR;
  output [7:0]M_ARLEN;
  output M_ARLOCK;
  output [2:0]M_ARSIZE;
  output [1:0]M_ARBURST;
  output M_ARVALID;
  input M_ARREADY;
  output [3:0]M_ARQOS;
  output [3:0]M_ARREGION;
  input [3:0]M_RID;
  input [31:0]M_RDATA;
  input [1:0]M_RRESP;
  input M_RLAST;
  input M_RVALID;
  output M_RREADY;
  input AXIS_CLK;
  input AXIS_TREADY;
  output AXIS_TVALID;
  output [31:0]AXIS_TDATA;
  output [3:0]AXIS_TSTRB;
  output AXIS_TLAST;
  output AXIS_TSTART;
  input PRESETn;
  input PCLK;
  input PSEL;
  input PENABLE;
  input [31:0]PADDR;
  input PWRITE;
  output [31:0]PRDATA;
  input [31:0]PWDATA;
  output PREADY;
  output PSLVERR;
  input [3:0]PSTRB;
  input [2:0]PPROT;
  output IRQ;

  wire ACLK;
  wire ARESETn;
  wire AXIS_CLK;
  wire [31:0]AXIS_TDATA;
  wire AXIS_TLAST;
  wire AXIS_TREADY;
  wire AXIS_TSTART;
  wire [3:0]AXIS_TSTRB;
  wire AXIS_TVALID;
  (* MARK_DEBUG *) wire [15:0]DMA_BNUM;
  (* MARK_DEBUG *) wire DMA_BUSY;
  (* MARK_DEBUG *) wire [7:0]DMA_CHUNK;
  (* MARK_DEBUG *) wire DMA_DONE;
  (* MARK_DEBUG *) wire DMA_EN;
  (* MARK_DEBUG *) wire DMA_GO;
  (* MARK_DEBUG *) wire [31:0]DMA_SRC;
  wire IRQ;
  wire [31:0]M_ARADDR;
  wire [1:0]M_ARBURST;
  wire [3:0]M_ARID;
  wire [7:0]M_ARLEN;
  wire M_ARLOCK;
  wire [3:0]M_ARQOS;
  wire M_ARREADY;
  wire [3:0]M_ARREGION;
  wire [2:0]M_ARSIZE;
  wire M_ARVALID;
  wire [31:0]M_AWADDR;
  wire [1:0]M_AWBURST;
  wire [3:0]M_AWID;
  wire [7:0]M_AWLEN;
  wire M_AWLOCK;
  wire [3:0]M_AWQOS;
  wire M_AWREADY;
  wire [3:0]M_AWREGION;
  wire [2:0]M_AWSIZE;
  wire M_AWVALID;
  wire [3:0]M_BID;
  wire M_BREADY;
  wire [1:0]M_BRESP;
  wire M_BVALID;
  wire [3:0]M_MID;
  wire [31:0]M_RDATA;
  wire [3:0]M_RID;
  wire M_RLAST;
  wire M_RREADY;
  wire [1:0]M_RRESP;
  wire M_RVALID;
  wire [31:0]M_WDATA;
  wire [3:0]M_WID;
  wire M_WLAST;
  wire M_WREADY;
  wire [3:0]M_WSTRB;
  wire M_WVALID;
  wire [31:0]PADDR;
  wire PCLK;
  wire PENABLE;
  wire [2:0]PPROT;
  wire [31:0]PRDATA;
  wire PREADY;
  wire PRESETn;
  wire PSEL;
  wire PSLVERR;
  wire [3:0]PSTRB;
  wire [31:0]PWDATA;
  wire PWRITE;
  wire sync_DMA_BUSY;
  wire sync_DMA_DONE;
  wire sync_DMA_EN;
  wire sync_DMA_GO;

  (* AXIS_WIDTH_DATA = "32" *) 
  (* AXIS_WIDTH_DS = "4" *) 
  (* AXI_MST_ID = "1" *) 
  (* AXI_WIDTH_AD = "32" *) 
  (* AXI_WIDTH_CID = "4" *) 
  (* AXI_WIDTH_DA = "32" *) 
  (* AXI_WIDTH_DS = "4" *) 
  (* AXI_WIDTH_DSB = "2" *) 
  (* AXI_WIDTH_ID = "4" *) 
  (* AXI_WIDTH_SID = "8" *) 
  (* FIFO_DEPTH = "16" *) 
  (* FIFO_FAW = "4" *) 
  (* FIFO_LAST = "33" *) 
  (* FIFO_START = "32" *) 
  (* FIFO_WIDTH = "34" *) 
  (* SR_ARB = "1" *) 
  (* SR_DONE = "3" *) 
  (* SR_IDLE = "0" *) 
  (* SR_RD = "2" *) 
  (* ST_ALIGN = "2" *) 
  (* ST_MISALIGN = "1" *) 
  (* ST_READ = "3" *) 
  (* ST_READY = "0" *) 
  (* ST_READ_DONE = "4" *) 
  axi_mem2stream_core u_core
       (.ACLK(ACLK),
        .ARESETn(ARESETn),
        .AXIS_CLK(AXIS_CLK),
        .AXIS_TDATA(AXIS_TDATA),
        .AXIS_TLAST(AXIS_TLAST),
        .AXIS_TREADY(AXIS_TREADY),
        .AXIS_TSTART(AXIS_TSTART),
        .AXIS_TSTRB(AXIS_TSTRB),
        .AXIS_TVALID(AXIS_TVALID),
        .DMA_BNUM(DMA_BNUM),
        .DMA_BUSY(DMA_BUSY),
        .DMA_CHUNK(DMA_CHUNK),
        .DMA_DONE(DMA_DONE),
        .DMA_EN(sync_DMA_EN),
        .DMA_GO(sync_DMA_GO),
        .DMA_SRC(DMA_SRC),
        .M_ARADDR(M_ARADDR),
        .M_ARBURST(M_ARBURST),
        .M_ARID(M_ARID),
        .M_ARLEN(M_ARLEN),
        .M_ARLOCK(M_ARLOCK),
        .M_ARQOS(M_ARQOS),
        .M_ARREADY(M_ARREADY),
        .M_ARREGION(M_ARREGION),
        .M_ARSIZE(M_ARSIZE),
        .M_ARVALID(M_ARVALID),
        .M_AWADDR(M_AWADDR),
        .M_AWBURST(M_AWBURST),
        .M_AWID(M_AWID),
        .M_AWLEN(M_AWLEN),
        .M_AWLOCK(M_AWLOCK),
        .M_AWQOS(M_AWQOS),
        .M_AWREADY(M_AWREADY),
        .M_AWREGION(M_AWREGION),
        .M_AWSIZE(M_AWSIZE),
        .M_AWVALID(M_AWVALID),
        .M_BID(M_BID),
        .M_BREADY(M_BREADY),
        .M_BRESP(M_BRESP),
        .M_BVALID(M_BVALID),
        .M_MID(M_MID),
        .M_RDATA(M_RDATA),
        .M_RID(M_RID),
        .M_RLAST(M_RLAST),
        .M_RREADY(M_RREADY),
        .M_RRESP(M_RRESP),
        .M_RVALID(M_RVALID),
        .M_WDATA(M_WDATA),
        .M_WID(M_WID),
        .M_WLAST(M_WLAST),
        .M_WREADY(M_WREADY),
        .M_WSTRB(M_WSTRB),
        .M_WVALID(M_WVALID));
  (* APB_AW = "32" *) 
  (* APB_DS = "4" *) 
  (* APB_DW = "32" *) 
  (* DMA_AWID = "32" *) 
  (* T_ADDR_WID = "8" *) 
  axi_mem2stream_csr_apb u_csr
       (.DMA_BNUM(DMA_BNUM),
        .DMA_BUSY(sync_DMA_BUSY),
        .DMA_CHUNK(DMA_CHUNK),
        .DMA_DONE(sync_DMA_DONE),
        .DMA_EN(DMA_EN),
        .DMA_GO(DMA_GO),
        .DMA_SRC(DMA_SRC),
        .IRQ(IRQ),
        .PADDR(PADDR),
        .PCLK(PCLK),
        .PENABLE(PENABLE),
        .PPROT(PPROT),
        .PRDATA(PRDATA),
        .PREADY(PREADY),
        .PRESETn(PRESETn),
        .PSEL(PSEL),
        .PSLVERR(PSLVERR),
        .PSTRB(PSTRB),
        .PWDATA(PWDATA),
        .PWRITE(PWRITE));
  (* ACTIVE_HIGH = "1" *) 
  (* CYCLES = "2" *) 
  (* INIT_VALUE = "1'b0" *) 
  axi_mem2stream_sync__3 u_dma_busy
       (.clk(PCLK),
        .reset_n(PRESETn),
        .sig_in(DMA_BUSY),
        .sig_out(sync_DMA_BUSY));
  (* ACTIVE_HIGH = "1" *) 
  (* CYCLES = "2" *) 
  (* INIT_VALUE = "1'b0" *) 
  axi_mem2stream_sync u_dma_done
       (.clk(PCLK),
        .reset_n(PRESETn),
        .sig_in(DMA_DONE),
        .sig_out(sync_DMA_DONE));
  (* ACTIVE_HIGH = "1" *) 
  (* CYCLES = "2" *) 
  (* INIT_VALUE = "1'b0" *) 
  axi_mem2stream_sync__1 u_dma_en
       (.clk(ACLK),
        .reset_n(ARESETn),
        .sig_in(DMA_EN),
        .sig_out(sync_DMA_EN));
  (* ACTIVE_HIGH = "1" *) 
  (* CYCLES = "2" *) 
  (* INIT_VALUE = "1'b0" *) 
  axi_mem2stream_sync__2 u_dma_go
       (.clk(ACLK),
        .reset_n(ARESETn),
        .sig_in(DMA_GO),
        .sig_out(sync_DMA_GO));
endmodule

(* AXIS_WIDTH_DATA = "32" *) (* AXIS_WIDTH_DS = "4" *) (* AXI_MST_ID = "1" *) 
(* AXI_WIDTH_AD = "32" *) (* AXI_WIDTH_CID = "4" *) (* AXI_WIDTH_DA = "32" *) 
(* AXI_WIDTH_DS = "4" *) (* AXI_WIDTH_DSB = "2" *) (* AXI_WIDTH_ID = "4" *) 
(* AXI_WIDTH_SID = "8" *) (* FIFO_DEPTH = "16" *) (* FIFO_FAW = "4" *) 
(* FIFO_LAST = "33" *) (* FIFO_START = "32" *) (* FIFO_WIDTH = "34" *) 
(* SR_ARB = "1" *) (* SR_DONE = "3" *) (* SR_IDLE = "0" *) 
(* SR_RD = "2" *) (* ST_ALIGN = "2" *) (* ST_MISALIGN = "1" *) 
(* ST_READ = "3" *) (* ST_READY = "0" *) (* ST_READ_DONE = "4" *) 
module axi_mem2stream_core
   (ARESETn,
    ACLK,
    M_MID,
    M_ARID,
    M_ARADDR,
    M_ARLEN,
    M_ARLOCK,
    M_ARSIZE,
    M_ARBURST,
    M_ARVALID,
    M_ARREADY,
    M_ARQOS,
    M_ARREGION,
    M_RID,
    M_RDATA,
    M_RRESP,
    M_RLAST,
    M_RVALID,
    M_RREADY,
    M_AWID,
    M_AWADDR,
    M_AWLEN,
    M_AWLOCK,
    M_AWSIZE,
    M_AWBURST,
    M_AWVALID,
    M_AWREADY,
    M_AWQOS,
    M_AWREGION,
    M_WID,
    M_WDATA,
    M_WSTRB,
    M_WLAST,
    M_WVALID,
    M_WREADY,
    M_BID,
    M_BRESP,
    M_BVALID,
    M_BREADY,
    DMA_EN,
    DMA_GO,
    DMA_BUSY,
    DMA_DONE,
    DMA_SRC,
    DMA_BNUM,
    DMA_CHUNK,
    AXIS_CLK,
    AXIS_TREADY,
    AXIS_TVALID,
    AXIS_TDATA,
    AXIS_TSTRB,
    AXIS_TLAST,
    AXIS_TSTART);
  input ARESETn;
  input ACLK;
  output [3:0]M_MID;
  output [3:0]M_ARID;
  output [31:0]M_ARADDR;
  output [7:0]M_ARLEN;
  output M_ARLOCK;
  output [2:0]M_ARSIZE;
  output [1:0]M_ARBURST;
  output M_ARVALID;
  input M_ARREADY;
  output [3:0]M_ARQOS;
  output [3:0]M_ARREGION;
  input [3:0]M_RID;
  input [31:0]M_RDATA;
  input [1:0]M_RRESP;
  input M_RLAST;
  input M_RVALID;
  output M_RREADY;
  output [3:0]M_AWID;
  output [31:0]M_AWADDR;
  output [7:0]M_AWLEN;
  output M_AWLOCK;
  output [2:0]M_AWSIZE;
  output [1:0]M_AWBURST;
  output M_AWVALID;
  input M_AWREADY;
  output [3:0]M_AWQOS;
  output [3:0]M_AWREGION;
  output [3:0]M_WID;
  output [31:0]M_WDATA;
  output [3:0]M_WSTRB;
  output M_WLAST;
  output M_WVALID;
  input M_WREADY;
  input [3:0]M_BID;
  input [1:0]M_BRESP;
  input M_BVALID;
  output M_BREADY;
  input DMA_EN;
  input DMA_GO;
  output DMA_BUSY;
  output DMA_DONE;
  input [31:0]DMA_SRC;
  input [15:0]DMA_BNUM;
  input [7:0]DMA_CHUNK;
  input AXIS_CLK;
  (* mark_debug = "true" *) input AXIS_TREADY;
  (* mark_debug = "true" *) output AXIS_TVALID;
  (* mark_debug = "true" *) output [31:0]AXIS_TDATA;
  (* mark_debug = "true" *) output [3:0]AXIS_TSTRB;
  (* mark_debug = "true" *) output AXIS_TLAST;
  (* mark_debug = "true" *) output AXIS_TSTART;

  wire \<const0> ;
  wire \<const1> ;
  wire ACLK;
  wire ARESETn;
  wire AXIS_CLK;
  (* MARK_DEBUG *) wire [31:0]AXIS_TDATA;
  (* MARK_DEBUG *) wire AXIS_TLAST;
  (* MARK_DEBUG *) wire AXIS_TREADY;
  (* MARK_DEBUG *) wire AXIS_TSTART;
  (* MARK_DEBUG *) wire [3:0]AXIS_TSTRB;
  (* MARK_DEBUG *) wire AXIS_TVALID;
  wire \BLK_FIFO34.u_fifo_n_43 ;
  wire \BLK_FIFO34.u_fifo_n_44 ;
  wire \BLK_FIFO34.u_fifo_n_45 ;
  wire \BLK_FIFO34.u_fifo_n_46 ;
  wire \CID_reg_n_0_[0] ;
  wire \CID_reg_n_0_[1] ;
  wire \CID_reg_n_0_[2] ;
  wire \CID_reg_n_0_[3] ;
  wire [15:0]DMA_BNUM;
  wire DMA_BUSY;
  wire DMA_BUSY3;
  wire DMA_BUSY9_out;
  wire DMA_BUSY_i_10_n_0;
  wire DMA_BUSY_i_11_n_0;
  wire DMA_BUSY_i_12_n_0;
  wire DMA_BUSY_i_13_n_0;
  wire DMA_BUSY_i_14_n_0;
  wire DMA_BUSY_i_1_n_0;
  wire DMA_BUSY_i_3_n_0;
  wire DMA_BUSY_i_4_n_0;
  wire DMA_BUSY_i_6_n_0;
  wire DMA_BUSY_i_7_n_0;
  wire DMA_BUSY_i_8_n_0;
  wire DMA_BUSY_i_9_n_0;
  wire DMA_BUSY_reg_i_5_n_2;
  wire DMA_BUSY_reg_i_5_n_3;
  wire [7:0]DMA_CHUNK;
  wire DMA_DONE;
  wire DMA_DONE_i_1_n_0;
  wire DMA_DONE_i_2_n_0;
  wire DMA_EN;
  wire DMA_GO;
  wire [31:0]DMA_SRC;
  wire [31:0]M_ARADDR;
  wire \M_ARADDR[0]_i_1_n_0 ;
  wire \M_ARADDR[10]_i_1_n_0 ;
  wire \M_ARADDR[11]_i_1_n_0 ;
  wire \M_ARADDR[12]_i_1_n_0 ;
  wire \M_ARADDR[13]_i_1_n_0 ;
  wire \M_ARADDR[14]_i_1_n_0 ;
  wire \M_ARADDR[15]_i_1_n_0 ;
  wire \M_ARADDR[16]_i_1_n_0 ;
  wire \M_ARADDR[17]_i_1_n_0 ;
  wire \M_ARADDR[18]_i_1_n_0 ;
  wire \M_ARADDR[19]_i_1_n_0 ;
  wire \M_ARADDR[1]_i_1_n_0 ;
  wire \M_ARADDR[20]_i_1_n_0 ;
  wire \M_ARADDR[21]_i_1_n_0 ;
  wire \M_ARADDR[22]_i_1_n_0 ;
  wire \M_ARADDR[23]_i_1_n_0 ;
  wire \M_ARADDR[24]_i_1_n_0 ;
  wire \M_ARADDR[25]_i_1_n_0 ;
  wire \M_ARADDR[26]_i_1_n_0 ;
  wire \M_ARADDR[27]_i_1_n_0 ;
  wire \M_ARADDR[28]_i_1_n_0 ;
  wire \M_ARADDR[29]_i_1_n_0 ;
  wire \M_ARADDR[2]_i_1_n_0 ;
  wire \M_ARADDR[30]_i_1_n_0 ;
  wire \M_ARADDR[31]_i_1_n_0 ;
  wire \M_ARADDR[3]_i_1_n_0 ;
  wire \M_ARADDR[4]_i_1_n_0 ;
  wire \M_ARADDR[5]_i_1_n_0 ;
  wire \M_ARADDR[6]_i_1_n_0 ;
  wire \M_ARADDR[7]_i_1_n_0 ;
  wire \M_ARADDR[8]_i_1_n_0 ;
  wire \M_ARADDR[9]_i_1_n_0 ;
  wire [3:0]M_ARID;
  wire \M_ARID[0]_i_1_n_0 ;
  wire \M_ARID[1]_i_1_n_0 ;
  wire \M_ARID[2]_i_1_n_0 ;
  wire \M_ARID[3]_i_1_n_0 ;
  wire \M_ARID[3]_i_2_n_0 ;
  wire \M_ARID[3]_i_3_n_0 ;
  wire [7:0]M_ARLEN;
  wire \M_ARLEN[0]_i_1_n_0 ;
  wire \M_ARLEN[1]_i_1_n_0 ;
  wire \M_ARLEN[2]_i_1_n_0 ;
  wire \M_ARLEN[3]_i_1_n_0 ;
  wire \M_ARLEN[4]_i_1_n_0 ;
  wire \M_ARLEN[5]_i_1_n_0 ;
  wire \M_ARLEN[5]_i_2_n_0 ;
  wire \M_ARLEN[6]_i_1_n_0 ;
  wire \M_ARLEN[7]_i_1_n_0 ;
  wire \M_ARLEN[7]_i_2_n_0 ;
  wire M_ARREADY;
  wire [1:1]\^M_ARSIZE ;
  wire \M_ARSIZE[1]_i_1_n_0 ;
  wire M_ARVALID;
  wire M_ARVALID_i_1_n_0;
  wire M_RLAST;
  wire M_RREADY;
  wire M_RVALID;
  wire [31:0]R_addr;
  wire \R_addr[0]_i_1_n_0 ;
  wire \R_addr[10]_i_1_n_0 ;
  wire \R_addr[11]_i_1_n_0 ;
  wire \R_addr[11]_i_3_n_0 ;
  wire \R_addr[11]_i_4_n_0 ;
  wire \R_addr[11]_i_5_n_0 ;
  wire \R_addr[11]_i_6_n_0 ;
  wire \R_addr[12]_i_1_n_0 ;
  wire \R_addr[13]_i_1_n_0 ;
  wire \R_addr[14]_i_1_n_0 ;
  wire \R_addr[15]_i_1_n_0 ;
  wire \R_addr[15]_i_3_n_0 ;
  wire \R_addr[15]_i_4_n_0 ;
  wire \R_addr[15]_i_5_n_0 ;
  wire \R_addr[15]_i_6_n_0 ;
  wire \R_addr[16]_i_1_n_0 ;
  wire \R_addr[17]_i_1_n_0 ;
  wire \R_addr[18]_i_1_n_0 ;
  wire \R_addr[19]_i_1_n_0 ;
  wire \R_addr[1]_i_1_n_0 ;
  wire \R_addr[20]_i_1_n_0 ;
  wire \R_addr[21]_i_1_n_0 ;
  wire \R_addr[22]_i_1_n_0 ;
  wire \R_addr[23]_i_1_n_0 ;
  wire \R_addr[24]_i_1_n_0 ;
  wire \R_addr[25]_i_1_n_0 ;
  wire \R_addr[26]_i_1_n_0 ;
  wire \R_addr[27]_i_1_n_0 ;
  wire \R_addr[28]_i_1_n_0 ;
  wire \R_addr[29]_i_1_n_0 ;
  wire \R_addr[2]_i_1_n_0 ;
  wire \R_addr[30]_i_1_n_0 ;
  wire \R_addr[31]_i_1_n_0 ;
  wire \R_addr[31]_i_2_n_0 ;
  wire \R_addr[3]_i_1_n_0 ;
  wire \R_addr[3]_i_3_n_0 ;
  wire \R_addr[3]_i_4_n_0 ;
  wire \R_addr[3]_i_5_n_0 ;
  wire \R_addr[3]_i_6_n_0 ;
  wire \R_addr[4]_i_1_n_0 ;
  wire \R_addr[5]_i_1_n_0 ;
  wire \R_addr[6]_i_1_n_0 ;
  wire \R_addr[7]_i_1_n_0 ;
  wire \R_addr[7]_i_3_n_0 ;
  wire \R_addr[7]_i_4_n_0 ;
  wire \R_addr[7]_i_5_n_0 ;
  wire \R_addr[7]_i_6_n_0 ;
  wire \R_addr[8]_i_1_n_0 ;
  wire \R_addr[9]_i_1_n_0 ;
  wire \R_addr_reg[11]_i_2_n_0 ;
  wire \R_addr_reg[11]_i_2_n_1 ;
  wire \R_addr_reg[11]_i_2_n_2 ;
  wire \R_addr_reg[11]_i_2_n_3 ;
  wire \R_addr_reg[11]_i_2_n_4 ;
  wire \R_addr_reg[11]_i_2_n_5 ;
  wire \R_addr_reg[11]_i_2_n_6 ;
  wire \R_addr_reg[11]_i_2_n_7 ;
  wire \R_addr_reg[15]_i_2_n_0 ;
  wire \R_addr_reg[15]_i_2_n_1 ;
  wire \R_addr_reg[15]_i_2_n_2 ;
  wire \R_addr_reg[15]_i_2_n_3 ;
  wire \R_addr_reg[15]_i_2_n_4 ;
  wire \R_addr_reg[15]_i_2_n_5 ;
  wire \R_addr_reg[15]_i_2_n_6 ;
  wire \R_addr_reg[15]_i_2_n_7 ;
  wire \R_addr_reg[19]_i_2_n_0 ;
  wire \R_addr_reg[19]_i_2_n_1 ;
  wire \R_addr_reg[19]_i_2_n_2 ;
  wire \R_addr_reg[19]_i_2_n_3 ;
  wire \R_addr_reg[19]_i_2_n_4 ;
  wire \R_addr_reg[19]_i_2_n_5 ;
  wire \R_addr_reg[19]_i_2_n_6 ;
  wire \R_addr_reg[19]_i_2_n_7 ;
  wire \R_addr_reg[23]_i_2_n_0 ;
  wire \R_addr_reg[23]_i_2_n_1 ;
  wire \R_addr_reg[23]_i_2_n_2 ;
  wire \R_addr_reg[23]_i_2_n_3 ;
  wire \R_addr_reg[23]_i_2_n_4 ;
  wire \R_addr_reg[23]_i_2_n_5 ;
  wire \R_addr_reg[23]_i_2_n_6 ;
  wire \R_addr_reg[23]_i_2_n_7 ;
  wire \R_addr_reg[27]_i_2_n_0 ;
  wire \R_addr_reg[27]_i_2_n_1 ;
  wire \R_addr_reg[27]_i_2_n_2 ;
  wire \R_addr_reg[27]_i_2_n_3 ;
  wire \R_addr_reg[27]_i_2_n_4 ;
  wire \R_addr_reg[27]_i_2_n_5 ;
  wire \R_addr_reg[27]_i_2_n_6 ;
  wire \R_addr_reg[27]_i_2_n_7 ;
  wire \R_addr_reg[31]_i_3_n_1 ;
  wire \R_addr_reg[31]_i_3_n_2 ;
  wire \R_addr_reg[31]_i_3_n_3 ;
  wire \R_addr_reg[31]_i_3_n_4 ;
  wire \R_addr_reg[31]_i_3_n_5 ;
  wire \R_addr_reg[31]_i_3_n_6 ;
  wire \R_addr_reg[31]_i_3_n_7 ;
  wire \R_addr_reg[3]_i_2_n_0 ;
  wire \R_addr_reg[3]_i_2_n_1 ;
  wire \R_addr_reg[3]_i_2_n_2 ;
  wire \R_addr_reg[3]_i_2_n_3 ;
  wire \R_addr_reg[3]_i_2_n_4 ;
  wire \R_addr_reg[3]_i_2_n_5 ;
  wire \R_addr_reg[3]_i_2_n_6 ;
  wire \R_addr_reg[3]_i_2_n_7 ;
  wire \R_addr_reg[7]_i_2_n_0 ;
  wire \R_addr_reg[7]_i_2_n_1 ;
  wire \R_addr_reg[7]_i_2_n_2 ;
  wire \R_addr_reg[7]_i_2_n_3 ;
  wire \R_addr_reg[7]_i_2_n_4 ;
  wire \R_addr_reg[7]_i_2_n_5 ;
  wire \R_addr_reg[7]_i_2_n_6 ;
  wire \R_addr_reg[7]_i_2_n_7 ;
  (* MARK_DEBUG *) wire [15:0]R_chunk;
  wire \R_chunk[0]_i_1_n_0 ;
  wire \R_chunk[10]_i_1_n_0 ;
  wire \R_chunk[11]_i_1_n_0 ;
  wire \R_chunk[12]_i_1_n_0 ;
  wire \R_chunk[13]_i_1_n_0 ;
  wire \R_chunk[14]_i_1_n_0 ;
  wire \R_chunk[15]_i_1_n_0 ;
  wire \R_chunk[15]_i_2_n_0 ;
  wire \R_chunk[15]_i_3_n_0 ;
  wire \R_chunk[15]_i_4_n_0 ;
  wire \R_chunk[1]_i_1_n_0 ;
  wire \R_chunk[2]_i_1_n_0 ;
  wire \R_chunk[2]_i_2_n_0 ;
  wire \R_chunk[2]_i_3_n_0 ;
  wire \R_chunk[3]_i_1_n_0 ;
  wire \R_chunk[4]_i_1_n_0 ;
  wire \R_chunk[5]_i_1_n_0 ;
  wire \R_chunk[5]_i_2_n_0 ;
  wire \R_chunk[5]_i_3_n_0 ;
  wire \R_chunk[5]_i_4_n_0 ;
  wire \R_chunk[6]_i_1_n_0 ;
  wire \R_chunk[6]_i_2_n_0 ;
  wire \R_chunk[6]_i_3_n_0 ;
  wire \R_chunk[6]_i_4_n_0 ;
  wire \R_chunk[6]_i_5_n_0 ;
  wire \R_chunk[6]_i_6_n_0 ;
  wire \R_chunk[6]_i_7_n_0 ;
  wire \R_chunk[7]_i_1_n_0 ;
  wire \R_chunk[8]_i_1_n_0 ;
  wire \R_chunk[9]_i_1_n_0 ;
  wire [8:0]R_cnt;
  wire \R_cnt[0]_i_1_n_0 ;
  wire \R_cnt[1]_i_1_n_0 ;
  wire \R_cnt[2]_i_1_n_0 ;
  wire \R_cnt[3]_i_1_n_0 ;
  wire \R_cnt[4]_i_1_n_0 ;
  wire \R_cnt[4]_i_2_n_0 ;
  wire \R_cnt[5]_i_1_n_0 ;
  wire \R_cnt[5]_i_2_n_0 ;
  wire \R_cnt[6]_i_1_n_0 ;
  wire \R_cnt[7]_i_1_n_0 ;
  wire \R_cnt[8]_i_1_n_0 ;
  wire \R_cnt[8]_i_2_n_0 ;
  wire \R_cnt[8]_i_3_n_0 ;
  wire \R_cnt[8]_i_4_n_0 ;
  (* MARK_DEBUG *) wire R_done;
  wire R_done6_out;
  wire R_done_i_10_n_0;
  wire R_done_i_11_n_0;
  wire R_done_i_12_n_0;
  wire R_done_i_13_n_0;
  wire R_done_i_14_n_0;
  wire R_done_i_2_n_0;
  wire R_done_i_5_n_0;
  wire R_done_i_6_n_0;
  wire R_done_i_7_n_0;
  wire R_done_i_8_n_0;
  wire R_done_i_9_n_0;
  wire R_done_reg_i_3_n_3;
  wire R_done_reg_i_4_n_0;
  wire R_done_reg_i_4_n_1;
  wire R_done_reg_i_4_n_2;
  wire R_done_reg_i_4_n_3;
  wire R_first10_out;
  wire R_first_reg_n_0;
  (* MARK_DEBUG *) wire R_go;
  wire R_go1_out;
  wire R_go_i_2_n_0;
  wire \R_inc[0]_i_1_n_0 ;
  wire \R_inc[11]_i_1_n_0 ;
  wire \R_inc[12]_i_1_n_0 ;
  wire \R_inc[13]_i_1_n_0 ;
  wire \R_inc[14]_i_1_n_0 ;
  wire \R_inc[15]_i_1_n_0 ;
  wire \R_inc[15]_i_2_n_0 ;
  wire \R_inc[1]_i_1_n_0 ;
  wire \R_inc[2]_i_10_n_0 ;
  wire \R_inc[2]_i_11_n_0 ;
  wire \R_inc[2]_i_12_n_0 ;
  wire \R_inc[2]_i_13_n_0 ;
  wire \R_inc[2]_i_14_n_0 ;
  wire \R_inc[2]_i_1_n_0 ;
  wire \R_inc[2]_i_3_n_0 ;
  wire \R_inc[2]_i_5_n_0 ;
  wire \R_inc[2]_i_6_n_0 ;
  wire \R_inc[2]_i_7_n_0 ;
  wire \R_inc[2]_i_8_n_0 ;
  wire \R_inc[2]_i_9_n_0 ;
  wire \R_inc_reg[2]_i_2_n_0 ;
  wire \R_inc_reg[2]_i_2_n_1 ;
  wire \R_inc_reg[2]_i_2_n_2 ;
  wire \R_inc_reg[2]_i_2_n_3 ;
  wire \R_inc_reg[2]_i_4_n_0 ;
  wire \R_inc_reg[2]_i_4_n_1 ;
  wire \R_inc_reg[2]_i_4_n_2 ;
  wire \R_inc_reg[2]_i_4_n_3 ;
  wire \R_inc_reg_n_0_[0] ;
  wire \R_inc_reg_n_0_[10] ;
  wire \R_inc_reg_n_0_[11] ;
  wire \R_inc_reg_n_0_[12] ;
  wire \R_inc_reg_n_0_[13] ;
  wire \R_inc_reg_n_0_[14] ;
  wire \R_inc_reg_n_0_[15] ;
  wire \R_inc_reg_n_0_[1] ;
  wire \R_inc_reg_n_0_[2] ;
  wire \R_inc_reg_n_0_[3] ;
  wire \R_inc_reg_n_0_[4] ;
  wire \R_inc_reg_n_0_[5] ;
  wire \R_inc_reg_n_0_[6] ;
  wire \R_inc_reg_n_0_[7] ;
  wire \R_inc_reg_n_0_[8] ;
  wire \R_inc_reg_n_0_[9] ;
  wire R_last;
  wire \R_len[0]_i_1_n_0 ;
  wire \R_len[0]_i_2_n_0 ;
  wire \R_len[0]_i_3_n_0 ;
  wire \R_len[0]_i_4_n_0 ;
  wire \R_len[0]_i_5_n_0 ;
  wire \R_len[1]_i_1_n_0 ;
  wire \R_len[2]_i_1_n_0 ;
  wire \R_len[3]_i_1_n_0 ;
  wire \R_len[4]_i_1_n_0 ;
  wire \R_len[5]_i_1_n_0 ;
  wire \R_len[6]_i_1_n_0 ;
  wire \R_len[7]_i_1_n_0 ;
  wire \R_len[8]_i_10_n_0 ;
  wire \R_len[8]_i_11_n_0 ;
  wire \R_len[8]_i_12_n_0 ;
  wire \R_len[8]_i_13_n_0 ;
  wire \R_len[8]_i_14_n_0 ;
  wire \R_len[8]_i_15_n_0 ;
  wire \R_len[8]_i_16_n_0 ;
  wire \R_len[8]_i_17_n_0 ;
  wire \R_len[8]_i_18_n_0 ;
  wire \R_len[8]_i_19_n_0 ;
  wire \R_len[8]_i_1_n_0 ;
  wire \R_len[8]_i_20_n_0 ;
  wire \R_len[8]_i_2_n_0 ;
  wire \R_len[8]_i_5_n_0 ;
  wire \R_len[8]_i_6_n_0 ;
  wire \R_len[8]_i_7_n_0 ;
  wire \R_len[8]_i_8_n_0 ;
  wire \R_len[8]_i_9_n_0 ;
  wire \R_len_reg[8]_i_3_n_0 ;
  wire \R_len_reg[8]_i_3_n_1 ;
  wire \R_len_reg[8]_i_3_n_2 ;
  wire \R_len_reg[8]_i_3_n_3 ;
  wire \R_len_reg[8]_i_4_n_0 ;
  wire \R_len_reg[8]_i_4_n_1 ;
  wire \R_len_reg[8]_i_4_n_2 ;
  wire \R_len_reg[8]_i_4_n_3 ;
  wire \R_len_reg_n_0_[0] ;
  wire \R_len_reg_n_0_[1] ;
  wire \R_len_reg_n_0_[2] ;
  wire \R_len_reg_n_0_[3] ;
  wire \R_len_reg_n_0_[4] ;
  wire \R_len_reg_n_0_[5] ;
  wire \R_len_reg_n_0_[6] ;
  wire \R_len_reg_n_0_[7] ;
  wire \R_len_reg_n_0_[8] ;
  (* MARK_DEBUG *) wire [15:0]R_rem;
  wire \R_rem[0]_i_1_n_0 ;
  wire \R_rem[0]_i_2_n_0 ;
  wire \R_rem[10]_i_1_n_0 ;
  wire \R_rem[10]_i_2_n_0 ;
  wire \R_rem[11]_i_1_n_0 ;
  wire \R_rem[11]_i_2_n_0 ;
  wire \R_rem[11]_i_4_n_0 ;
  wire \R_rem[11]_i_5_n_0 ;
  wire \R_rem[11]_i_6_n_0 ;
  wire \R_rem[11]_i_7_n_0 ;
  wire \R_rem[12]_i_1_n_0 ;
  wire \R_rem[12]_i_2_n_0 ;
  wire \R_rem[13]_i_1_n_0 ;
  wire \R_rem[13]_i_2_n_0 ;
  wire \R_rem[14]_i_1_n_0 ;
  wire \R_rem[14]_i_2_n_0 ;
  wire \R_rem[15]_i_1_n_0 ;
  wire \R_rem[15]_i_2_n_0 ;
  wire \R_rem[15]_i_4_n_0 ;
  wire \R_rem[15]_i_5_n_0 ;
  wire \R_rem[15]_i_6_n_0 ;
  wire \R_rem[15]_i_7_n_0 ;
  wire \R_rem[1]_i_1_n_0 ;
  wire \R_rem[1]_i_2_n_0 ;
  wire \R_rem[2]_i_1_n_0 ;
  wire \R_rem[2]_i_2_n_0 ;
  wire \R_rem[3]_i_1_n_0 ;
  wire \R_rem[3]_i_2_n_0 ;
  wire \R_rem[3]_i_4_n_0 ;
  wire \R_rem[3]_i_5_n_0 ;
  wire \R_rem[3]_i_6_n_0 ;
  wire \R_rem[3]_i_7_n_0 ;
  wire \R_rem[4]_i_1_n_0 ;
  wire \R_rem[4]_i_2_n_0 ;
  wire \R_rem[5]_i_1_n_0 ;
  wire \R_rem[5]_i_2_n_0 ;
  wire \R_rem[6]_i_1_n_0 ;
  wire \R_rem[6]_i_2_n_0 ;
  wire \R_rem[7]_i_1_n_0 ;
  wire \R_rem[7]_i_2_n_0 ;
  wire \R_rem[7]_i_4_n_0 ;
  wire \R_rem[7]_i_5_n_0 ;
  wire \R_rem[7]_i_6_n_0 ;
  wire \R_rem[7]_i_7_n_0 ;
  wire \R_rem[8]_i_1_n_0 ;
  wire \R_rem[8]_i_2_n_0 ;
  wire \R_rem[9]_i_1_n_0 ;
  wire \R_rem[9]_i_2_n_0 ;
  wire \R_rem_reg[11]_i_3_n_0 ;
  wire \R_rem_reg[11]_i_3_n_1 ;
  wire \R_rem_reg[11]_i_3_n_2 ;
  wire \R_rem_reg[11]_i_3_n_3 ;
  wire \R_rem_reg[11]_i_3_n_4 ;
  wire \R_rem_reg[11]_i_3_n_5 ;
  wire \R_rem_reg[11]_i_3_n_6 ;
  wire \R_rem_reg[11]_i_3_n_7 ;
  wire \R_rem_reg[15]_i_3_n_1 ;
  wire \R_rem_reg[15]_i_3_n_2 ;
  wire \R_rem_reg[15]_i_3_n_3 ;
  wire \R_rem_reg[15]_i_3_n_4 ;
  wire \R_rem_reg[15]_i_3_n_5 ;
  wire \R_rem_reg[15]_i_3_n_6 ;
  wire \R_rem_reg[15]_i_3_n_7 ;
  wire \R_rem_reg[3]_i_3_n_0 ;
  wire \R_rem_reg[3]_i_3_n_1 ;
  wire \R_rem_reg[3]_i_3_n_2 ;
  wire \R_rem_reg[3]_i_3_n_3 ;
  wire \R_rem_reg[3]_i_3_n_4 ;
  wire \R_rem_reg[3]_i_3_n_5 ;
  wire \R_rem_reg[3]_i_3_n_6 ;
  wire \R_rem_reg[3]_i_3_n_7 ;
  wire \R_rem_reg[7]_i_3_n_0 ;
  wire \R_rem_reg[7]_i_3_n_1 ;
  wire \R_rem_reg[7]_i_3_n_2 ;
  wire \R_rem_reg[7]_i_3_n_3 ;
  wire \R_rem_reg[7]_i_3_n_4 ;
  wire \R_rem_reg[7]_i_3_n_5 ;
  wire \R_rem_reg[7]_i_3_n_6 ;
  wire \R_rem_reg[7]_i_3_n_7 ;
  wire [2:0]R_size;
  wire \R_size[0]_i_1_n_0 ;
  wire \R_size[2]_i_1_n_0 ;
  wire R_start_i_1_n_0;
  wire R_start_reg_n_0;
  (* MARK_DEBUG *) wire fifo_empty;
  (* MARK_DEBUG *) wire fifo_full;
  (* MARK_DEBUG *) wire [33:0]fifo_rd_dat;
  (* MARK_DEBUG *) wire fifo_rd_rdy;
  (* MARK_DEBUG *) wire fifo_rd_vld;
  (* MARK_DEBUG *) wire [4:0]fifo_rooms;
  (* MARK_DEBUG *) wire [33:0]fifo_wr_dat;
  wire fifo_wr_dat_inferred_i_10_n_0;
  wire fifo_wr_dat_inferred_i_3_n_3;
  wire fifo_wr_dat_inferred_i_4_n_0;
  wire fifo_wr_dat_inferred_i_4_n_1;
  wire fifo_wr_dat_inferred_i_4_n_2;
  wire fifo_wr_dat_inferred_i_4_n_3;
  wire fifo_wr_dat_inferred_i_5_n_0;
  wire fifo_wr_dat_inferred_i_6_n_0;
  wire fifo_wr_dat_inferred_i_7_n_0;
  wire fifo_wr_dat_inferred_i_8_n_0;
  wire fifo_wr_dat_inferred_i_9_n_0;
  (* MARK_DEBUG *) wire fifo_wr_rdy;
  (* MARK_DEBUG *) wire fifo_wr_vld;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [2:0]state;
  wire \state[0]_i_1_n_0 ;
  wire \state[0]_i_2_n_0 ;
  wire \state[0]_i_3_n_0 ;
  wire \state[0]_i_4_n_0 ;
  wire \state[1]_i_1_n_0 ;
  wire \state[1]_i_2_n_0 ;
  wire \state[1]_i_3_n_0 ;
  wire \state[1]_i_4_n_0 ;
  wire \state[2]_i_1_n_0 ;
  (* MARK_DEBUG *) (* RTL_KEEP = "true" *) wire [1:0]state_read;
  wire \state_read[0]_i_1_n_0 ;
  wire \state_read[1]_i_1_n_0 ;
  wire \NLW_BLK_FIFO34.u_fifo_almost_full_UNCONNECTED ;
  wire [4:0]\NLW_BLK_FIFO34.u_fifo_rd_data_count_UNCONNECTED ;
  wire [3:3]NLW_DMA_BUSY_reg_i_5_CO_UNCONNECTED;
  wire [3:0]NLW_DMA_BUSY_reg_i_5_O_UNCONNECTED;
  wire [3:3]\NLW_R_addr_reg[31]_i_3_CO_UNCONNECTED ;
  wire [3:1]NLW_R_done_reg_i_3_CO_UNCONNECTED;
  wire [3:0]NLW_R_done_reg_i_3_O_UNCONNECTED;
  wire [3:0]NLW_R_done_reg_i_4_O_UNCONNECTED;
  wire [3:0]\NLW_R_inc_reg[2]_i_2_O_UNCONNECTED ;
  wire [3:0]\NLW_R_inc_reg[2]_i_4_O_UNCONNECTED ;
  wire [3:0]\NLW_R_len_reg[8]_i_3_O_UNCONNECTED ;
  wire [3:0]\NLW_R_len_reg[8]_i_4_O_UNCONNECTED ;
  wire [3:3]\NLW_R_rem_reg[15]_i_3_CO_UNCONNECTED ;
  wire [3:2]NLW_fifo_wr_dat_inferred_i_3_CO_UNCONNECTED;
  wire [3:0]NLW_fifo_wr_dat_inferred_i_3_O_UNCONNECTED;
  wire [3:0]NLW_fifo_wr_dat_inferred_i_4_O_UNCONNECTED;

  assign M_ARBURST[1] = \<const0> ;
  assign M_ARBURST[0] = \<const1> ;
  assign M_ARLOCK = \<const0> ;
  assign M_ARQOS[3] = \<const0> ;
  assign M_ARQOS[2] = \<const0> ;
  assign M_ARQOS[1] = \<const0> ;
  assign M_ARQOS[0] = \<const0> ;
  assign M_ARREGION[3] = \<const0> ;
  assign M_ARREGION[2] = \<const0> ;
  assign M_ARREGION[1] = \<const0> ;
  assign M_ARREGION[0] = \<const0> ;
  assign M_ARSIZE[2] = \<const0> ;
  assign M_ARSIZE[1] = \^M_ARSIZE [1];
  assign M_ARSIZE[0] = \<const0> ;
  assign M_AWADDR[31] = \<const0> ;
  assign M_AWADDR[30] = \<const0> ;
  assign M_AWADDR[29] = \<const0> ;
  assign M_AWADDR[28] = \<const0> ;
  assign M_AWADDR[27] = \<const0> ;
  assign M_AWADDR[26] = \<const0> ;
  assign M_AWADDR[25] = \<const0> ;
  assign M_AWADDR[24] = \<const0> ;
  assign M_AWADDR[23] = \<const0> ;
  assign M_AWADDR[22] = \<const0> ;
  assign M_AWADDR[21] = \<const0> ;
  assign M_AWADDR[20] = \<const0> ;
  assign M_AWADDR[19] = \<const0> ;
  assign M_AWADDR[18] = \<const0> ;
  assign M_AWADDR[17] = \<const0> ;
  assign M_AWADDR[16] = \<const0> ;
  assign M_AWADDR[15] = \<const0> ;
  assign M_AWADDR[14] = \<const0> ;
  assign M_AWADDR[13] = \<const0> ;
  assign M_AWADDR[12] = \<const0> ;
  assign M_AWADDR[11] = \<const0> ;
  assign M_AWADDR[10] = \<const0> ;
  assign M_AWADDR[9] = \<const0> ;
  assign M_AWADDR[8] = \<const0> ;
  assign M_AWADDR[7] = \<const0> ;
  assign M_AWADDR[6] = \<const0> ;
  assign M_AWADDR[5] = \<const0> ;
  assign M_AWADDR[4] = \<const0> ;
  assign M_AWADDR[3] = \<const0> ;
  assign M_AWADDR[2] = \<const0> ;
  assign M_AWADDR[1] = \<const0> ;
  assign M_AWADDR[0] = \<const0> ;
  assign M_AWBURST[1] = \<const0> ;
  assign M_AWBURST[0] = \<const0> ;
  assign M_AWID[3] = \<const0> ;
  assign M_AWID[2] = \<const0> ;
  assign M_AWID[1] = \<const0> ;
  assign M_AWID[0] = \<const0> ;
  assign M_AWLEN[7] = \<const0> ;
  assign M_AWLEN[6] = \<const0> ;
  assign M_AWLEN[5] = \<const0> ;
  assign M_AWLEN[4] = \<const0> ;
  assign M_AWLEN[3] = \<const0> ;
  assign M_AWLEN[2] = \<const0> ;
  assign M_AWLEN[1] = \<const0> ;
  assign M_AWLEN[0] = \<const0> ;
  assign M_AWLOCK = \<const0> ;
  assign M_AWQOS[3] = \<const0> ;
  assign M_AWQOS[2] = \<const0> ;
  assign M_AWQOS[1] = \<const0> ;
  assign M_AWQOS[0] = \<const0> ;
  assign M_AWREGION[3] = \<const0> ;
  assign M_AWREGION[2] = \<const0> ;
  assign M_AWREGION[1] = \<const0> ;
  assign M_AWREGION[0] = \<const0> ;
  assign M_AWSIZE[2] = \<const0> ;
  assign M_AWSIZE[1] = \<const0> ;
  assign M_AWSIZE[0] = \<const0> ;
  assign M_AWVALID = \<const0> ;
  assign M_BREADY = \<const0> ;
  assign M_MID[3] = \<const0> ;
  assign M_MID[2] = \<const0> ;
  assign M_MID[1] = \<const0> ;
  assign M_MID[0] = \<const1> ;
  assign M_WDATA[31] = \<const0> ;
  assign M_WDATA[30] = \<const0> ;
  assign M_WDATA[29] = \<const0> ;
  assign M_WDATA[28] = \<const0> ;
  assign M_WDATA[27] = \<const0> ;
  assign M_WDATA[26] = \<const0> ;
  assign M_WDATA[25] = \<const0> ;
  assign M_WDATA[24] = \<const0> ;
  assign M_WDATA[23] = \<const0> ;
  assign M_WDATA[22] = \<const0> ;
  assign M_WDATA[21] = \<const0> ;
  assign M_WDATA[20] = \<const0> ;
  assign M_WDATA[19] = \<const0> ;
  assign M_WDATA[18] = \<const0> ;
  assign M_WDATA[17] = \<const0> ;
  assign M_WDATA[16] = \<const0> ;
  assign M_WDATA[15] = \<const0> ;
  assign M_WDATA[14] = \<const0> ;
  assign M_WDATA[13] = \<const0> ;
  assign M_WDATA[12] = \<const0> ;
  assign M_WDATA[11] = \<const0> ;
  assign M_WDATA[10] = \<const0> ;
  assign M_WDATA[9] = \<const0> ;
  assign M_WDATA[8] = \<const0> ;
  assign M_WDATA[7] = \<const0> ;
  assign M_WDATA[6] = \<const0> ;
  assign M_WDATA[5] = \<const0> ;
  assign M_WDATA[4] = \<const0> ;
  assign M_WDATA[3] = \<const0> ;
  assign M_WDATA[2] = \<const0> ;
  assign M_WDATA[1] = \<const0> ;
  assign M_WDATA[0] = \<const0> ;
  assign M_WID[3] = \<const0> ;
  assign M_WID[2] = \<const0> ;
  assign M_WID[1] = \<const0> ;
  assign M_WID[0] = \<const0> ;
  assign M_WLAST = \<const0> ;
  assign M_WSTRB[3] = \<const0> ;
  assign M_WSTRB[2] = \<const0> ;
  assign M_WSTRB[1] = \<const0> ;
  assign M_WSTRB[0] = \<const0> ;
  assign M_WVALID = \<const0> ;
  assign fifo_wr_dat[31:0] = M_RDATA[31:0];
  (* AXIS_WIDTH_DATA = "32" *) 
  (* AXIS_WIDTH_DS = "4" *) 
  (* AXI_WIDTH_DA = "32" *) 
  (* FIFO_LAST = "33" *) 
  (* FIFO_START = "32" *) 
  (* FIFO_WIDTH = "34" *) 
  axi_mem2stream_equal \BLK_EQUAL.u_core 
       (.ARESETn(ARESETn),
        .AXIS_CLK(AXIS_CLK),
        .AXIS_TDATA(AXIS_TDATA),
        .AXIS_TLAST(AXIS_TLAST),
        .AXIS_TREADY(AXIS_TREADY),
        .AXIS_TSTART(AXIS_TSTART),
        .AXIS_TSTRB(AXIS_TSTRB),
        .AXIS_TVALID(AXIS_TVALID),
        .fifo_empty(fifo_empty),
        .fifo_full(fifo_full),
        .fifo_rd_dat(fifo_rd_dat),
        .fifo_rd_rdy(fifo_rd_rdy),
        .fifo_rd_vld(fifo_rd_vld));
  (* KEEP = "yes" *) 
  (* black_box_pad_pin = "rst,wr_clk,rd_clk,din[33:0],wr_en,rd_en,dout[33:0],full,almost_full,empty,valid,rd_data_count[4:0],wr_data_count[4:0]" *) 
  (* syn_black_box = "1" *) 
  (* x_core_info = "fifo_generator_v13_2_3,Vivado 2018.3" *) 
  axi_mem2stream_fifo_async_34x16 \BLK_FIFO34.u_fifo 
       (.almost_full(\NLW_BLK_FIFO34.u_fifo_almost_full_UNCONNECTED ),
        .din(fifo_wr_dat),
        .dout(fifo_rd_dat),
        .empty(fifo_empty),
        .full(fifo_full),
        .rd_clk(AXIS_CLK),
        .rd_data_count(\NLW_BLK_FIFO34.u_fifo_rd_data_count_UNCONNECTED [4:0]),
        .rd_en(fifo_rd_rdy),
        .rst(\M_ARID[3]_i_3_n_0 ),
        .valid(fifo_rd_vld),
        .wr_clk(ACLK),
        .wr_data_count({\BLK_FIFO34.u_fifo_n_43 ,\BLK_FIFO34.u_fifo_n_44 ,\BLK_FIFO34.u_fifo_n_45 ,\BLK_FIFO34.u_fifo_n_46 ,fifo_rooms[0]}),
        .wr_en(fifo_wr_vld));
  FDCE #(
    .INIT(1'b0)) 
    \CID_reg[0] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[0]_i_1_n_0 ),
        .Q(\CID_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \CID_reg[1] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[1]_i_1_n_0 ),
        .Q(\CID_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \CID_reg[2] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[2]_i_1_n_0 ),
        .Q(\CID_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \CID_reg[3] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[3]_i_2_n_0 ),
        .Q(\CID_reg_n_0_[3] ));
  LUT6 #(
    .INIT(64'hBBBBBBBA8888888A)) 
    DMA_BUSY_i_1
       (.I0(DMA_BUSY9_out),
        .I1(DMA_BUSY_i_3_n_0),
        .I2(DMA_BUSY_i_4_n_0),
        .I3(state[0]),
        .I4(state[1]),
        .I5(DMA_BUSY),
        .O(DMA_BUSY_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    DMA_BUSY_i_10
       (.I0(fifo_rooms[1]),
        .I1(DMA_CHUNK[6]),
        .I2(fifo_rooms[0]),
        .I3(DMA_CHUNK[5]),
        .O(DMA_BUSY_i_10_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    DMA_BUSY_i_11
       (.I0(fifo_rooms[4]),
        .O(DMA_BUSY_i_11_n_0));
  LUT3 #(
    .INIT(8'h41)) 
    DMA_BUSY_i_12
       (.I0(fifo_rooms[3]),
        .I1(DMA_CHUNK[7]),
        .I2(fifo_rooms[2]),
        .O(DMA_BUSY_i_12_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    DMA_BUSY_i_13
       (.I0(DMA_CHUNK[6]),
        .I1(fifo_rooms[1]),
        .I2(DMA_CHUNK[5]),
        .I3(fifo_rooms[0]),
        .O(DMA_BUSY_i_13_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    DMA_BUSY_i_14
       (.I0(R_rem[13]),
        .I1(R_rem[12]),
        .I2(R_rem[15]),
        .I3(R_rem[14]),
        .O(DMA_BUSY_i_14_n_0));
  LUT6 #(
    .INIT(64'h00000000FFFF2000)) 
    DMA_BUSY_i_2
       (.I0(DMA_BUSY3),
        .I1(DMA_DONE),
        .I2(DMA_GO),
        .I3(DMA_BUSY_i_6_n_0),
        .I4(state[2]),
        .I5(DMA_BUSY_i_7_n_0),
        .O(DMA_BUSY9_out));
  LUT6 #(
    .INIT(64'h5575555555555555)) 
    DMA_BUSY_i_3
       (.I0(DMA_EN),
        .I1(\R_chunk[5]_i_3_n_0 ),
        .I2(DMA_BUSY3),
        .I3(DMA_DONE),
        .I4(DMA_GO),
        .I5(DMA_BUSY_i_6_n_0),
        .O(DMA_BUSY_i_3_n_0));
  LUT3 #(
    .INIT(8'hFD)) 
    DMA_BUSY_i_4
       (.I0(state[2]),
        .I1(R_done),
        .I2(DMA_BUSY_i_8_n_0),
        .O(DMA_BUSY_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFDF)) 
    DMA_BUSY_i_6
       (.I0(\R_chunk[6]_i_4_n_0 ),
        .I1(\R_chunk[6]_i_5_n_0 ),
        .I2(\R_chunk[6]_i_6_n_0 ),
        .I3(DMA_BNUM[3]),
        .I4(DMA_BNUM[2]),
        .I5(\R_chunk[6]_i_7_n_0 ),
        .O(DMA_BUSY_i_6_n_0));
  LUT3 #(
    .INIT(8'h5D)) 
    DMA_BUSY_i_7
       (.I0(DMA_EN),
        .I1(state[2]),
        .I2(R_done),
        .O(DMA_BUSY_i_7_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    DMA_BUSY_i_8
       (.I0(\R_len[0]_i_5_n_0 ),
        .I1(DMA_BUSY_i_14_n_0),
        .I2(\R_len[0]_i_4_n_0 ),
        .I3(R_rem[1]),
        .I4(R_rem[0]),
        .O(DMA_BUSY_i_8_n_0));
  LUT3 #(
    .INIT(8'hBA)) 
    DMA_BUSY_i_9
       (.I0(fifo_rooms[3]),
        .I1(DMA_CHUNK[7]),
        .I2(fifo_rooms[2]),
        .O(DMA_BUSY_i_9_n_0));
  FDCE #(
    .INIT(1'b0)) 
    DMA_BUSY_reg
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(DMA_BUSY_i_1_n_0),
        .Q(DMA_BUSY));
  CARRY4 DMA_BUSY_reg_i_5
       (.CI(1'b0),
        .CO({NLW_DMA_BUSY_reg_i_5_CO_UNCONNECTED[3],DMA_BUSY3,DMA_BUSY_reg_i_5_n_2,DMA_BUSY_reg_i_5_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,fifo_rooms[4],DMA_BUSY_i_9_n_0,DMA_BUSY_i_10_n_0}),
        .O(NLW_DMA_BUSY_reg_i_5_O_UNCONNECTED[3:0]),
        .S({1'b0,DMA_BUSY_i_11_n_0,DMA_BUSY_i_12_n_0,DMA_BUSY_i_13_n_0}));
  LUT6 #(
    .INIT(64'hF0F0F05020202000)) 
    DMA_DONE_i_1
       (.I0(DMA_DONE_i_2_n_0),
        .I1(DMA_BUSY_i_4_n_0),
        .I2(DMA_EN),
        .I3(state[2]),
        .I4(DMA_GO),
        .I5(DMA_DONE),
        .O(DMA_DONE_i_1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    DMA_DONE_i_2
       (.I0(state[0]),
        .I1(state[1]),
        .O(DMA_DONE_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    DMA_DONE_reg
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(DMA_DONE_i_1_n_0),
        .Q(DMA_DONE));
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[0]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[0]),
        .O(\M_ARADDR[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[10]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[10]),
        .O(\M_ARADDR[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[11]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[11]),
        .O(\M_ARADDR[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[12]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[12]),
        .O(\M_ARADDR[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[13]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[13]),
        .O(\M_ARADDR[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[14]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[14]),
        .O(\M_ARADDR[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[15]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[15]),
        .O(\M_ARADDR[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[16]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[16]),
        .O(\M_ARADDR[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[17]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[17]),
        .O(\M_ARADDR[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[18]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[18]),
        .O(\M_ARADDR[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[19]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[19]),
        .O(\M_ARADDR[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[1]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[1]),
        .O(\M_ARADDR[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[20]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[20]),
        .O(\M_ARADDR[20]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[21]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[21]),
        .O(\M_ARADDR[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[22]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[22]),
        .O(\M_ARADDR[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[23]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[23]),
        .O(\M_ARADDR[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[24]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[24]),
        .O(\M_ARADDR[24]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[25]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[25]),
        .O(\M_ARADDR[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[26]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[26]),
        .O(\M_ARADDR[26]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[27]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[27]),
        .O(\M_ARADDR[27]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[28]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[28]),
        .O(\M_ARADDR[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[29]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[29]),
        .O(\M_ARADDR[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[2]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[2]),
        .O(\M_ARADDR[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[30]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[30]),
        .O(\M_ARADDR[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[31]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[31]),
        .O(\M_ARADDR[31]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[3]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[3]),
        .O(\M_ARADDR[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[4]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[4]),
        .O(\M_ARADDR[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[5]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[5]),
        .O(\M_ARADDR[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[6]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[6]),
        .O(\M_ARADDR[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[7]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[7]),
        .O(\M_ARADDR[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[8]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[8]),
        .O(\M_ARADDR[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \M_ARADDR[9]_i_1 
       (.I0(DMA_EN),
        .I1(R_addr[9]),
        .O(\M_ARADDR[9]_i_1_n_0 ));
  FDCE \M_ARADDR_reg[0] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[0]_i_1_n_0 ),
        .Q(M_ARADDR[0]));
  FDCE \M_ARADDR_reg[10] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[10]_i_1_n_0 ),
        .Q(M_ARADDR[10]));
  FDCE \M_ARADDR_reg[11] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[11]_i_1_n_0 ),
        .Q(M_ARADDR[11]));
  FDCE \M_ARADDR_reg[12] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[12]_i_1_n_0 ),
        .Q(M_ARADDR[12]));
  FDCE \M_ARADDR_reg[13] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[13]_i_1_n_0 ),
        .Q(M_ARADDR[13]));
  FDCE \M_ARADDR_reg[14] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[14]_i_1_n_0 ),
        .Q(M_ARADDR[14]));
  FDCE \M_ARADDR_reg[15] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[15]_i_1_n_0 ),
        .Q(M_ARADDR[15]));
  FDCE \M_ARADDR_reg[16] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[16]_i_1_n_0 ),
        .Q(M_ARADDR[16]));
  FDCE \M_ARADDR_reg[17] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[17]_i_1_n_0 ),
        .Q(M_ARADDR[17]));
  FDCE \M_ARADDR_reg[18] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[18]_i_1_n_0 ),
        .Q(M_ARADDR[18]));
  FDCE \M_ARADDR_reg[19] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[19]_i_1_n_0 ),
        .Q(M_ARADDR[19]));
  FDCE \M_ARADDR_reg[1] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[1]_i_1_n_0 ),
        .Q(M_ARADDR[1]));
  FDCE \M_ARADDR_reg[20] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[20]_i_1_n_0 ),
        .Q(M_ARADDR[20]));
  FDCE \M_ARADDR_reg[21] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[21]_i_1_n_0 ),
        .Q(M_ARADDR[21]));
  FDCE \M_ARADDR_reg[22] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[22]_i_1_n_0 ),
        .Q(M_ARADDR[22]));
  FDCE \M_ARADDR_reg[23] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[23]_i_1_n_0 ),
        .Q(M_ARADDR[23]));
  FDCE \M_ARADDR_reg[24] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[24]_i_1_n_0 ),
        .Q(M_ARADDR[24]));
  FDCE \M_ARADDR_reg[25] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[25]_i_1_n_0 ),
        .Q(M_ARADDR[25]));
  FDCE \M_ARADDR_reg[26] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[26]_i_1_n_0 ),
        .Q(M_ARADDR[26]));
  FDCE \M_ARADDR_reg[27] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[27]_i_1_n_0 ),
        .Q(M_ARADDR[27]));
  FDCE \M_ARADDR_reg[28] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[28]_i_1_n_0 ),
        .Q(M_ARADDR[28]));
  FDCE \M_ARADDR_reg[29] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[29]_i_1_n_0 ),
        .Q(M_ARADDR[29]));
  FDCE \M_ARADDR_reg[2] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[2]_i_1_n_0 ),
        .Q(M_ARADDR[2]));
  FDCE \M_ARADDR_reg[30] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[30]_i_1_n_0 ),
        .Q(M_ARADDR[30]));
  FDCE \M_ARADDR_reg[31] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[31]_i_1_n_0 ),
        .Q(M_ARADDR[31]));
  FDCE \M_ARADDR_reg[3] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[3]_i_1_n_0 ),
        .Q(M_ARADDR[3]));
  FDCE \M_ARADDR_reg[4] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[4]_i_1_n_0 ),
        .Q(M_ARADDR[4]));
  FDCE \M_ARADDR_reg[5] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[5]_i_1_n_0 ),
        .Q(M_ARADDR[5]));
  FDCE \M_ARADDR_reg[6] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[6]_i_1_n_0 ),
        .Q(M_ARADDR[6]));
  FDCE \M_ARADDR_reg[7] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[7]_i_1_n_0 ),
        .Q(M_ARADDR[7]));
  FDCE \M_ARADDR_reg[8] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[8]_i_1_n_0 ),
        .Q(M_ARADDR[8]));
  FDCE \M_ARADDR_reg[9] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARADDR[9]_i_1_n_0 ),
        .Q(M_ARADDR[9]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \M_ARID[0]_i_1 
       (.I0(\CID_reg_n_0_[0] ),
        .I1(DMA_EN),
        .O(\M_ARID[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \M_ARID[1]_i_1 
       (.I0(\CID_reg_n_0_[1] ),
        .I1(\CID_reg_n_0_[0] ),
        .I2(DMA_EN),
        .O(\M_ARID[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \M_ARID[2]_i_1 
       (.I0(DMA_EN),
        .I1(\CID_reg_n_0_[2] ),
        .I2(\CID_reg_n_0_[1] ),
        .I3(\CID_reg_n_0_[0] ),
        .O(\M_ARID[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h04FF)) 
    \M_ARID[3]_i_1 
       (.I0(state_read[0]),
        .I1(R_go),
        .I2(state_read[1]),
        .I3(DMA_EN),
        .O(\M_ARID[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT5 #(
    .INIT(32'h2AAA8000)) 
    \M_ARID[3]_i_2 
       (.I0(DMA_EN),
        .I1(\CID_reg_n_0_[2] ),
        .I2(\CID_reg_n_0_[1] ),
        .I3(\CID_reg_n_0_[0] ),
        .I4(\CID_reg_n_0_[3] ),
        .O(\M_ARID[3]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \M_ARID[3]_i_3 
       (.I0(ARESETn),
        .O(\M_ARID[3]_i_3_n_0 ));
  FDCE \M_ARID_reg[0] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[0]_i_1_n_0 ),
        .Q(M_ARID[0]));
  FDCE \M_ARID_reg[1] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[1]_i_1_n_0 ),
        .Q(M_ARID[1]));
  FDCE \M_ARID_reg[2] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[2]_i_1_n_0 ),
        .Q(M_ARID[2]));
  FDCE \M_ARID_reg[3] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARID[3]_i_2_n_0 ),
        .Q(M_ARID[3]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \M_ARLEN[0]_i_1 
       (.I0(DMA_EN),
        .I1(\R_len_reg_n_0_[0] ),
        .O(\M_ARLEN[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT3 #(
    .INIT(8'h82)) 
    \M_ARLEN[1]_i_1 
       (.I0(DMA_EN),
        .I1(\R_len_reg_n_0_[1] ),
        .I2(\R_len_reg_n_0_[0] ),
        .O(\M_ARLEN[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h8882)) 
    \M_ARLEN[2]_i_1 
       (.I0(DMA_EN),
        .I1(\R_len_reg_n_0_[2] ),
        .I2(\R_len_reg_n_0_[1] ),
        .I3(\R_len_reg_n_0_[0] ),
        .O(\M_ARLEN[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT5 #(
    .INIT(32'hAAA80002)) 
    \M_ARLEN[3]_i_1 
       (.I0(DMA_EN),
        .I1(\R_len_reg_n_0_[2] ),
        .I2(\R_len_reg_n_0_[1] ),
        .I3(\R_len_reg_n_0_[0] ),
        .I4(\R_len_reg_n_0_[3] ),
        .O(\M_ARLEN[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000002)) 
    \M_ARLEN[4]_i_1 
       (.I0(DMA_EN),
        .I1(\R_len_reg_n_0_[3] ),
        .I2(\R_len_reg_n_0_[0] ),
        .I3(\R_len_reg_n_0_[1] ),
        .I4(\R_len_reg_n_0_[2] ),
        .I5(\R_len_reg_n_0_[4] ),
        .O(\M_ARLEN[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'h82)) 
    \M_ARLEN[5]_i_1 
       (.I0(DMA_EN),
        .I1(\M_ARLEN[5]_i_2_n_0 ),
        .I2(\R_len_reg_n_0_[5] ),
        .O(\M_ARLEN[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \M_ARLEN[5]_i_2 
       (.I0(\R_len_reg_n_0_[4] ),
        .I1(\R_len_reg_n_0_[2] ),
        .I2(\R_len_reg_n_0_[1] ),
        .I3(\R_len_reg_n_0_[0] ),
        .I4(\R_len_reg_n_0_[3] ),
        .O(\M_ARLEN[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \M_ARLEN[6]_i_1 
       (.I0(\M_ARLEN[7]_i_2_n_0 ),
        .I1(\R_len_reg_n_0_[6] ),
        .I2(DMA_EN),
        .O(\M_ARLEN[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'hD200)) 
    \M_ARLEN[7]_i_1 
       (.I0(\M_ARLEN[7]_i_2_n_0 ),
        .I1(\R_len_reg_n_0_[6] ),
        .I2(\R_len_reg_n_0_[7] ),
        .I3(DMA_EN),
        .O(\M_ARLEN[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \M_ARLEN[7]_i_2 
       (.I0(\R_len_reg_n_0_[5] ),
        .I1(\R_len_reg_n_0_[3] ),
        .I2(\R_len_reg_n_0_[0] ),
        .I3(\R_len_reg_n_0_[1] ),
        .I4(\R_len_reg_n_0_[2] ),
        .I5(\R_len_reg_n_0_[4] ),
        .O(\M_ARLEN[7]_i_2_n_0 ));
  FDCE \M_ARLEN_reg[0] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[0]_i_1_n_0 ),
        .Q(M_ARLEN[0]));
  FDCE \M_ARLEN_reg[1] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[1]_i_1_n_0 ),
        .Q(M_ARLEN[1]));
  FDCE \M_ARLEN_reg[2] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[2]_i_1_n_0 ),
        .Q(M_ARLEN[2]));
  FDCE \M_ARLEN_reg[3] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[3]_i_1_n_0 ),
        .Q(M_ARLEN[3]));
  FDCE \M_ARLEN_reg[4] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[4]_i_1_n_0 ),
        .Q(M_ARLEN[4]));
  FDCE \M_ARLEN_reg[5] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[5]_i_1_n_0 ),
        .Q(M_ARLEN[5]));
  FDCE \M_ARLEN_reg[6] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[6]_i_1_n_0 ),
        .Q(M_ARLEN[6]));
  FDCE \M_ARLEN_reg[7] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARLEN[7]_i_1_n_0 ),
        .Q(M_ARLEN[7]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \M_ARSIZE[1]_i_1 
       (.I0(R_size[2]),
        .I1(DMA_EN),
        .I2(R_size[0]),
        .O(\M_ARSIZE[1]_i_1_n_0 ));
  FDCE \M_ARSIZE_reg[1] 
       (.C(ACLK),
        .CE(\M_ARID[3]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\M_ARSIZE[1]_i_1_n_0 ),
        .Q(\^M_ARSIZE ));
  LUT6 #(
    .INIT(64'hAAAA2A2A00000A00)) 
    M_ARVALID_i_1
       (.I0(DMA_EN),
        .I1(M_ARREADY),
        .I2(state_read[0]),
        .I3(R_go),
        .I4(state_read[1]),
        .I5(M_ARVALID),
        .O(M_ARVALID_i_1_n_0));
  FDCE M_ARVALID_reg
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(M_ARVALID_i_1_n_0),
        .Q(M_ARVALID));
  LUT3 #(
    .INIT(8'h08)) 
    M_RREADY_INST_0
       (.I0(fifo_wr_rdy),
        .I1(state_read[1]),
        .I2(state_read[0]),
        .O(M_RREADY));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[0]_i_1 
       (.I0(DMA_SRC[0]),
        .I1(state[0]),
        .I2(\R_addr_reg[3]_i_2_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[10]_i_1 
       (.I0(DMA_SRC[10]),
        .I1(state[0]),
        .I2(\R_addr_reg[11]_i_2_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[11]_i_1 
       (.I0(DMA_SRC[11]),
        .I1(state[0]),
        .I2(\R_addr_reg[11]_i_2_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[11]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[11]_i_3 
       (.I0(R_addr[11]),
        .I1(\R_inc_reg_n_0_[11] ),
        .O(\R_addr[11]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[11]_i_4 
       (.I0(R_addr[10]),
        .I1(\R_inc_reg_n_0_[10] ),
        .O(\R_addr[11]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[11]_i_5 
       (.I0(R_addr[9]),
        .I1(\R_inc_reg_n_0_[9] ),
        .O(\R_addr[11]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[11]_i_6 
       (.I0(R_addr[8]),
        .I1(\R_inc_reg_n_0_[8] ),
        .O(\R_addr[11]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[12]_i_1 
       (.I0(DMA_SRC[12]),
        .I1(state[0]),
        .I2(\R_addr_reg[15]_i_2_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[13]_i_1 
       (.I0(DMA_SRC[13]),
        .I1(state[0]),
        .I2(\R_addr_reg[15]_i_2_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[14]_i_1 
       (.I0(DMA_SRC[14]),
        .I1(state[0]),
        .I2(\R_addr_reg[15]_i_2_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[15]_i_1 
       (.I0(DMA_SRC[15]),
        .I1(state[0]),
        .I2(\R_addr_reg[15]_i_2_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[15]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[15]_i_3 
       (.I0(R_addr[15]),
        .I1(\R_inc_reg_n_0_[15] ),
        .O(\R_addr[15]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[15]_i_4 
       (.I0(R_addr[14]),
        .I1(\R_inc_reg_n_0_[14] ),
        .O(\R_addr[15]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[15]_i_5 
       (.I0(R_addr[13]),
        .I1(\R_inc_reg_n_0_[13] ),
        .O(\R_addr[15]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[15]_i_6 
       (.I0(R_addr[12]),
        .I1(\R_inc_reg_n_0_[12] ),
        .O(\R_addr[15]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[16]_i_1 
       (.I0(DMA_SRC[16]),
        .I1(state[0]),
        .I2(\R_addr_reg[19]_i_2_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[17]_i_1 
       (.I0(DMA_SRC[17]),
        .I1(state[0]),
        .I2(\R_addr_reg[19]_i_2_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[18]_i_1 
       (.I0(DMA_SRC[18]),
        .I1(state[0]),
        .I2(\R_addr_reg[19]_i_2_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[19]_i_1 
       (.I0(DMA_SRC[19]),
        .I1(state[0]),
        .I2(\R_addr_reg[19]_i_2_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[1]_i_1 
       (.I0(DMA_SRC[1]),
        .I1(state[0]),
        .I2(\R_addr_reg[3]_i_2_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[20]_i_1 
       (.I0(DMA_SRC[20]),
        .I1(state[0]),
        .I2(\R_addr_reg[23]_i_2_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[21]_i_1 
       (.I0(DMA_SRC[21]),
        .I1(state[0]),
        .I2(\R_addr_reg[23]_i_2_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[22]_i_1 
       (.I0(DMA_SRC[22]),
        .I1(state[0]),
        .I2(\R_addr_reg[23]_i_2_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[23]_i_1 
       (.I0(DMA_SRC[23]),
        .I1(state[0]),
        .I2(\R_addr_reg[23]_i_2_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[24]_i_1 
       (.I0(DMA_SRC[24]),
        .I1(state[0]),
        .I2(\R_addr_reg[27]_i_2_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[25]_i_1 
       (.I0(DMA_SRC[25]),
        .I1(state[0]),
        .I2(\R_addr_reg[27]_i_2_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[26]_i_1 
       (.I0(DMA_SRC[26]),
        .I1(state[0]),
        .I2(\R_addr_reg[27]_i_2_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[27]_i_1 
       (.I0(DMA_SRC[27]),
        .I1(state[0]),
        .I2(\R_addr_reg[27]_i_2_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[28]_i_1 
       (.I0(DMA_SRC[28]),
        .I1(state[0]),
        .I2(\R_addr_reg[31]_i_3_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[29]_i_1 
       (.I0(DMA_SRC[29]),
        .I1(state[0]),
        .I2(\R_addr_reg[31]_i_3_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[2]_i_1 
       (.I0(DMA_SRC[2]),
        .I1(state[0]),
        .I2(\R_addr_reg[3]_i_2_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[30]_i_1 
       (.I0(DMA_SRC[30]),
        .I1(state[0]),
        .I2(\R_addr_reg[31]_i_3_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h33F3333333333377)) 
    \R_addr[31]_i_1 
       (.I0(\R_chunk[15]_i_2_n_0 ),
        .I1(DMA_EN),
        .I2(R_done),
        .I3(state[2]),
        .I4(state[1]),
        .I5(state[0]),
        .O(\R_addr[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[31]_i_2 
       (.I0(DMA_SRC[31]),
        .I1(state[0]),
        .I2(\R_addr_reg[31]_i_3_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[31]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[3]_i_1 
       (.I0(DMA_SRC[3]),
        .I1(state[0]),
        .I2(\R_addr_reg[3]_i_2_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[3]_i_3 
       (.I0(R_addr[3]),
        .I1(\R_inc_reg_n_0_[3] ),
        .O(\R_addr[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[3]_i_4 
       (.I0(R_addr[2]),
        .I1(\R_inc_reg_n_0_[2] ),
        .O(\R_addr[3]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[3]_i_5 
       (.I0(R_addr[1]),
        .I1(\R_inc_reg_n_0_[1] ),
        .O(\R_addr[3]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[3]_i_6 
       (.I0(R_addr[0]),
        .I1(\R_inc_reg_n_0_[0] ),
        .O(\R_addr[3]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[4]_i_1 
       (.I0(DMA_SRC[4]),
        .I1(state[0]),
        .I2(\R_addr_reg[7]_i_2_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[5]_i_1 
       (.I0(DMA_SRC[5]),
        .I1(state[0]),
        .I2(\R_addr_reg[7]_i_2_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[6]_i_1 
       (.I0(DMA_SRC[6]),
        .I1(state[0]),
        .I2(\R_addr_reg[7]_i_2_n_5 ),
        .I3(DMA_EN),
        .O(\R_addr[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[7]_i_1 
       (.I0(DMA_SRC[7]),
        .I1(state[0]),
        .I2(\R_addr_reg[7]_i_2_n_4 ),
        .I3(DMA_EN),
        .O(\R_addr[7]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[7]_i_3 
       (.I0(R_addr[7]),
        .I1(\R_inc_reg_n_0_[7] ),
        .O(\R_addr[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[7]_i_4 
       (.I0(R_addr[6]),
        .I1(\R_inc_reg_n_0_[6] ),
        .O(\R_addr[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[7]_i_5 
       (.I0(R_addr[5]),
        .I1(\R_inc_reg_n_0_[5] ),
        .O(\R_addr[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \R_addr[7]_i_6 
       (.I0(R_addr[4]),
        .I1(\R_inc_reg_n_0_[4] ),
        .O(\R_addr[7]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[8]_i_1 
       (.I0(DMA_SRC[8]),
        .I1(state[0]),
        .I2(\R_addr_reg[11]_i_2_n_7 ),
        .I3(DMA_EN),
        .O(\R_addr[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \R_addr[9]_i_1 
       (.I0(DMA_SRC[9]),
        .I1(state[0]),
        .I2(\R_addr_reg[11]_i_2_n_6 ),
        .I3(DMA_EN),
        .O(\R_addr[9]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[0] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[0]_i_1_n_0 ),
        .Q(R_addr[0]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[10] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[10]_i_1_n_0 ),
        .Q(R_addr[10]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[11] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[11]_i_1_n_0 ),
        .Q(R_addr[11]));
  CARRY4 \R_addr_reg[11]_i_2 
       (.CI(\R_addr_reg[7]_i_2_n_0 ),
        .CO({\R_addr_reg[11]_i_2_n_0 ,\R_addr_reg[11]_i_2_n_1 ,\R_addr_reg[11]_i_2_n_2 ,\R_addr_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(R_addr[11:8]),
        .O({\R_addr_reg[11]_i_2_n_4 ,\R_addr_reg[11]_i_2_n_5 ,\R_addr_reg[11]_i_2_n_6 ,\R_addr_reg[11]_i_2_n_7 }),
        .S({\R_addr[11]_i_3_n_0 ,\R_addr[11]_i_4_n_0 ,\R_addr[11]_i_5_n_0 ,\R_addr[11]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[12] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[12]_i_1_n_0 ),
        .Q(R_addr[12]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[13] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[13]_i_1_n_0 ),
        .Q(R_addr[13]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[14] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[14]_i_1_n_0 ),
        .Q(R_addr[14]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[15] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[15]_i_1_n_0 ),
        .Q(R_addr[15]));
  CARRY4 \R_addr_reg[15]_i_2 
       (.CI(\R_addr_reg[11]_i_2_n_0 ),
        .CO({\R_addr_reg[15]_i_2_n_0 ,\R_addr_reg[15]_i_2_n_1 ,\R_addr_reg[15]_i_2_n_2 ,\R_addr_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(R_addr[15:12]),
        .O({\R_addr_reg[15]_i_2_n_4 ,\R_addr_reg[15]_i_2_n_5 ,\R_addr_reg[15]_i_2_n_6 ,\R_addr_reg[15]_i_2_n_7 }),
        .S({\R_addr[15]_i_3_n_0 ,\R_addr[15]_i_4_n_0 ,\R_addr[15]_i_5_n_0 ,\R_addr[15]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[16] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[16]_i_1_n_0 ),
        .Q(R_addr[16]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[17] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[17]_i_1_n_0 ),
        .Q(R_addr[17]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[18] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[18]_i_1_n_0 ),
        .Q(R_addr[18]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[19] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[19]_i_1_n_0 ),
        .Q(R_addr[19]));
  CARRY4 \R_addr_reg[19]_i_2 
       (.CI(\R_addr_reg[15]_i_2_n_0 ),
        .CO({\R_addr_reg[19]_i_2_n_0 ,\R_addr_reg[19]_i_2_n_1 ,\R_addr_reg[19]_i_2_n_2 ,\R_addr_reg[19]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\R_addr_reg[19]_i_2_n_4 ,\R_addr_reg[19]_i_2_n_5 ,\R_addr_reg[19]_i_2_n_6 ,\R_addr_reg[19]_i_2_n_7 }),
        .S(R_addr[19:16]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[1] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[1]_i_1_n_0 ),
        .Q(R_addr[1]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[20] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[20]_i_1_n_0 ),
        .Q(R_addr[20]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[21] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[21]_i_1_n_0 ),
        .Q(R_addr[21]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[22] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[22]_i_1_n_0 ),
        .Q(R_addr[22]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[23] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[23]_i_1_n_0 ),
        .Q(R_addr[23]));
  CARRY4 \R_addr_reg[23]_i_2 
       (.CI(\R_addr_reg[19]_i_2_n_0 ),
        .CO({\R_addr_reg[23]_i_2_n_0 ,\R_addr_reg[23]_i_2_n_1 ,\R_addr_reg[23]_i_2_n_2 ,\R_addr_reg[23]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\R_addr_reg[23]_i_2_n_4 ,\R_addr_reg[23]_i_2_n_5 ,\R_addr_reg[23]_i_2_n_6 ,\R_addr_reg[23]_i_2_n_7 }),
        .S(R_addr[23:20]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[24] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[24]_i_1_n_0 ),
        .Q(R_addr[24]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[25] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[25]_i_1_n_0 ),
        .Q(R_addr[25]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[26] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[26]_i_1_n_0 ),
        .Q(R_addr[26]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[27] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[27]_i_1_n_0 ),
        .Q(R_addr[27]));
  CARRY4 \R_addr_reg[27]_i_2 
       (.CI(\R_addr_reg[23]_i_2_n_0 ),
        .CO({\R_addr_reg[27]_i_2_n_0 ,\R_addr_reg[27]_i_2_n_1 ,\R_addr_reg[27]_i_2_n_2 ,\R_addr_reg[27]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\R_addr_reg[27]_i_2_n_4 ,\R_addr_reg[27]_i_2_n_5 ,\R_addr_reg[27]_i_2_n_6 ,\R_addr_reg[27]_i_2_n_7 }),
        .S(R_addr[27:24]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[28] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[28]_i_1_n_0 ),
        .Q(R_addr[28]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[29] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[29]_i_1_n_0 ),
        .Q(R_addr[29]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[2] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[2]_i_1_n_0 ),
        .Q(R_addr[2]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[30] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[30]_i_1_n_0 ),
        .Q(R_addr[30]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[31] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[31]_i_2_n_0 ),
        .Q(R_addr[31]));
  CARRY4 \R_addr_reg[31]_i_3 
       (.CI(\R_addr_reg[27]_i_2_n_0 ),
        .CO({\NLW_R_addr_reg[31]_i_3_CO_UNCONNECTED [3],\R_addr_reg[31]_i_3_n_1 ,\R_addr_reg[31]_i_3_n_2 ,\R_addr_reg[31]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\R_addr_reg[31]_i_3_n_4 ,\R_addr_reg[31]_i_3_n_5 ,\R_addr_reg[31]_i_3_n_6 ,\R_addr_reg[31]_i_3_n_7 }),
        .S(R_addr[31:28]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[3] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[3]_i_1_n_0 ),
        .Q(R_addr[3]));
  CARRY4 \R_addr_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\R_addr_reg[3]_i_2_n_0 ,\R_addr_reg[3]_i_2_n_1 ,\R_addr_reg[3]_i_2_n_2 ,\R_addr_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(R_addr[3:0]),
        .O({\R_addr_reg[3]_i_2_n_4 ,\R_addr_reg[3]_i_2_n_5 ,\R_addr_reg[3]_i_2_n_6 ,\R_addr_reg[3]_i_2_n_7 }),
        .S({\R_addr[3]_i_3_n_0 ,\R_addr[3]_i_4_n_0 ,\R_addr[3]_i_5_n_0 ,\R_addr[3]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[4] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[4]_i_1_n_0 ),
        .Q(R_addr[4]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[5] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[5]_i_1_n_0 ),
        .Q(R_addr[5]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[6] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[6]_i_1_n_0 ),
        .Q(R_addr[6]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[7] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[7]_i_1_n_0 ),
        .Q(R_addr[7]));
  CARRY4 \R_addr_reg[7]_i_2 
       (.CI(\R_addr_reg[3]_i_2_n_0 ),
        .CO({\R_addr_reg[7]_i_2_n_0 ,\R_addr_reg[7]_i_2_n_1 ,\R_addr_reg[7]_i_2_n_2 ,\R_addr_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(R_addr[7:4]),
        .O({\R_addr_reg[7]_i_2_n_4 ,\R_addr_reg[7]_i_2_n_5 ,\R_addr_reg[7]_i_2_n_6 ,\R_addr_reg[7]_i_2_n_7 }),
        .S({\R_addr[7]_i_3_n_0 ,\R_addr[7]_i_4_n_0 ,\R_addr[7]_i_5_n_0 ,\R_addr[7]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[8] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[8]_i_1_n_0 ),
        .Q(R_addr[8]));
  FDCE #(
    .INIT(1'b0)) 
    \R_addr_reg[9] 
       (.C(ACLK),
        .CE(\R_addr[31]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_addr[9]_i_1_n_0 ),
        .Q(R_addr[9]));
  LUT6 #(
    .INIT(64'hAAAA0000B8880000)) 
    \R_chunk[0]_i_1 
       (.I0(R_chunk[0]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(DMA_BNUM[0]),
        .I3(\R_chunk[6]_i_3_n_0 ),
        .I4(DMA_EN),
        .I5(\R_chunk[5]_i_3_n_0 ),
        .O(\R_chunk[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[10]_i_1 
       (.I0(R_chunk[10]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[11]_i_1 
       (.I0(R_chunk[11]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[12]_i_1 
       (.I0(R_chunk[12]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[13]_i_1 
       (.I0(R_chunk[13]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[14]_i_1 
       (.I0(R_chunk[14]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[15]_i_1 
       (.I0(R_chunk[15]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hDFDFDFFF)) 
    \R_chunk[15]_i_2 
       (.I0(DMA_BUSY3),
        .I1(DMA_DONE),
        .I2(DMA_GO),
        .I3(\R_chunk[15]_i_3_n_0 ),
        .I4(\R_chunk[15]_i_4_n_0 ),
        .O(\R_chunk[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \R_chunk[15]_i_3 
       (.I0(\R_chunk[6]_i_7_n_0 ),
        .I1(DMA_BNUM[2]),
        .I2(DMA_BNUM[3]),
        .I3(DMA_BNUM[0]),
        .I4(DMA_BNUM[1]),
        .O(\R_chunk[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \R_chunk[15]_i_4 
       (.I0(DMA_BNUM[14]),
        .I1(DMA_BNUM[12]),
        .I2(DMA_BNUM[15]),
        .I3(DMA_BNUM[13]),
        .I4(\R_chunk[6]_i_4_n_0 ),
        .O(\R_chunk[15]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0F08000000080)) 
    \R_chunk[1]_i_1 
       (.I0(DMA_BNUM[1]),
        .I1(\R_chunk[6]_i_3_n_0 ),
        .I2(DMA_EN),
        .I3(\R_chunk[5]_i_3_n_0 ),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_chunk[1]),
        .O(\R_chunk[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF00F8000000F800)) 
    \R_chunk[2]_i_1 
       (.I0(\R_chunk[6]_i_3_n_0 ),
        .I1(DMA_BNUM[2]),
        .I2(\R_chunk[2]_i_2_n_0 ),
        .I3(DMA_EN),
        .I4(\R_chunk[6]_i_2_n_0 ),
        .I5(R_chunk[2]),
        .O(\R_chunk[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h01010100)) 
    \R_chunk[2]_i_2 
       (.I0(DMA_CHUNK[6]),
        .I1(DMA_CHUNK[7]),
        .I2(\R_chunk[6]_i_3_n_0 ),
        .I3(\R_chunk[2]_i_3_n_0 ),
        .I4(DMA_CHUNK[2]),
        .O(\R_chunk[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \R_chunk[2]_i_3 
       (.I0(DMA_CHUNK[3]),
        .I1(DMA_CHUNK[4]),
        .I2(DMA_CHUNK[5]),
        .O(\R_chunk[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAA00AA00AA003000)) 
    \R_chunk[3]_i_1 
       (.I0(R_chunk[3]),
        .I1(\R_chunk[5]_i_2_n_0 ),
        .I2(DMA_CHUNK[3]),
        .I3(DMA_EN),
        .I4(\R_chunk[5]_i_3_n_0 ),
        .I5(\R_chunk[15]_i_2_n_0 ),
        .O(\R_chunk[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0F02000000020)) 
    \R_chunk[4]_i_1 
       (.I0(DMA_CHUNK[4]),
        .I1(\R_chunk[5]_i_2_n_0 ),
        .I2(DMA_EN),
        .I3(\R_chunk[5]_i_3_n_0 ),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_chunk[4]),
        .O(\R_chunk[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0F02000000020)) 
    \R_chunk[5]_i_1 
       (.I0(DMA_CHUNK[5]),
        .I1(\R_chunk[5]_i_2_n_0 ),
        .I2(DMA_EN),
        .I3(\R_chunk[5]_i_3_n_0 ),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_chunk[5]),
        .O(\R_chunk[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \R_chunk[5]_i_2 
       (.I0(\R_chunk[6]_i_3_n_0 ),
        .I1(\R_chunk[5]_i_4_n_0 ),
        .O(\R_chunk[5]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \R_chunk[5]_i_3 
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[0]),
        .O(\R_chunk[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hEEEFBBBBEEEEEEEE)) 
    \R_chunk[5]_i_4 
       (.I0(DMA_CHUNK[7]),
        .I1(DMA_CHUNK[6]),
        .I2(DMA_CHUNK[0]),
        .I3(DMA_CHUNK[1]),
        .I4(DMA_CHUNK[2]),
        .I5(\R_chunk[2]_i_3_n_0 ),
        .O(\R_chunk[5]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h808080808C8C8C80)) 
    \R_chunk[6]_i_1 
       (.I0(R_chunk[6]),
        .I1(DMA_EN),
        .I2(\R_chunk[6]_i_2_n_0 ),
        .I3(DMA_CHUNK[7]),
        .I4(DMA_CHUNK[6]),
        .I5(\R_chunk[6]_i_3_n_0 ),
        .O(\R_chunk[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF1FFFFF)) 
    \R_chunk[6]_i_2 
       (.I0(\R_chunk[15]_i_4_n_0 ),
        .I1(\R_chunk[15]_i_3_n_0 ),
        .I2(DMA_GO),
        .I3(DMA_DONE),
        .I4(DMA_BUSY3),
        .I5(\R_chunk[5]_i_3_n_0 ),
        .O(\R_chunk[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000002000202)) 
    \R_chunk[6]_i_3 
       (.I0(\R_chunk[6]_i_4_n_0 ),
        .I1(\R_chunk[6]_i_5_n_0 ),
        .I2(DMA_BNUM[3]),
        .I3(\R_chunk[6]_i_6_n_0 ),
        .I4(DMA_BNUM[2]),
        .I5(\R_chunk[6]_i_7_n_0 ),
        .O(\R_chunk[6]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \R_chunk[6]_i_4 
       (.I0(DMA_BNUM[11]),
        .I1(DMA_BNUM[8]),
        .I2(DMA_BNUM[10]),
        .I3(DMA_BNUM[9]),
        .O(\R_chunk[6]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \R_chunk[6]_i_5 
       (.I0(DMA_BNUM[14]),
        .I1(DMA_BNUM[12]),
        .I2(DMA_BNUM[15]),
        .I3(DMA_BNUM[13]),
        .O(\R_chunk[6]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \R_chunk[6]_i_6 
       (.I0(DMA_BNUM[0]),
        .I1(DMA_BNUM[1]),
        .O(\R_chunk[6]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \R_chunk[6]_i_7 
       (.I0(DMA_BNUM[7]),
        .I1(DMA_BNUM[4]),
        .I2(DMA_BNUM[6]),
        .I3(DMA_BNUM[5]),
        .O(\R_chunk[6]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[7]_i_1 
       (.I0(R_chunk[7]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[8]_i_1 
       (.I0(R_chunk[8]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA800000000)) 
    \R_chunk[9]_i_1 
       (.I0(R_chunk[9]),
        .I1(\R_chunk[15]_i_2_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(DMA_EN),
        .O(\R_chunk[9]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[0]_i_1_n_0 ),
        .Q(R_chunk[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[10] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[10]_i_1_n_0 ),
        .Q(R_chunk[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[11] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[11]_i_1_n_0 ),
        .Q(R_chunk[11]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[12] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[12]_i_1_n_0 ),
        .Q(R_chunk[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[13] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[13]_i_1_n_0 ),
        .Q(R_chunk[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[14] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[14]_i_1_n_0 ),
        .Q(R_chunk[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[15] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[15]_i_1_n_0 ),
        .Q(R_chunk[15]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[1]_i_1_n_0 ),
        .Q(R_chunk[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[2] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[2]_i_1_n_0 ),
        .Q(R_chunk[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[3] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[3]_i_1_n_0 ),
        .Q(R_chunk[3]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[4] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[4]_i_1_n_0 ),
        .Q(R_chunk[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[5] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[5]_i_1_n_0 ),
        .Q(R_chunk[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[6] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[6]_i_1_n_0 ),
        .Q(R_chunk[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[7] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[7]_i_1_n_0 ),
        .Q(R_chunk[7]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[8] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[8]_i_1_n_0 ),
        .Q(R_chunk[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_chunk_reg[9] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_chunk[9]_i_1_n_0 ),
        .Q(R_chunk[9]));
  LUT3 #(
    .INIT(8'h2A)) 
    \R_cnt[0]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_cnt[0]),
        .O(\R_cnt[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h2800)) 
    \R_cnt[1]_i_1 
       (.I0(DMA_EN),
        .I1(R_cnt[0]),
        .I2(R_cnt[1]),
        .I3(state_read[1]),
        .O(\R_cnt[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h08808080)) 
    \R_cnt[2]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_cnt[2]),
        .I3(R_cnt[1]),
        .I4(R_cnt[0]),
        .O(\R_cnt[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0880808080808080)) 
    \R_cnt[3]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_cnt[3]),
        .I3(R_cnt[2]),
        .I4(R_cnt[0]),
        .I5(R_cnt[1]),
        .O(\R_cnt[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h8008)) 
    \R_cnt[4]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_cnt[4]),
        .I3(\R_cnt[4]_i_2_n_0 ),
        .O(\R_cnt[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h7FFF)) 
    \R_cnt[4]_i_2 
       (.I0(R_cnt[3]),
        .I1(R_cnt[1]),
        .I2(R_cnt[0]),
        .I3(R_cnt[2]),
        .O(\R_cnt[4]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h8008)) 
    \R_cnt[5]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_cnt[5]),
        .I3(\R_cnt[5]_i_2_n_0 ),
        .O(\R_cnt[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \R_cnt[5]_i_2 
       (.I0(R_cnt[3]),
        .I1(R_cnt[1]),
        .I2(R_cnt[0]),
        .I3(R_cnt[2]),
        .I4(R_cnt[4]),
        .O(\R_cnt[5]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h8008)) 
    \R_cnt[6]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_cnt[6]),
        .I3(\R_cnt[8]_i_4_n_0 ),
        .O(\R_cnt[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80088080)) 
    \R_cnt[7]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_cnt[7]),
        .I3(\R_cnt[8]_i_4_n_0 ),
        .I4(R_cnt[6]),
        .O(\R_cnt[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h55D5FFFF)) 
    \R_cnt[8]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[0]),
        .I2(M_ARREADY),
        .I3(state_read[1]),
        .I4(\R_cnt[8]_i_3_n_0 ),
        .O(\R_cnt[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8888288800000000)) 
    \R_cnt[8]_i_2 
       (.I0(DMA_EN),
        .I1(R_cnt[8]),
        .I2(R_cnt[7]),
        .I3(R_cnt[6]),
        .I4(\R_cnt[8]_i_4_n_0 ),
        .I5(state_read[1]),
        .O(\R_cnt[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF7FFFFFF)) 
    \R_cnt[8]_i_3 
       (.I0(fifo_wr_vld),
        .I1(fifo_wr_rdy),
        .I2(state_read[0]),
        .I3(state_read[1]),
        .I4(M_RVALID),
        .O(\R_cnt[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \R_cnt[8]_i_4 
       (.I0(R_cnt[4]),
        .I1(R_cnt[2]),
        .I2(R_cnt[0]),
        .I3(R_cnt[1]),
        .I4(R_cnt[3]),
        .I5(R_cnt[5]),
        .O(\R_cnt[8]_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[0] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[0]_i_1_n_0 ),
        .Q(R_cnt[0]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[1] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[1]_i_1_n_0 ),
        .Q(R_cnt[1]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[2] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[2]_i_1_n_0 ),
        .Q(R_cnt[2]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[3] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[3]_i_1_n_0 ),
        .Q(R_cnt[3]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[4] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[4]_i_1_n_0 ),
        .Q(R_cnt[4]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[5] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[5]_i_1_n_0 ),
        .Q(R_cnt[5]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[6] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[6]_i_1_n_0 ),
        .Q(R_cnt[6]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[7] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[7]_i_1_n_0 ),
        .Q(R_cnt[7]));
  FDCE #(
    .INIT(1'b0)) 
    \R_cnt_reg[8] 
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_cnt[8]_i_2_n_0 ),
        .Q(R_cnt[8]));
  LUT6 #(
    .INIT(64'hD000D0D0D0D0D0D0)) 
    R_done_i_1
       (.I0(R_done_i_2_n_0),
        .I1(R_done),
        .I2(DMA_EN),
        .I3(R_go),
        .I4(state_read[0]),
        .I5(state_read[1]),
        .O(R_done6_out));
  LUT4 #(
    .INIT(16'h22B2)) 
    R_done_i_10
       (.I0(R_cnt[1]),
        .I1(\R_len_reg_n_0_[1] ),
        .I2(R_cnt[0]),
        .I3(\R_len_reg_n_0_[0] ),
        .O(R_done_i_10_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    R_done_i_11
       (.I0(\R_len_reg_n_0_[7] ),
        .I1(R_cnt[7]),
        .I2(\R_len_reg_n_0_[6] ),
        .I3(R_cnt[6]),
        .O(R_done_i_11_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    R_done_i_12
       (.I0(\R_len_reg_n_0_[5] ),
        .I1(R_cnt[5]),
        .I2(\R_len_reg_n_0_[4] ),
        .I3(R_cnt[4]),
        .O(R_done_i_12_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    R_done_i_13
       (.I0(\R_len_reg_n_0_[3] ),
        .I1(R_cnt[3]),
        .I2(\R_len_reg_n_0_[2] ),
        .I3(R_cnt[2]),
        .O(R_done_i_13_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    R_done_i_14
       (.I0(\R_len_reg_n_0_[1] ),
        .I1(R_cnt[1]),
        .I2(\R_len_reg_n_0_[0] ),
        .I3(R_cnt[0]),
        .O(R_done_i_14_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    R_done_i_2
       (.I0(M_RVALID),
        .I1(state_read[1]),
        .I2(state_read[0]),
        .I3(fifo_wr_rdy),
        .I4(fifo_wr_vld),
        .I5(R_done_reg_i_3_n_3),
        .O(R_done_i_2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    R_done_i_5
       (.I0(R_cnt[8]),
        .I1(\R_len_reg_n_0_[8] ),
        .O(R_done_i_5_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    R_done_i_6
       (.I0(\R_len_reg_n_0_[8] ),
        .I1(R_cnt[8]),
        .O(R_done_i_6_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    R_done_i_7
       (.I0(R_cnt[7]),
        .I1(\R_len_reg_n_0_[7] ),
        .I2(R_cnt[6]),
        .I3(\R_len_reg_n_0_[6] ),
        .O(R_done_i_7_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    R_done_i_8
       (.I0(R_cnt[5]),
        .I1(\R_len_reg_n_0_[5] ),
        .I2(R_cnt[4]),
        .I3(\R_len_reg_n_0_[4] ),
        .O(R_done_i_8_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    R_done_i_9
       (.I0(R_cnt[3]),
        .I1(\R_len_reg_n_0_[3] ),
        .I2(R_cnt[2]),
        .I3(\R_len_reg_n_0_[2] ),
        .O(R_done_i_9_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    R_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(R_done6_out),
        .Q(R_done));
  CARRY4 R_done_reg_i_3
       (.CI(R_done_reg_i_4_n_0),
        .CO({NLW_R_done_reg_i_3_CO_UNCONNECTED[3:1],R_done_reg_i_3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,R_done_i_5_n_0}),
        .O(NLW_R_done_reg_i_3_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,1'b0,R_done_i_6_n_0}));
  CARRY4 R_done_reg_i_4
       (.CI(1'b0),
        .CO({R_done_reg_i_4_n_0,R_done_reg_i_4_n_1,R_done_reg_i_4_n_2,R_done_reg_i_4_n_3}),
        .CYINIT(1'b1),
        .DI({R_done_i_7_n_0,R_done_i_8_n_0,R_done_i_9_n_0,R_done_i_10_n_0}),
        .O(NLW_R_done_reg_i_4_O_UNCONNECTED[3:0]),
        .S({R_done_i_11_n_0,R_done_i_12_n_0,R_done_i_13_n_0,R_done_i_14_n_0}));
  LUT3 #(
    .INIT(8'h08)) 
    R_first_i_1
       (.I0(DMA_EN),
        .I1(M_ARREADY),
        .I2(state_read[1]),
        .O(R_first10_out));
  FDCE #(
    .INIT(1'b0)) 
    R_first_reg
       (.C(ACLK),
        .CE(\R_cnt[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(R_first10_out),
        .Q(R_first_reg_n_0));
  LUT6 #(
    .INIT(64'h88AAA8A888888888)) 
    R_go_i_1
       (.I0(DMA_EN),
        .I1(R_go_i_2_n_0),
        .I2(\R_chunk[15]_i_2_n_0 ),
        .I3(R_done),
        .I4(state[1]),
        .I5(R_go),
        .O(R_go1_out));
  LUT4 #(
    .INIT(16'h8BB8)) 
    R_go_i_2
       (.I0(R_go),
        .I1(state[2]),
        .I2(state[0]),
        .I3(state[1]),
        .O(R_go_i_2_n_0));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    R_go_reg
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(R_go1_out),
        .Q(R_go));
  LUT6 #(
    .INIT(64'hF0F01010F0001010)) 
    \R_inc[0]_i_1 
       (.I0(\R_len_reg[8]_i_3_n_0 ),
        .I1(\R_len[0]_i_2_n_0 ),
        .I2(DMA_EN),
        .I3(\R_inc_reg[2]_i_2_n_0 ),
        .I4(state[0]),
        .I5(R_addr[0]),
        .O(\R_inc[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_inc[11]_i_1 
       (.I0(R_rem[11]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[11]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_inc[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_inc[12]_i_1 
       (.I0(R_rem[12]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[12]),
        .I3(DMA_EN),
        .I4(state[1]),
        .O(\R_inc[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_inc[13]_i_1 
       (.I0(R_rem[13]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[13]),
        .I3(DMA_EN),
        .I4(state[1]),
        .O(\R_inc[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_inc[14]_i_1 
       (.I0(R_rem[14]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[14]),
        .I3(DMA_EN),
        .I4(state[1]),
        .O(\R_inc[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h14FF)) 
    \R_inc[15]_i_1 
       (.I0(state[2]),
        .I1(state[0]),
        .I2(state[1]),
        .I3(DMA_EN),
        .O(\R_inc[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_inc[15]_i_2 
       (.I0(R_rem[15]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[15]),
        .I3(DMA_EN),
        .I4(state[1]),
        .O(\R_inc[15]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000600)) 
    \R_inc[1]_i_1 
       (.I0(R_addr[1]),
        .I1(R_addr[0]),
        .I2(state[1]),
        .I3(DMA_EN),
        .I4(\R_inc_reg[2]_i_2_n_0 ),
        .O(\R_inc[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h01FF010000000000)) 
    \R_inc[2]_i_1 
       (.I0(R_addr[1]),
        .I1(R_addr[0]),
        .I2(\R_inc_reg[2]_i_2_n_0 ),
        .I3(state[0]),
        .I4(\R_inc[2]_i_3_n_0 ),
        .I5(DMA_EN),
        .O(\R_inc[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h1474)) 
    \R_inc[2]_i_10 
       (.I0(R_rem[1]),
        .I1(R_addr[1]),
        .I2(R_addr[0]),
        .I3(R_rem[0]),
        .O(\R_inc[2]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \R_inc[2]_i_11 
       (.I0(R_rem[7]),
        .I1(R_rem[6]),
        .O(\R_inc[2]_i_11_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \R_inc[2]_i_12 
       (.I0(R_rem[5]),
        .I1(R_rem[4]),
        .O(\R_inc[2]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h0154)) 
    \R_inc[2]_i_13 
       (.I0(R_rem[3]),
        .I1(R_addr[0]),
        .I2(R_addr[1]),
        .I3(R_rem[2]),
        .O(\R_inc[2]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'h6009)) 
    \R_inc[2]_i_14 
       (.I0(R_addr[1]),
        .I1(R_rem[1]),
        .I2(R_addr[0]),
        .I3(R_rem[0]),
        .O(\R_inc[2]_i_14_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \R_inc[2]_i_3 
       (.I0(R_chunk[2]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_rem[2]),
        .O(\R_inc[2]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \R_inc[2]_i_5 
       (.I0(R_rem[15]),
        .I1(R_rem[14]),
        .O(\R_inc[2]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \R_inc[2]_i_6 
       (.I0(R_rem[13]),
        .I1(R_rem[12]),
        .O(\R_inc[2]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \R_inc[2]_i_7 
       (.I0(R_rem[11]),
        .I1(R_rem[10]),
        .O(\R_inc[2]_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \R_inc[2]_i_8 
       (.I0(R_rem[9]),
        .I1(R_rem[8]),
        .O(\R_inc[2]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \R_inc[2]_i_9 
       (.I0(R_addr[1]),
        .I1(R_addr[0]),
        .I2(R_rem[3]),
        .I3(R_rem[2]),
        .O(\R_inc[2]_i_9_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[0] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[0]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[10] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[8]_i_2_n_0 ),
        .Q(\R_inc_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[11] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[11]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[12] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[12]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[13] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[13]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[14] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[14]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[15] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[15]_i_2_n_0 ),
        .Q(\R_inc_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[1] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[1]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[2] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_inc[2]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[2] ));
  CARRY4 \R_inc_reg[2]_i_2 
       (.CI(\R_inc_reg[2]_i_4_n_0 ),
        .CO({\R_inc_reg[2]_i_2_n_0 ,\R_inc_reg[2]_i_2_n_1 ,\R_inc_reg[2]_i_2_n_2 ,\R_inc_reg[2]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_R_inc_reg[2]_i_2_O_UNCONNECTED [3:0]),
        .S({\R_inc[2]_i_5_n_0 ,\R_inc[2]_i_6_n_0 ,\R_inc[2]_i_7_n_0 ,\R_inc[2]_i_8_n_0 }));
  CARRY4 \R_inc_reg[2]_i_4 
       (.CI(1'b0),
        .CO({\R_inc_reg[2]_i_4_n_0 ,\R_inc_reg[2]_i_4_n_1 ,\R_inc_reg[2]_i_4_n_2 ,\R_inc_reg[2]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,\R_inc[2]_i_9_n_0 ,\R_inc[2]_i_10_n_0 }),
        .O(\NLW_R_inc_reg[2]_i_4_O_UNCONNECTED [3:0]),
        .S({\R_inc[2]_i_11_n_0 ,\R_inc[2]_i_12_n_0 ,\R_inc[2]_i_13_n_0 ,\R_inc[2]_i_14_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[3] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[1]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[4] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[2]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[5] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[3]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[6] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[4]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[7] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[5]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[8] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[6]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_inc_reg[9] 
       (.C(ACLK),
        .CE(\R_inc[15]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[7]_i_1_n_0 ),
        .Q(\R_inc_reg_n_0_[9] ));
  LUT6 #(
    .INIT(64'hF0F0F050F0B0F010)) 
    \R_len[0]_i_1 
       (.I0(\R_len_reg[8]_i_3_n_0 ),
        .I1(\R_len[0]_i_2_n_0 ),
        .I2(\R_len[0]_i_3_n_0 ),
        .I3(state[0]),
        .I4(R_chunk[2]),
        .I5(R_rem[2]),
        .O(\R_len[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \R_len[0]_i_2 
       (.I0(\R_len[0]_i_4_n_0 ),
        .I1(R_rem[13]),
        .I2(R_rem[12]),
        .I3(R_rem[15]),
        .I4(R_rem[14]),
        .I5(\R_len[0]_i_5_n_0 ),
        .O(\R_len[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hA8)) 
    \R_len[0]_i_3 
       (.I0(DMA_EN),
        .I1(state[1]),
        .I2(state[0]),
        .O(\R_len[0]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \R_len[0]_i_4 
       (.I0(R_rem[9]),
        .I1(R_rem[8]),
        .I2(R_rem[11]),
        .I3(R_rem[10]),
        .O(\R_len[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \R_len[0]_i_5 
       (.I0(R_rem[3]),
        .I1(R_rem[2]),
        .I2(R_rem[6]),
        .I3(R_rem[7]),
        .I4(R_rem[4]),
        .I5(R_rem[5]),
        .O(\R_len[0]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[1]_i_1 
       (.I0(R_rem[3]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[3]),
        .I3(DMA_EN),
        .I4(state[1]),
        .O(\R_len[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[2]_i_1 
       (.I0(R_rem[4]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[4]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_len[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[3]_i_1 
       (.I0(R_rem[5]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[5]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_len[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[4]_i_1 
       (.I0(R_rem[6]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[6]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_len[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[5]_i_1 
       (.I0(R_rem[7]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[7]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_len[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[6]_i_1 
       (.I0(R_rem[8]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[8]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_len[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[7]_i_1 
       (.I0(R_rem[9]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[9]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_len[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h1415FFFF)) 
    \R_len[8]_i_1 
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[0]),
        .I3(\R_chunk[15]_i_2_n_0 ),
        .I4(DMA_EN),
        .O(\R_len[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_10 
       (.I0(R_chunk[13]),
        .I1(R_rem[13]),
        .I2(R_chunk[12]),
        .I3(R_rem[12]),
        .O(\R_len[8]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_11 
       (.I0(R_chunk[11]),
        .I1(R_rem[11]),
        .I2(R_chunk[10]),
        .I3(R_rem[10]),
        .O(\R_len[8]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_12 
       (.I0(R_chunk[9]),
        .I1(R_rem[9]),
        .I2(R_chunk[8]),
        .I3(R_rem[8]),
        .O(\R_len[8]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_13 
       (.I0(R_rem[7]),
        .I1(R_chunk[7]),
        .I2(R_rem[6]),
        .I3(R_chunk[6]),
        .O(\R_len[8]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_14 
       (.I0(R_rem[5]),
        .I1(R_chunk[5]),
        .I2(R_rem[4]),
        .I3(R_chunk[4]),
        .O(\R_len[8]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_15 
       (.I0(R_rem[3]),
        .I1(R_chunk[3]),
        .I2(R_rem[2]),
        .I3(R_chunk[2]),
        .O(\R_len[8]_i_15_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_16 
       (.I0(R_rem[1]),
        .I1(R_chunk[1]),
        .I2(R_rem[0]),
        .I3(R_chunk[0]),
        .O(\R_len[8]_i_16_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_17 
       (.I0(R_chunk[7]),
        .I1(R_rem[7]),
        .I2(R_chunk[6]),
        .I3(R_rem[6]),
        .O(\R_len[8]_i_17_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_18 
       (.I0(R_chunk[5]),
        .I1(R_rem[5]),
        .I2(R_chunk[4]),
        .I3(R_rem[4]),
        .O(\R_len[8]_i_18_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_19 
       (.I0(R_chunk[3]),
        .I1(R_rem[3]),
        .I2(R_chunk[2]),
        .I3(R_rem[2]),
        .O(\R_len[8]_i_19_n_0 ));
  LUT5 #(
    .INIT(32'hE2000000)) 
    \R_len[8]_i_2 
       (.I0(R_rem[10]),
        .I1(\R_len_reg[8]_i_3_n_0 ),
        .I2(R_chunk[10]),
        .I3(state[1]),
        .I4(DMA_EN),
        .O(\R_len[8]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_20 
       (.I0(R_chunk[1]),
        .I1(R_rem[1]),
        .I2(R_chunk[0]),
        .I3(R_rem[0]),
        .O(\R_len[8]_i_20_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_5 
       (.I0(R_rem[15]),
        .I1(R_chunk[15]),
        .I2(R_rem[14]),
        .I3(R_chunk[14]),
        .O(\R_len[8]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_6 
       (.I0(R_rem[13]),
        .I1(R_chunk[13]),
        .I2(R_rem[12]),
        .I3(R_chunk[12]),
        .O(\R_len[8]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_7 
       (.I0(R_rem[11]),
        .I1(R_chunk[11]),
        .I2(R_rem[10]),
        .I3(R_chunk[10]),
        .O(\R_len[8]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h22B2)) 
    \R_len[8]_i_8 
       (.I0(R_rem[9]),
        .I1(R_chunk[9]),
        .I2(R_rem[8]),
        .I3(R_chunk[8]),
        .O(\R_len[8]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \R_len[8]_i_9 
       (.I0(R_chunk[15]),
        .I1(R_rem[15]),
        .I2(R_chunk[14]),
        .I3(R_rem[14]),
        .O(\R_len[8]_i_9_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[0] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[0]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[1] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[1]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[2] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[2]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[3] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[3]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[4] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[4]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[5] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[5]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[6] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[6]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[7] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[7]_i_1_n_0 ),
        .Q(\R_len_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \R_len_reg[8] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_len[8]_i_2_n_0 ),
        .Q(\R_len_reg_n_0_[8] ));
  CARRY4 \R_len_reg[8]_i_3 
       (.CI(\R_len_reg[8]_i_4_n_0 ),
        .CO({\R_len_reg[8]_i_3_n_0 ,\R_len_reg[8]_i_3_n_1 ,\R_len_reg[8]_i_3_n_2 ,\R_len_reg[8]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({\R_len[8]_i_5_n_0 ,\R_len[8]_i_6_n_0 ,\R_len[8]_i_7_n_0 ,\R_len[8]_i_8_n_0 }),
        .O(\NLW_R_len_reg[8]_i_3_O_UNCONNECTED [3:0]),
        .S({\R_len[8]_i_9_n_0 ,\R_len[8]_i_10_n_0 ,\R_len[8]_i_11_n_0 ,\R_len[8]_i_12_n_0 }));
  CARRY4 \R_len_reg[8]_i_4 
       (.CI(1'b0),
        .CO({\R_len_reg[8]_i_4_n_0 ,\R_len_reg[8]_i_4_n_1 ,\R_len_reg[8]_i_4_n_2 ,\R_len_reg[8]_i_4_n_3 }),
        .CYINIT(1'b1),
        .DI({\R_len[8]_i_13_n_0 ,\R_len[8]_i_14_n_0 ,\R_len[8]_i_15_n_0 ,\R_len[8]_i_16_n_0 }),
        .O(\NLW_R_len_reg[8]_i_4_O_UNCONNECTED [3:0]),
        .S({\R_len[8]_i_17_n_0 ,\R_len[8]_i_18_n_0 ,\R_len[8]_i_19_n_0 ,\R_len[8]_i_20_n_0 }));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[0]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[0]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[0]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[0]),
        .O(\R_rem[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hBAA88AA8)) 
    \R_rem[0]_i_2 
       (.I0(R_rem[0]),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\R_rem_reg[3]_i_3_n_7 ),
        .O(\R_rem[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[10]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[10]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[10]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[10]),
        .O(\R_rem[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[10]_i_2 
       (.I0(\R_rem_reg[11]_i_3_n_5 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[10]),
        .O(\R_rem[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[11]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[11]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[11]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[11]),
        .O(\R_rem[11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[11]_i_2 
       (.I0(\R_rem_reg[11]_i_3_n_4 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[11]),
        .O(\R_rem[11]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[11]_i_4 
       (.I0(R_rem[11]),
        .I1(\R_inc_reg_n_0_[11] ),
        .I2(R_done),
        .O(\R_rem[11]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[11]_i_5 
       (.I0(R_rem[10]),
        .I1(\R_inc_reg_n_0_[10] ),
        .I2(R_done),
        .O(\R_rem[11]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[11]_i_6 
       (.I0(R_rem[9]),
        .I1(\R_inc_reg_n_0_[9] ),
        .I2(R_done),
        .O(\R_rem[11]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[11]_i_7 
       (.I0(R_rem[8]),
        .I1(\R_inc_reg_n_0_[8] ),
        .I2(R_done),
        .O(\R_rem[11]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[12]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[12]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[12]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[12]),
        .O(\R_rem[12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[12]_i_2 
       (.I0(\R_rem_reg[15]_i_3_n_7 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[12]),
        .O(\R_rem[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[13]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[13]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[13]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[13]),
        .O(\R_rem[13]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[13]_i_2 
       (.I0(\R_rem_reg[15]_i_3_n_6 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[13]),
        .O(\R_rem[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[14]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[14]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[14]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[14]),
        .O(\R_rem[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[14]_i_2 
       (.I0(\R_rem_reg[15]_i_3_n_5 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[14]),
        .O(\R_rem[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[15]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[15]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[15]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[15]),
        .O(\R_rem[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[15]_i_2 
       (.I0(\R_rem_reg[15]_i_3_n_4 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[15]),
        .O(\R_rem[15]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[15]_i_4 
       (.I0(R_rem[15]),
        .I1(\R_inc_reg_n_0_[15] ),
        .I2(R_done),
        .O(\R_rem[15]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[15]_i_5 
       (.I0(R_rem[14]),
        .I1(\R_inc_reg_n_0_[14] ),
        .I2(R_done),
        .O(\R_rem[15]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[15]_i_6 
       (.I0(R_rem[13]),
        .I1(\R_inc_reg_n_0_[13] ),
        .I2(R_done),
        .O(\R_rem[15]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[15]_i_7 
       (.I0(R_rem[12]),
        .I1(\R_inc_reg_n_0_[12] ),
        .I2(R_done),
        .O(\R_rem[15]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[1]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[1]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[1]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[1]),
        .O(\R_rem[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[1]_i_2 
       (.I0(\R_rem_reg[3]_i_3_n_6 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[1]),
        .O(\R_rem[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[2]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[2]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[2]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[2]),
        .O(\R_rem[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[2]_i_2 
       (.I0(\R_rem_reg[3]_i_3_n_5 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[2]),
        .O(\R_rem[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[3]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[3]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[3]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[3]),
        .O(\R_rem[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[3]_i_2 
       (.I0(\R_rem_reg[3]_i_3_n_4 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[3]),
        .O(\R_rem[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[3]_i_4 
       (.I0(R_rem[3]),
        .I1(\R_inc_reg_n_0_[3] ),
        .I2(R_done),
        .O(\R_rem[3]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[3]_i_5 
       (.I0(R_rem[2]),
        .I1(\R_inc_reg_n_0_[2] ),
        .I2(R_done),
        .O(\R_rem[3]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[3]_i_6 
       (.I0(R_rem[1]),
        .I1(\R_inc_reg_n_0_[1] ),
        .I2(R_done),
        .O(\R_rem[3]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[3]_i_7 
       (.I0(R_rem[0]),
        .I1(\R_inc_reg_n_0_[0] ),
        .I2(R_done),
        .O(\R_rem[3]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[4]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[4]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[4]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[4]),
        .O(\R_rem[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[4]_i_2 
       (.I0(\R_rem_reg[7]_i_3_n_7 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[4]),
        .O(\R_rem[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[5]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[5]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[5]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[5]),
        .O(\R_rem[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[5]_i_2 
       (.I0(\R_rem_reg[7]_i_3_n_6 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[5]),
        .O(\R_rem[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[6]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[6]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[6]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[6]),
        .O(\R_rem[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[6]_i_2 
       (.I0(\R_rem_reg[7]_i_3_n_5 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[6]),
        .O(\R_rem[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[7]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[7]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[7]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[7]),
        .O(\R_rem[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[7]_i_2 
       (.I0(\R_rem_reg[7]_i_3_n_4 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[7]),
        .O(\R_rem[7]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[7]_i_4 
       (.I0(R_rem[7]),
        .I1(\R_inc_reg_n_0_[7] ),
        .I2(R_done),
        .O(\R_rem[7]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[7]_i_5 
       (.I0(R_rem[6]),
        .I1(\R_inc_reg_n_0_[6] ),
        .I2(R_done),
        .O(\R_rem[7]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[7]_i_6 
       (.I0(R_rem[5]),
        .I1(\R_inc_reg_n_0_[5] ),
        .I2(R_done),
        .O(\R_rem[7]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \R_rem[7]_i_7 
       (.I0(R_rem[4]),
        .I1(\R_inc_reg_n_0_[4] ),
        .I2(R_done),
        .O(\R_rem[7]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[8]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[8]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[8]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[8]),
        .O(\R_rem[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[8]_i_2 
       (.I0(\R_rem_reg[11]_i_3_n_7 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[8]),
        .O(\R_rem[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8888888A88)) 
    \R_rem[9]_i_1 
       (.I0(DMA_EN),
        .I1(\R_rem[9]_i_2_n_0 ),
        .I2(\R_chunk[5]_i_3_n_0 ),
        .I3(DMA_BNUM[9]),
        .I4(\R_chunk[15]_i_2_n_0 ),
        .I5(R_rem[9]),
        .O(\R_rem[9]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hEFFC2000)) 
    \R_rem[9]_i_2 
       (.I0(\R_rem_reg[11]_i_3_n_6 ),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(R_rem[9]),
        .O(\R_rem[9]_i_2_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[0]_i_1_n_0 ),
        .Q(R_rem[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[10] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[10]_i_1_n_0 ),
        .Q(R_rem[10]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[11] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[11]_i_1_n_0 ),
        .Q(R_rem[11]));
  CARRY4 \R_rem_reg[11]_i_3 
       (.CI(\R_rem_reg[7]_i_3_n_0 ),
        .CO({\R_rem_reg[11]_i_3_n_0 ,\R_rem_reg[11]_i_3_n_1 ,\R_rem_reg[11]_i_3_n_2 ,\R_rem_reg[11]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI(R_rem[11:8]),
        .O({\R_rem_reg[11]_i_3_n_4 ,\R_rem_reg[11]_i_3_n_5 ,\R_rem_reg[11]_i_3_n_6 ,\R_rem_reg[11]_i_3_n_7 }),
        .S({\R_rem[11]_i_4_n_0 ,\R_rem[11]_i_5_n_0 ,\R_rem[11]_i_6_n_0 ,\R_rem[11]_i_7_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[12] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[12]_i_1_n_0 ),
        .Q(R_rem[12]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[13] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[13]_i_1_n_0 ),
        .Q(R_rem[13]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[14] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[14]_i_1_n_0 ),
        .Q(R_rem[14]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[15] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[15]_i_1_n_0 ),
        .Q(R_rem[15]));
  CARRY4 \R_rem_reg[15]_i_3 
       (.CI(\R_rem_reg[11]_i_3_n_0 ),
        .CO({\NLW_R_rem_reg[15]_i_3_CO_UNCONNECTED [3],\R_rem_reg[15]_i_3_n_1 ,\R_rem_reg[15]_i_3_n_2 ,\R_rem_reg[15]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,R_rem[14:12]}),
        .O({\R_rem_reg[15]_i_3_n_4 ,\R_rem_reg[15]_i_3_n_5 ,\R_rem_reg[15]_i_3_n_6 ,\R_rem_reg[15]_i_3_n_7 }),
        .S({\R_rem[15]_i_4_n_0 ,\R_rem[15]_i_5_n_0 ,\R_rem[15]_i_6_n_0 ,\R_rem[15]_i_7_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[1]_i_1_n_0 ),
        .Q(R_rem[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[2] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[2]_i_1_n_0 ),
        .Q(R_rem[2]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[3] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[3]_i_1_n_0 ),
        .Q(R_rem[3]));
  CARRY4 \R_rem_reg[3]_i_3 
       (.CI(1'b0),
        .CO({\R_rem_reg[3]_i_3_n_0 ,\R_rem_reg[3]_i_3_n_1 ,\R_rem_reg[3]_i_3_n_2 ,\R_rem_reg[3]_i_3_n_3 }),
        .CYINIT(R_done),
        .DI(R_rem[3:0]),
        .O({\R_rem_reg[3]_i_3_n_4 ,\R_rem_reg[3]_i_3_n_5 ,\R_rem_reg[3]_i_3_n_6 ,\R_rem_reg[3]_i_3_n_7 }),
        .S({\R_rem[3]_i_4_n_0 ,\R_rem[3]_i_5_n_0 ,\R_rem[3]_i_6_n_0 ,\R_rem[3]_i_7_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[4] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[4]_i_1_n_0 ),
        .Q(R_rem[4]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[5] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[5]_i_1_n_0 ),
        .Q(R_rem[5]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[6] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[6]_i_1_n_0 ),
        .Q(R_rem[6]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[7] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[7]_i_1_n_0 ),
        .Q(R_rem[7]));
  CARRY4 \R_rem_reg[7]_i_3 
       (.CI(\R_rem_reg[3]_i_3_n_0 ),
        .CO({\R_rem_reg[7]_i_3_n_0 ,\R_rem_reg[7]_i_3_n_1 ,\R_rem_reg[7]_i_3_n_2 ,\R_rem_reg[7]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI(R_rem[7:4]),
        .O({\R_rem_reg[7]_i_3_n_4 ,\R_rem_reg[7]_i_3_n_5 ,\R_rem_reg[7]_i_3_n_6 ,\R_rem_reg[7]_i_3_n_7 }),
        .S({\R_rem[7]_i_4_n_0 ,\R_rem[7]_i_5_n_0 ,\R_rem[7]_i_6_n_0 ,\R_rem[7]_i_7_n_0 }));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[8] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[8]_i_1_n_0 ),
        .Q(R_rem[8]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \R_rem_reg[9] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_rem[9]_i_1_n_0 ),
        .Q(R_rem[9]));
  LUT6 #(
    .INIT(64'hFF00100010001000)) 
    \R_size[0]_i_1 
       (.I0(\R_len_reg[8]_i_3_n_0 ),
        .I1(\R_len[0]_i_2_n_0 ),
        .I2(state[1]),
        .I3(DMA_EN),
        .I4(state[0]),
        .I5(\R_inc_reg[2]_i_2_n_0 ),
        .O(\R_size[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000E000FF00E000)) 
    \R_size[2]_i_1 
       (.I0(\R_len_reg[8]_i_3_n_0 ),
        .I1(\R_len[0]_i_2_n_0 ),
        .I2(state[1]),
        .I3(DMA_EN),
        .I4(state[0]),
        .I5(\R_inc_reg[2]_i_2_n_0 ),
        .O(\R_size[2]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \R_size_reg[0] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_size[0]_i_1_n_0 ),
        .Q(R_size[0]));
  FDCE #(
    .INIT(1'b0)) 
    \R_size_reg[2] 
       (.C(ACLK),
        .CE(\R_len[8]_i_1_n_0 ),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\R_size[2]_i_1_n_0 ),
        .Q(R_size[2]));
  LUT6 #(
    .INIT(64'hCC0CCCCC00004040)) 
    R_start_i_1
       (.I0(\R_chunk[15]_i_2_n_0 ),
        .I1(DMA_EN),
        .I2(DMA_DONE_i_2_n_0),
        .I3(R_done),
        .I4(state[2]),
        .I5(R_start_reg_n_0),
        .O(R_start_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    R_start_reg
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(R_start_i_1_n_0),
        .Q(R_start_reg_n_0));
  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'hFFFE0001)) 
    fifo_rooms_inferred_i_1
       (.I0(\BLK_FIFO34.u_fifo_n_44 ),
        .I1(fifo_rooms[0]),
        .I2(\BLK_FIFO34.u_fifo_n_46 ),
        .I3(\BLK_FIFO34.u_fifo_n_45 ),
        .I4(\BLK_FIFO34.u_fifo_n_43 ),
        .O(fifo_rooms[4]));
  LUT4 #(
    .INIT(16'h01FE)) 
    fifo_rooms_inferred_i_2
       (.I0(\BLK_FIFO34.u_fifo_n_45 ),
        .I1(\BLK_FIFO34.u_fifo_n_46 ),
        .I2(fifo_rooms[0]),
        .I3(\BLK_FIFO34.u_fifo_n_44 ),
        .O(fifo_rooms[3]));
  LUT3 #(
    .INIT(8'h1E)) 
    fifo_rooms_inferred_i_3
       (.I0(fifo_rooms[0]),
        .I1(\BLK_FIFO34.u_fifo_n_46 ),
        .I2(\BLK_FIFO34.u_fifo_n_45 ),
        .O(fifo_rooms[2]));
  LUT2 #(
    .INIT(4'h6)) 
    fifo_rooms_inferred_i_4
       (.I0(fifo_rooms[0]),
        .I1(\BLK_FIFO34.u_fifo_n_46 ),
        .O(fifo_rooms[1]));
  LUT2 #(
    .INIT(4'h8)) 
    fifo_wr_dat_inferred_i_1
       (.I0(M_RLAST),
        .I1(R_last),
        .O(fifo_wr_dat[33]));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    fifo_wr_dat_inferred_i_10
       (.I0(\R_inc_reg_n_0_[0] ),
        .I1(R_rem[0]),
        .I2(R_rem[2]),
        .I3(\R_inc_reg_n_0_[2] ),
        .I4(R_rem[1]),
        .I5(\R_inc_reg_n_0_[1] ),
        .O(fifo_wr_dat_inferred_i_10_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    fifo_wr_dat_inferred_i_2
       (.I0(R_first_reg_n_0),
        .I1(R_start_reg_n_0),
        .O(fifo_wr_dat[32]));
  CARRY4 fifo_wr_dat_inferred_i_3
       (.CI(fifo_wr_dat_inferred_i_4_n_0),
        .CO({NLW_fifo_wr_dat_inferred_i_3_CO_UNCONNECTED[3:2],R_last,fifo_wr_dat_inferred_i_3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_fifo_wr_dat_inferred_i_3_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,fifo_wr_dat_inferred_i_5_n_0,fifo_wr_dat_inferred_i_6_n_0}));
  CARRY4 fifo_wr_dat_inferred_i_4
       (.CI(1'b0),
        .CO({fifo_wr_dat_inferred_i_4_n_0,fifo_wr_dat_inferred_i_4_n_1,fifo_wr_dat_inferred_i_4_n_2,fifo_wr_dat_inferred_i_4_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_fifo_wr_dat_inferred_i_4_O_UNCONNECTED[3:0]),
        .S({fifo_wr_dat_inferred_i_7_n_0,fifo_wr_dat_inferred_i_8_n_0,fifo_wr_dat_inferred_i_9_n_0,fifo_wr_dat_inferred_i_10_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    fifo_wr_dat_inferred_i_5
       (.I0(\R_inc_reg_n_0_[15] ),
        .I1(R_rem[15]),
        .O(fifo_wr_dat_inferred_i_5_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    fifo_wr_dat_inferred_i_6
       (.I0(R_rem[14]),
        .I1(\R_inc_reg_n_0_[14] ),
        .I2(R_rem[13]),
        .I3(\R_inc_reg_n_0_[13] ),
        .I4(\R_inc_reg_n_0_[12] ),
        .I5(R_rem[12]),
        .O(fifo_wr_dat_inferred_i_6_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    fifo_wr_dat_inferred_i_7
       (.I0(R_rem[11]),
        .I1(\R_inc_reg_n_0_[11] ),
        .I2(R_rem[10]),
        .I3(\R_inc_reg_n_0_[10] ),
        .I4(\R_inc_reg_n_0_[9] ),
        .I5(R_rem[9]),
        .O(fifo_wr_dat_inferred_i_7_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    fifo_wr_dat_inferred_i_8
       (.I0(R_rem[8]),
        .I1(\R_inc_reg_n_0_[8] ),
        .I2(R_rem[6]),
        .I3(\R_inc_reg_n_0_[6] ),
        .I4(\R_inc_reg_n_0_[7] ),
        .I5(R_rem[7]),
        .O(fifo_wr_dat_inferred_i_8_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    fifo_wr_dat_inferred_i_9
       (.I0(R_rem[5]),
        .I1(\R_inc_reg_n_0_[5] ),
        .I2(R_rem[3]),
        .I3(\R_inc_reg_n_0_[3] ),
        .I4(\R_inc_reg_n_0_[4] ),
        .I5(R_rem[4]),
        .O(fifo_wr_dat_inferred_i_9_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    fifo_wr_rdy_inferred_i_1
       (.I0(fifo_full),
        .O(fifo_wr_rdy));
  LUT3 #(
    .INIT(8'h08)) 
    fifo_wr_vld_inferred_i_1
       (.I0(M_RVALID),
        .I1(state_read[1]),
        .I2(state_read[0]),
        .O(fifo_wr_vld));
  LUT6 #(
    .INIT(64'h888A8A8AAAAAAAAA)) 
    \state[0]_i_1 
       (.I0(DMA_EN),
        .I1(\state[0]_i_2_n_0 ),
        .I2(\state[0]_i_3_n_0 ),
        .I3(\R_chunk[15]_i_2_n_0 ),
        .I4(DMA_DONE_i_2_n_0),
        .I5(\state[0]_i_4_n_0 ),
        .O(\state[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \state[0]_i_2 
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[0]),
        .O(\state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEECCCCCCCCCCCF)) 
    \state[0]_i_3 
       (.I0(R_done),
        .I1(state[2]),
        .I2(DMA_SRC[1]),
        .I3(DMA_SRC[0]),
        .I4(state[0]),
        .I5(state[1]),
        .O(\state[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF3FFF3FFF3BFF3F)) 
    \state[0]_i_4 
       (.I0(R_done),
        .I1(state[2]),
        .I2(state[0]),
        .I3(state[1]),
        .I4(DMA_BUSY_i_8_n_0),
        .I5(\state[1]_i_4_n_0 ),
        .O(\state[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h888888888888888A)) 
    \state[1]_i_1 
       (.I0(DMA_EN),
        .I1(\state[1]_i_2_n_0 ),
        .I2(\R_chunk[15]_i_2_n_0 ),
        .I3(state[1]),
        .I4(\state[1]_i_3_n_0 ),
        .I5(state[2]),
        .O(\state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF000FF0FF08FFF0)) 
    \state[1]_i_2 
       (.I0(\state[1]_i_4_n_0 ),
        .I1(DMA_BUSY_i_8_n_0),
        .I2(state[0]),
        .I3(state[1]),
        .I4(state[2]),
        .I5(R_done),
        .O(\state[1]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \state[1]_i_3 
       (.I0(DMA_SRC[1]),
        .I1(DMA_SRC[0]),
        .O(\state[1]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \state[1]_i_4 
       (.I0(R_addr[0]),
        .I1(R_addr[1]),
        .O(\state[1]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hA8888880)) 
    \state[2]_i_1 
       (.I0(DMA_EN),
        .I1(state[2]),
        .I2(R_done),
        .I3(state[1]),
        .I4(state[0]),
        .O(\state[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h802080A8A220A2AA)) 
    \state_read[0]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[1]),
        .I2(R_go),
        .I3(state_read[0]),
        .I4(R_done_i_2_n_0),
        .I5(M_ARREADY),
        .O(\state_read[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAA802280)) 
    \state_read[1]_i_1 
       (.I0(DMA_EN),
        .I1(state_read[0]),
        .I2(M_ARREADY),
        .I3(state_read[1]),
        .I4(R_go),
        .O(\state_read[1]_i_1_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_read_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\state_read[0]_i_1_n_0 ),
        .Q(state_read[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_read_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\state_read[1]_i_1_n_0 ),
        .Q(state_read[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\state[0]_i_1_n_0 ),
        .Q(state[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\state[1]_i_1_n_0 ),
        .Q(state[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(ACLK),
        .CE(1'b1),
        .CLR(\M_ARID[3]_i_3_n_0 ),
        .D(\state[2]_i_1_n_0 ),
        .Q(state[2]));
endmodule

module axi_mem2stream_csr
   (csr_ctl_en_reg_0,
    DMA_GO,
    IRQ,
    DMA_SRC,
    PRDATA,
    DMA_BNUM,
    DMA_CHUNK,
    PCLK,
    PRESETn,
    PWDATA,
    PADDR,
    PSEL,
    PWRITE,
    DMA_DONE,
    DMA_BUSY);
  output csr_ctl_en_reg_0;
  output DMA_GO;
  output IRQ;
  output [31:0]DMA_SRC;
  output [31:0]PRDATA;
  output [15:0]DMA_BNUM;
  output [7:0]DMA_CHUNK;
  input PCLK;
  input PRESETn;
  input [31:0]PWDATA;
  input [7:0]PADDR;
  input PSEL;
  input PWRITE;
  input DMA_DONE;
  input DMA_BUSY;

  wire [15:0]DMA_BNUM;
  wire \DMA_BNUM[0]_i_1_n_0 ;
  wire \DMA_BNUM[10]_i_1_n_0 ;
  wire \DMA_BNUM[11]_i_1_n_0 ;
  wire \DMA_BNUM[12]_i_1_n_0 ;
  wire \DMA_BNUM[13]_i_1_n_0 ;
  wire \DMA_BNUM[14]_i_1_n_0 ;
  wire \DMA_BNUM[15]_i_1_n_0 ;
  wire \DMA_BNUM[15]_i_2_n_0 ;
  wire \DMA_BNUM[1]_i_1_n_0 ;
  wire \DMA_BNUM[2]_i_1_n_0 ;
  wire \DMA_BNUM[3]_i_1_n_0 ;
  wire \DMA_BNUM[4]_i_1_n_0 ;
  wire \DMA_BNUM[5]_i_1_n_0 ;
  wire \DMA_BNUM[6]_i_1_n_0 ;
  wire \DMA_BNUM[7]_i_1_n_0 ;
  wire \DMA_BNUM[8]_i_1_n_0 ;
  wire \DMA_BNUM[9]_i_1_n_0 ;
  wire DMA_BUSY;
  wire [7:0]DMA_CHUNK;
  wire \DMA_CHUNK[0]_i_1_n_0 ;
  wire \DMA_CHUNK[1]_i_1_n_0 ;
  wire \DMA_CHUNK[2]_i_1_n_0 ;
  wire \DMA_CHUNK[3]_i_1_n_0 ;
  wire \DMA_CHUNK[4]_i_1_n_0 ;
  wire \DMA_CHUNK[5]_i_1_n_0 ;
  wire \DMA_CHUNK[6]_i_1_n_0 ;
  wire \DMA_CHUNK[7]_i_1_n_0 ;
  wire \DMA_CNT[0]_i_1_n_0 ;
  wire \DMA_CNT[10]_i_1_n_0 ;
  wire \DMA_CNT[11]_i_1_n_0 ;
  wire \DMA_CNT[12]_i_1_n_0 ;
  wire \DMA_CNT[13]_i_1_n_0 ;
  wire \DMA_CNT[14]_i_1_n_0 ;
  wire \DMA_CNT[15]_i_1_n_0 ;
  wire \DMA_CNT[16]_i_1_n_0 ;
  wire \DMA_CNT[17]_i_1_n_0 ;
  wire \DMA_CNT[18]_i_1_n_0 ;
  wire \DMA_CNT[19]_i_1_n_0 ;
  wire \DMA_CNT[1]_i_1_n_0 ;
  wire \DMA_CNT[20]_i_1_n_0 ;
  wire \DMA_CNT[21]_i_1_n_0 ;
  wire \DMA_CNT[22]_i_1_n_0 ;
  wire \DMA_CNT[23]_i_1_n_0 ;
  wire \DMA_CNT[24]_i_1_n_0 ;
  wire \DMA_CNT[25]_i_1_n_0 ;
  wire \DMA_CNT[26]_i_1_n_0 ;
  wire \DMA_CNT[27]_i_1_n_0 ;
  wire \DMA_CNT[28]_i_1_n_0 ;
  wire \DMA_CNT[29]_i_1_n_0 ;
  wire \DMA_CNT[2]_i_1_n_0 ;
  wire \DMA_CNT[30]_i_1_n_0 ;
  wire \DMA_CNT[31]_i_10_n_0 ;
  wire \DMA_CNT[31]_i_11_n_0 ;
  wire \DMA_CNT[31]_i_12_n_0 ;
  wire \DMA_CNT[31]_i_13_n_0 ;
  wire \DMA_CNT[31]_i_14_n_0 ;
  wire \DMA_CNT[31]_i_1_n_0 ;
  wire \DMA_CNT[31]_i_2_n_0 ;
  wire \DMA_CNT[31]_i_3_n_0 ;
  wire \DMA_CNT[31]_i_4_n_0 ;
  wire \DMA_CNT[31]_i_5_n_0 ;
  wire \DMA_CNT[31]_i_6_n_0 ;
  wire \DMA_CNT[31]_i_7_n_0 ;
  wire \DMA_CNT[31]_i_8_n_0 ;
  wire \DMA_CNT[31]_i_9_n_0 ;
  wire \DMA_CNT[3]_i_1_n_0 ;
  wire \DMA_CNT[4]_i_1_n_0 ;
  wire \DMA_CNT[5]_i_1_n_0 ;
  wire \DMA_CNT[6]_i_1_n_0 ;
  wire \DMA_CNT[7]_i_1_n_0 ;
  wire \DMA_CNT[8]_i_1_n_0 ;
  wire \DMA_CNT[9]_i_1_n_0 ;
  wire \DMA_CNT_reg_n_0_[0] ;
  wire \DMA_CNT_reg_n_0_[10] ;
  wire \DMA_CNT_reg_n_0_[11] ;
  wire \DMA_CNT_reg_n_0_[12] ;
  wire \DMA_CNT_reg_n_0_[13] ;
  wire \DMA_CNT_reg_n_0_[14] ;
  wire \DMA_CNT_reg_n_0_[15] ;
  wire \DMA_CNT_reg_n_0_[16] ;
  wire \DMA_CNT_reg_n_0_[17] ;
  wire \DMA_CNT_reg_n_0_[18] ;
  wire \DMA_CNT_reg_n_0_[19] ;
  wire \DMA_CNT_reg_n_0_[1] ;
  wire \DMA_CNT_reg_n_0_[20] ;
  wire \DMA_CNT_reg_n_0_[21] ;
  wire \DMA_CNT_reg_n_0_[22] ;
  wire \DMA_CNT_reg_n_0_[23] ;
  wire \DMA_CNT_reg_n_0_[24] ;
  wire \DMA_CNT_reg_n_0_[25] ;
  wire \DMA_CNT_reg_n_0_[26] ;
  wire \DMA_CNT_reg_n_0_[27] ;
  wire \DMA_CNT_reg_n_0_[28] ;
  wire \DMA_CNT_reg_n_0_[29] ;
  wire \DMA_CNT_reg_n_0_[2] ;
  wire \DMA_CNT_reg_n_0_[30] ;
  wire \DMA_CNT_reg_n_0_[31] ;
  wire \DMA_CNT_reg_n_0_[3] ;
  wire \DMA_CNT_reg_n_0_[4] ;
  wire \DMA_CNT_reg_n_0_[5] ;
  wire \DMA_CNT_reg_n_0_[6] ;
  wire \DMA_CNT_reg_n_0_[7] ;
  wire \DMA_CNT_reg_n_0_[8] ;
  wire \DMA_CNT_reg_n_0_[9] ;
  wire DMA_DONE;
  wire DMA_GO;
  wire DMA_GO_i_1_n_0;
  wire DMA_GO_i_2_n_0;
  wire [31:0]DMA_SRC;
  wire \DMA_SRC[0]_i_1_n_0 ;
  wire \DMA_SRC[10]_i_1_n_0 ;
  wire \DMA_SRC[11]_i_1_n_0 ;
  wire \DMA_SRC[11]_i_3_n_0 ;
  wire \DMA_SRC[11]_i_4_n_0 ;
  wire \DMA_SRC[11]_i_5_n_0 ;
  wire \DMA_SRC[11]_i_6_n_0 ;
  wire \DMA_SRC[12]_i_1_n_0 ;
  wire \DMA_SRC[13]_i_1_n_0 ;
  wire \DMA_SRC[14]_i_1_n_0 ;
  wire \DMA_SRC[15]_i_1_n_0 ;
  wire \DMA_SRC[15]_i_3_n_0 ;
  wire \DMA_SRC[15]_i_4_n_0 ;
  wire \DMA_SRC[15]_i_5_n_0 ;
  wire \DMA_SRC[15]_i_6_n_0 ;
  wire \DMA_SRC[16]_i_1_n_0 ;
  wire \DMA_SRC[17]_i_1_n_0 ;
  wire \DMA_SRC[18]_i_1_n_0 ;
  wire \DMA_SRC[19]_i_1_n_0 ;
  wire \DMA_SRC[1]_i_1_n_0 ;
  wire \DMA_SRC[20]_i_1_n_0 ;
  wire \DMA_SRC[21]_i_1_n_0 ;
  wire \DMA_SRC[22]_i_1_n_0 ;
  wire \DMA_SRC[23]_i_1_n_0 ;
  wire \DMA_SRC[24]_i_1_n_0 ;
  wire \DMA_SRC[25]_i_1_n_0 ;
  wire \DMA_SRC[26]_i_1_n_0 ;
  wire \DMA_SRC[27]_i_1_n_0 ;
  wire \DMA_SRC[28]_i_1_n_0 ;
  wire \DMA_SRC[29]_i_1_n_0 ;
  wire \DMA_SRC[2]_i_1_n_0 ;
  wire \DMA_SRC[30]_i_1_n_0 ;
  wire \DMA_SRC[31]_i_1_n_0 ;
  wire \DMA_SRC[31]_i_2_n_0 ;
  wire \DMA_SRC[3]_i_1_n_0 ;
  wire \DMA_SRC[3]_i_3_n_0 ;
  wire \DMA_SRC[3]_i_4_n_0 ;
  wire \DMA_SRC[3]_i_5_n_0 ;
  wire \DMA_SRC[3]_i_6_n_0 ;
  wire \DMA_SRC[4]_i_1_n_0 ;
  wire \DMA_SRC[5]_i_1_n_0 ;
  wire \DMA_SRC[6]_i_1_n_0 ;
  wire \DMA_SRC[7]_i_1_n_0 ;
  wire \DMA_SRC[7]_i_3_n_0 ;
  wire \DMA_SRC[7]_i_4_n_0 ;
  wire \DMA_SRC[7]_i_5_n_0 ;
  wire \DMA_SRC[7]_i_6_n_0 ;
  wire \DMA_SRC[8]_i_1_n_0 ;
  wire \DMA_SRC[9]_i_1_n_0 ;
  wire \DMA_SRC_reg[11]_i_2_n_0 ;
  wire \DMA_SRC_reg[11]_i_2_n_1 ;
  wire \DMA_SRC_reg[11]_i_2_n_2 ;
  wire \DMA_SRC_reg[11]_i_2_n_3 ;
  wire \DMA_SRC_reg[11]_i_2_n_4 ;
  wire \DMA_SRC_reg[11]_i_2_n_5 ;
  wire \DMA_SRC_reg[11]_i_2_n_6 ;
  wire \DMA_SRC_reg[11]_i_2_n_7 ;
  wire \DMA_SRC_reg[15]_i_2_n_0 ;
  wire \DMA_SRC_reg[15]_i_2_n_1 ;
  wire \DMA_SRC_reg[15]_i_2_n_2 ;
  wire \DMA_SRC_reg[15]_i_2_n_3 ;
  wire \DMA_SRC_reg[15]_i_2_n_4 ;
  wire \DMA_SRC_reg[15]_i_2_n_5 ;
  wire \DMA_SRC_reg[15]_i_2_n_6 ;
  wire \DMA_SRC_reg[15]_i_2_n_7 ;
  wire \DMA_SRC_reg[19]_i_2_n_0 ;
  wire \DMA_SRC_reg[19]_i_2_n_1 ;
  wire \DMA_SRC_reg[19]_i_2_n_2 ;
  wire \DMA_SRC_reg[19]_i_2_n_3 ;
  wire \DMA_SRC_reg[19]_i_2_n_4 ;
  wire \DMA_SRC_reg[19]_i_2_n_5 ;
  wire \DMA_SRC_reg[19]_i_2_n_6 ;
  wire \DMA_SRC_reg[19]_i_2_n_7 ;
  wire \DMA_SRC_reg[23]_i_2_n_0 ;
  wire \DMA_SRC_reg[23]_i_2_n_1 ;
  wire \DMA_SRC_reg[23]_i_2_n_2 ;
  wire \DMA_SRC_reg[23]_i_2_n_3 ;
  wire \DMA_SRC_reg[23]_i_2_n_4 ;
  wire \DMA_SRC_reg[23]_i_2_n_5 ;
  wire \DMA_SRC_reg[23]_i_2_n_6 ;
  wire \DMA_SRC_reg[23]_i_2_n_7 ;
  wire \DMA_SRC_reg[27]_i_2_n_0 ;
  wire \DMA_SRC_reg[27]_i_2_n_1 ;
  wire \DMA_SRC_reg[27]_i_2_n_2 ;
  wire \DMA_SRC_reg[27]_i_2_n_3 ;
  wire \DMA_SRC_reg[27]_i_2_n_4 ;
  wire \DMA_SRC_reg[27]_i_2_n_5 ;
  wire \DMA_SRC_reg[27]_i_2_n_6 ;
  wire \DMA_SRC_reg[27]_i_2_n_7 ;
  wire \DMA_SRC_reg[31]_i_3_n_1 ;
  wire \DMA_SRC_reg[31]_i_3_n_2 ;
  wire \DMA_SRC_reg[31]_i_3_n_3 ;
  wire \DMA_SRC_reg[31]_i_3_n_4 ;
  wire \DMA_SRC_reg[31]_i_3_n_5 ;
  wire \DMA_SRC_reg[31]_i_3_n_6 ;
  wire \DMA_SRC_reg[31]_i_3_n_7 ;
  wire \DMA_SRC_reg[3]_i_2_n_0 ;
  wire \DMA_SRC_reg[3]_i_2_n_1 ;
  wire \DMA_SRC_reg[3]_i_2_n_2 ;
  wire \DMA_SRC_reg[3]_i_2_n_3 ;
  wire \DMA_SRC_reg[3]_i_2_n_4 ;
  wire \DMA_SRC_reg[3]_i_2_n_5 ;
  wire \DMA_SRC_reg[3]_i_2_n_6 ;
  wire \DMA_SRC_reg[3]_i_2_n_7 ;
  wire \DMA_SRC_reg[7]_i_2_n_0 ;
  wire \DMA_SRC_reg[7]_i_2_n_1 ;
  wire \DMA_SRC_reg[7]_i_2_n_2 ;
  wire \DMA_SRC_reg[7]_i_2_n_3 ;
  wire \DMA_SRC_reg[7]_i_2_n_4 ;
  wire \DMA_SRC_reg[7]_i_2_n_5 ;
  wire \DMA_SRC_reg[7]_i_2_n_6 ;
  wire \DMA_SRC_reg[7]_i_2_n_7 ;
  wire IRQ;
  wire [7:0]PADDR;
  wire PCLK;
  wire [31:0]PRDATA;
  wire PRESETn;
  wire PSEL;
  wire [31:0]PWDATA;
  wire PWRITE;
  wire \T_RDATA[0]_i_1_n_0 ;
  wire \T_RDATA[0]_i_2_n_0 ;
  wire \T_RDATA[0]_i_3_n_0 ;
  wire \T_RDATA[0]_i_4_n_0 ;
  wire \T_RDATA[0]_i_5_n_0 ;
  wire \T_RDATA[0]_i_6_n_0 ;
  wire \T_RDATA[0]_i_7_n_0 ;
  wire \T_RDATA[10]_i_1_n_0 ;
  wire \T_RDATA[10]_i_2_n_0 ;
  wire \T_RDATA[10]_i_3_n_0 ;
  wire \T_RDATA[11]_i_1_n_0 ;
  wire \T_RDATA[11]_i_2_n_0 ;
  wire \T_RDATA[11]_i_3_n_0 ;
  wire \T_RDATA[12]_i_1_n_0 ;
  wire \T_RDATA[12]_i_2_n_0 ;
  wire \T_RDATA[12]_i_3_n_0 ;
  wire \T_RDATA[13]_i_1_n_0 ;
  wire \T_RDATA[13]_i_2_n_0 ;
  wire \T_RDATA[13]_i_3_n_0 ;
  wire \T_RDATA[14]_i_1_n_0 ;
  wire \T_RDATA[14]_i_2_n_0 ;
  wire \T_RDATA[14]_i_3_n_0 ;
  wire \T_RDATA[15]_i_1_n_0 ;
  wire \T_RDATA[15]_i_2_n_0 ;
  wire \T_RDATA[15]_i_3_n_0 ;
  wire \T_RDATA[16]_i_1_n_0 ;
  wire \T_RDATA[16]_i_2_n_0 ;
  wire \T_RDATA[16]_i_3_n_0 ;
  wire \T_RDATA[17]_i_1_n_0 ;
  wire \T_RDATA[17]_i_2_n_0 ;
  wire \T_RDATA[17]_i_3_n_0 ;
  wire \T_RDATA[18]_i_1_n_0 ;
  wire \T_RDATA[18]_i_2_n_0 ;
  wire \T_RDATA[18]_i_3_n_0 ;
  wire \T_RDATA[19]_i_1_n_0 ;
  wire \T_RDATA[19]_i_2_n_0 ;
  wire \T_RDATA[19]_i_3_n_0 ;
  wire \T_RDATA[1]_i_1_n_0 ;
  wire \T_RDATA[1]_i_2_n_0 ;
  wire \T_RDATA[1]_i_3_n_0 ;
  wire \T_RDATA[1]_i_4_n_0 ;
  wire \T_RDATA[20]_i_1_n_0 ;
  wire \T_RDATA[20]_i_2_n_0 ;
  wire \T_RDATA[20]_i_3_n_0 ;
  wire \T_RDATA[21]_i_1_n_0 ;
  wire \T_RDATA[21]_i_2_n_0 ;
  wire \T_RDATA[21]_i_3_n_0 ;
  wire \T_RDATA[22]_i_1_n_0 ;
  wire \T_RDATA[22]_i_2_n_0 ;
  wire \T_RDATA[22]_i_3_n_0 ;
  wire \T_RDATA[23]_i_1_n_0 ;
  wire \T_RDATA[23]_i_2_n_0 ;
  wire \T_RDATA[23]_i_3_n_0 ;
  wire \T_RDATA[24]_i_1_n_0 ;
  wire \T_RDATA[24]_i_2_n_0 ;
  wire \T_RDATA[24]_i_3_n_0 ;
  wire \T_RDATA[25]_i_1_n_0 ;
  wire \T_RDATA[25]_i_2_n_0 ;
  wire \T_RDATA[25]_i_3_n_0 ;
  wire \T_RDATA[26]_i_1_n_0 ;
  wire \T_RDATA[26]_i_2_n_0 ;
  wire \T_RDATA[26]_i_3_n_0 ;
  wire \T_RDATA[27]_i_1_n_0 ;
  wire \T_RDATA[27]_i_2_n_0 ;
  wire \T_RDATA[27]_i_3_n_0 ;
  wire \T_RDATA[28]_i_1_n_0 ;
  wire \T_RDATA[28]_i_2_n_0 ;
  wire \T_RDATA[28]_i_3_n_0 ;
  wire \T_RDATA[29]_i_1_n_0 ;
  wire \T_RDATA[29]_i_2_n_0 ;
  wire \T_RDATA[29]_i_3_n_0 ;
  wire \T_RDATA[29]_i_4_n_0 ;
  wire \T_RDATA[2]_i_1_n_0 ;
  wire \T_RDATA[2]_i_2_n_0 ;
  wire \T_RDATA[2]_i_3_n_0 ;
  wire \T_RDATA[30]_i_1_n_0 ;
  wire \T_RDATA[30]_i_2_n_0 ;
  wire \T_RDATA[30]_i_3_n_0 ;
  wire \T_RDATA[30]_i_4_n_0 ;
  wire \T_RDATA[31]_i_10_n_0 ;
  wire \T_RDATA[31]_i_11_n_0 ;
  wire \T_RDATA[31]_i_1_n_0 ;
  wire \T_RDATA[31]_i_2_n_0 ;
  wire \T_RDATA[31]_i_3_n_0 ;
  wire \T_RDATA[31]_i_4_n_0 ;
  wire \T_RDATA[31]_i_5_n_0 ;
  wire \T_RDATA[31]_i_6_n_0 ;
  wire \T_RDATA[31]_i_7_n_0 ;
  wire \T_RDATA[31]_i_8_n_0 ;
  wire \T_RDATA[31]_i_9_n_0 ;
  wire \T_RDATA[3]_i_1_n_0 ;
  wire \T_RDATA[3]_i_2_n_0 ;
  wire \T_RDATA[3]_i_3_n_0 ;
  wire \T_RDATA[4]_i_1_n_0 ;
  wire \T_RDATA[4]_i_2_n_0 ;
  wire \T_RDATA[4]_i_3_n_0 ;
  wire \T_RDATA[5]_i_1_n_0 ;
  wire \T_RDATA[5]_i_2_n_0 ;
  wire \T_RDATA[5]_i_3_n_0 ;
  wire \T_RDATA[6]_i_1_n_0 ;
  wire \T_RDATA[6]_i_2_n_0 ;
  wire \T_RDATA[6]_i_3_n_0 ;
  wire \T_RDATA[7]_i_1_n_0 ;
  wire \T_RDATA[7]_i_2_n_0 ;
  wire \T_RDATA[7]_i_3_n_0 ;
  wire \T_RDATA[8]_i_1_n_0 ;
  wire \T_RDATA[8]_i_2_n_0 ;
  wire \T_RDATA[8]_i_3_n_0 ;
  wire \T_RDATA[9]_i_1_n_0 ;
  wire \T_RDATA[9]_i_2_n_0 ;
  wire \T_RDATA[9]_i_3_n_0 ;
  wire clr_go;
  wire clr_go0;
  wire clr_go0_carry__0_i_1_n_0;
  wire clr_go0_carry__0_i_2_n_0;
  wire clr_go0_carry__0_i_3_n_0;
  wire clr_go0_carry__0_i_4_n_0;
  wire clr_go0_carry__0_i_5_n_0;
  wire clr_go0_carry__0_i_6_n_0;
  wire clr_go0_carry__0_i_7_n_0;
  wire clr_go0_carry__0_i_8_n_0;
  wire clr_go0_carry__0_n_0;
  wire clr_go0_carry__0_n_1;
  wire clr_go0_carry__0_n_2;
  wire clr_go0_carry__0_n_3;
  wire clr_go0_carry__1_i_1_n_0;
  wire clr_go0_carry__1_i_2_n_0;
  wire clr_go0_carry__1_i_3_n_0;
  wire clr_go0_carry__1_i_4_n_0;
  wire clr_go0_carry__1_i_5_n_0;
  wire clr_go0_carry__1_i_6_n_0;
  wire clr_go0_carry__1_i_7_n_0;
  wire clr_go0_carry__1_i_8_n_0;
  wire clr_go0_carry__1_n_0;
  wire clr_go0_carry__1_n_1;
  wire clr_go0_carry__1_n_2;
  wire clr_go0_carry__1_n_3;
  wire clr_go0_carry__2_i_1_n_0;
  wire clr_go0_carry__2_i_2_n_0;
  wire clr_go0_carry__2_i_3_n_0;
  wire clr_go0_carry__2_i_4_n_0;
  wire clr_go0_carry__2_i_5_n_0;
  wire clr_go0_carry__2_i_6_n_0;
  wire clr_go0_carry__2_i_7_n_0;
  wire clr_go0_carry__2_i_8_n_0;
  wire clr_go0_carry__2_n_1;
  wire clr_go0_carry__2_n_2;
  wire clr_go0_carry__2_n_3;
  wire clr_go0_carry_i_1_n_0;
  wire clr_go0_carry_i_2_n_0;
  wire clr_go0_carry_i_3_n_0;
  wire clr_go0_carry_i_4_n_0;
  wire clr_go0_carry_i_5_n_0;
  wire clr_go0_carry_i_6_n_0;
  wire clr_go0_carry_i_7_n_0;
  wire clr_go0_carry_i_8_n_0;
  wire clr_go0_carry_n_0;
  wire clr_go0_carry_n_1;
  wire clr_go0_carry_n_2;
  wire clr_go0_carry_n_3;
  wire clr_go2_carry__0_i_1_n_0;
  wire clr_go2_carry__0_i_2_n_0;
  wire clr_go2_carry__0_i_3_n_0;
  wire clr_go2_carry__0_i_4_n_0;
  wire clr_go2_carry__0_i_5_n_0;
  wire clr_go2_carry__0_i_6_n_0;
  wire clr_go2_carry__0_i_7_n_0;
  wire clr_go2_carry__0_i_8_n_0;
  wire clr_go2_carry__0_n_0;
  wire clr_go2_carry__0_n_1;
  wire clr_go2_carry__0_n_2;
  wire clr_go2_carry__0_n_3;
  wire clr_go2_carry__1_i_1_n_0;
  wire clr_go2_carry__1_i_2_n_0;
  wire clr_go2_carry__1_i_3_n_0;
  wire clr_go2_carry__1_i_4_n_0;
  wire clr_go2_carry__1_i_5_n_0;
  wire clr_go2_carry__1_i_6_n_0;
  wire clr_go2_carry__1_i_7_n_0;
  wire clr_go2_carry__1_i_8_n_0;
  wire clr_go2_carry__1_n_0;
  wire clr_go2_carry__1_n_1;
  wire clr_go2_carry__1_n_2;
  wire clr_go2_carry__1_n_3;
  wire clr_go2_carry__2_i_1_n_0;
  wire clr_go2_carry__2_i_2_n_0;
  wire clr_go2_carry__2_i_3_n_0;
  wire clr_go2_carry__2_i_4_n_0;
  wire clr_go2_carry__2_i_5_n_0;
  wire clr_go2_carry__2_i_6_n_0;
  wire clr_go2_carry__2_i_7_n_0;
  wire clr_go2_carry__2_i_8_n_0;
  wire clr_go2_carry__2_n_0;
  wire clr_go2_carry__2_n_1;
  wire clr_go2_carry__2_n_2;
  wire clr_go2_carry__2_n_3;
  wire clr_go2_carry_i_1_n_0;
  wire clr_go2_carry_i_2_n_0;
  wire clr_go2_carry_i_3_n_0;
  wire clr_go2_carry_i_4_n_0;
  wire clr_go2_carry_i_5_n_0;
  wire clr_go2_carry_i_6_n_0;
  wire clr_go2_carry_i_7_n_0;
  wire clr_go2_carry_i_8_n_0;
  wire clr_go2_carry_n_0;
  wire clr_go2_carry_n_1;
  wire clr_go2_carry_n_2;
  wire clr_go2_carry_n_3;
  wire clr_go3_carry__0_n_0;
  wire clr_go3_carry__0_n_1;
  wire clr_go3_carry__0_n_2;
  wire clr_go3_carry__0_n_3;
  wire clr_go3_carry__0_n_4;
  wire clr_go3_carry__0_n_5;
  wire clr_go3_carry__0_n_6;
  wire clr_go3_carry__0_n_7;
  wire clr_go3_carry__1_n_0;
  wire clr_go3_carry__1_n_1;
  wire clr_go3_carry__1_n_2;
  wire clr_go3_carry__1_n_3;
  wire clr_go3_carry__1_n_4;
  wire clr_go3_carry__1_n_5;
  wire clr_go3_carry__1_n_6;
  wire clr_go3_carry__1_n_7;
  wire clr_go3_carry__2_n_0;
  wire clr_go3_carry__2_n_1;
  wire clr_go3_carry__2_n_2;
  wire clr_go3_carry__2_n_3;
  wire clr_go3_carry__2_n_4;
  wire clr_go3_carry__2_n_5;
  wire clr_go3_carry__2_n_6;
  wire clr_go3_carry__2_n_7;
  wire clr_go3_carry__3_n_0;
  wire clr_go3_carry__3_n_1;
  wire clr_go3_carry__3_n_2;
  wire clr_go3_carry__3_n_3;
  wire clr_go3_carry__3_n_4;
  wire clr_go3_carry__3_n_5;
  wire clr_go3_carry__3_n_6;
  wire clr_go3_carry__3_n_7;
  wire clr_go3_carry__4_n_0;
  wire clr_go3_carry__4_n_1;
  wire clr_go3_carry__4_n_2;
  wire clr_go3_carry__4_n_3;
  wire clr_go3_carry__4_n_4;
  wire clr_go3_carry__4_n_5;
  wire clr_go3_carry__4_n_6;
  wire clr_go3_carry__4_n_7;
  wire clr_go3_carry__5_n_0;
  wire clr_go3_carry__5_n_1;
  wire clr_go3_carry__5_n_2;
  wire clr_go3_carry__5_n_3;
  wire clr_go3_carry__5_n_4;
  wire clr_go3_carry__5_n_5;
  wire clr_go3_carry__5_n_6;
  wire clr_go3_carry__5_n_7;
  wire clr_go3_carry__6_n_2;
  wire clr_go3_carry__6_n_3;
  wire clr_go3_carry__6_n_5;
  wire clr_go3_carry__6_n_6;
  wire clr_go3_carry__6_n_7;
  wire clr_go3_carry_n_0;
  wire clr_go3_carry_n_1;
  wire clr_go3_carry_n_2;
  wire clr_go3_carry_n_3;
  wire clr_go3_carry_n_4;
  wire clr_go3_carry_n_5;
  wire clr_go3_carry_n_6;
  wire clr_go3_carry_n_7;
  wire clr_go9_out;
  wire clr_go_i_1_n_0;
  wire clr_go_i_3_n_0;
  wire clr_go_i_4_n_0;
  wire clr_go_i_5_n_0;
  wire \csr_count[31]_i_1_n_0 ;
  wire \csr_count_reg_n_0_[0] ;
  wire \csr_count_reg_n_0_[10] ;
  wire \csr_count_reg_n_0_[11] ;
  wire \csr_count_reg_n_0_[12] ;
  wire \csr_count_reg_n_0_[13] ;
  wire \csr_count_reg_n_0_[14] ;
  wire \csr_count_reg_n_0_[15] ;
  wire \csr_count_reg_n_0_[16] ;
  wire \csr_count_reg_n_0_[17] ;
  wire \csr_count_reg_n_0_[18] ;
  wire \csr_count_reg_n_0_[19] ;
  wire \csr_count_reg_n_0_[1] ;
  wire \csr_count_reg_n_0_[20] ;
  wire \csr_count_reg_n_0_[21] ;
  wire \csr_count_reg_n_0_[22] ;
  wire \csr_count_reg_n_0_[23] ;
  wire \csr_count_reg_n_0_[24] ;
  wire \csr_count_reg_n_0_[25] ;
  wire \csr_count_reg_n_0_[26] ;
  wire \csr_count_reg_n_0_[27] ;
  wire \csr_count_reg_n_0_[28] ;
  wire \csr_count_reg_n_0_[29] ;
  wire \csr_count_reg_n_0_[2] ;
  wire \csr_count_reg_n_0_[30] ;
  wire \csr_count_reg_n_0_[31] ;
  wire \csr_count_reg_n_0_[3] ;
  wire \csr_count_reg_n_0_[4] ;
  wire \csr_count_reg_n_0_[5] ;
  wire \csr_count_reg_n_0_[6] ;
  wire \csr_count_reg_n_0_[7] ;
  wire \csr_count_reg_n_0_[8] ;
  wire \csr_count_reg_n_0_[9] ;
  wire csr_ctl_en_i_1_n_0;
  wire csr_ctl_en_reg_0;
  wire csr_ctl_ie_i_1_n_0;
  wire csr_ctl_ie_i_2_n_0;
  wire csr_ctl_ie_i_3_n_0;
  wire csr_ctl_ip_i_1_n_0;
  wire csr_ctl_ip_i_2_n_0;
  wire \csr_end[31]_i_1_n_0 ;
  wire \csr_end[63]_i_1_n_0 ;
  wire \csr_end_reg_n_0_[0] ;
  wire \csr_end_reg_n_0_[10] ;
  wire \csr_end_reg_n_0_[11] ;
  wire \csr_end_reg_n_0_[12] ;
  wire \csr_end_reg_n_0_[13] ;
  wire \csr_end_reg_n_0_[14] ;
  wire \csr_end_reg_n_0_[15] ;
  wire \csr_end_reg_n_0_[16] ;
  wire \csr_end_reg_n_0_[17] ;
  wire \csr_end_reg_n_0_[18] ;
  wire \csr_end_reg_n_0_[19] ;
  wire \csr_end_reg_n_0_[1] ;
  wire \csr_end_reg_n_0_[20] ;
  wire \csr_end_reg_n_0_[21] ;
  wire \csr_end_reg_n_0_[22] ;
  wire \csr_end_reg_n_0_[23] ;
  wire \csr_end_reg_n_0_[24] ;
  wire \csr_end_reg_n_0_[25] ;
  wire \csr_end_reg_n_0_[26] ;
  wire \csr_end_reg_n_0_[27] ;
  wire \csr_end_reg_n_0_[28] ;
  wire \csr_end_reg_n_0_[29] ;
  wire \csr_end_reg_n_0_[2] ;
  wire \csr_end_reg_n_0_[30] ;
  wire \csr_end_reg_n_0_[31] ;
  wire \csr_end_reg_n_0_[3] ;
  wire \csr_end_reg_n_0_[4] ;
  wire \csr_end_reg_n_0_[5] ;
  wire \csr_end_reg_n_0_[6] ;
  wire \csr_end_reg_n_0_[7] ;
  wire \csr_end_reg_n_0_[8] ;
  wire \csr_end_reg_n_0_[9] ;
  wire [15:0]csr_num_byte;
  wire \csr_num_byte[15]_i_1_n_0 ;
  wire \csr_num_chunk_reg_n_0_[0] ;
  wire \csr_num_chunk_reg_n_0_[1] ;
  wire \csr_num_chunk_reg_n_0_[2] ;
  wire \csr_num_chunk_reg_n_0_[3] ;
  wire \csr_num_chunk_reg_n_0_[4] ;
  wire \csr_num_chunk_reg_n_0_[5] ;
  wire \csr_num_chunk_reg_n_0_[6] ;
  wire \csr_num_chunk_reg_n_0_[7] ;
  wire csr_num_cont;
  wire csr_num_cont_i_1_n_0;
  wire csr_num_cont_i_2_n_0;
  wire csr_num_go;
  wire csr_num_go_i_1_n_0;
  wire csr_num_go_i_2_n_0;
  wire \csr_start[31]_i_1_n_0 ;
  wire \csr_start[31]_i_2_n_0 ;
  wire \csr_start[63]_i_1_n_0 ;
  wire \csr_start_reg_n_0_[0] ;
  wire \csr_start_reg_n_0_[10] ;
  wire \csr_start_reg_n_0_[11] ;
  wire \csr_start_reg_n_0_[12] ;
  wire \csr_start_reg_n_0_[13] ;
  wire \csr_start_reg_n_0_[14] ;
  wire \csr_start_reg_n_0_[15] ;
  wire \csr_start_reg_n_0_[16] ;
  wire \csr_start_reg_n_0_[17] ;
  wire \csr_start_reg_n_0_[18] ;
  wire \csr_start_reg_n_0_[19] ;
  wire \csr_start_reg_n_0_[1] ;
  wire \csr_start_reg_n_0_[20] ;
  wire \csr_start_reg_n_0_[21] ;
  wire \csr_start_reg_n_0_[22] ;
  wire \csr_start_reg_n_0_[23] ;
  wire \csr_start_reg_n_0_[24] ;
  wire \csr_start_reg_n_0_[25] ;
  wire \csr_start_reg_n_0_[26] ;
  wire \csr_start_reg_n_0_[27] ;
  wire \csr_start_reg_n_0_[28] ;
  wire \csr_start_reg_n_0_[29] ;
  wire \csr_start_reg_n_0_[2] ;
  wire \csr_start_reg_n_0_[30] ;
  wire \csr_start_reg_n_0_[31] ;
  wire \csr_start_reg_n_0_[3] ;
  wire \csr_start_reg_n_0_[4] ;
  wire \csr_start_reg_n_0_[5] ;
  wire \csr_start_reg_n_0_[6] ;
  wire \csr_start_reg_n_0_[7] ;
  wire \csr_start_reg_n_0_[8] ;
  wire \csr_start_reg_n_0_[9] ;
  wire [31:0]p_1_in;
  wire [31:0]p_3_in;
  wire [0:0]p_5_in;
  (* MARK_DEBUG *) wire [2:0]state;
  wire \state[0]_i_1_n_0 ;
  wire \state[0]_i_2_n_0 ;
  wire \state[0]_i_3_n_0 ;
  wire \state[0]_i_4_n_0 ;
  wire \state[1]_i_1_n_0 ;
  wire \state[1]_i_2_n_0 ;
  wire \state[1]_i_3_n_0 ;
  wire \state[1]_i_4_n_0 ;
  wire [3:3]\NLW_DMA_SRC_reg[31]_i_3_CO_UNCONNECTED ;
  wire [3:0]NLW_clr_go0_carry_O_UNCONNECTED;
  wire [3:0]NLW_clr_go0_carry__0_O_UNCONNECTED;
  wire [3:0]NLW_clr_go0_carry__1_O_UNCONNECTED;
  wire [3:0]NLW_clr_go0_carry__2_O_UNCONNECTED;
  wire [3:0]NLW_clr_go2_carry_O_UNCONNECTED;
  wire [3:0]NLW_clr_go2_carry__0_O_UNCONNECTED;
  wire [3:0]NLW_clr_go2_carry__1_O_UNCONNECTED;
  wire [3:0]NLW_clr_go2_carry__2_O_UNCONNECTED;
  wire [3:2]NLW_clr_go3_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_clr_go3_carry__6_O_UNCONNECTED;

  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[0]_i_1 
       (.I0(csr_num_byte[0]),
        .I1(csr_ctl_en_reg_0),
        .O(\DMA_BNUM[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[10]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[10]),
        .O(\DMA_BNUM[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[11]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[11]),
        .O(\DMA_BNUM[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[12]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[12]),
        .O(\DMA_BNUM[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[13]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[13]),
        .O(\DMA_BNUM[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[14]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[14]),
        .O(\DMA_BNUM[14]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0002FFFF)) 
    \DMA_BNUM[15]_i_1 
       (.I0(csr_num_go),
        .I1(state[0]),
        .I2(state[1]),
        .I3(state[2]),
        .I4(csr_ctl_en_reg_0),
        .O(\DMA_BNUM[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[15]_i_2 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[15]),
        .O(\DMA_BNUM[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[1]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[1]),
        .O(\DMA_BNUM[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[2]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[2]),
        .O(\DMA_BNUM[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[3]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[3]),
        .O(\DMA_BNUM[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[4]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[4]),
        .O(\DMA_BNUM[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[5]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[5]),
        .O(\DMA_BNUM[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[6]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[6]),
        .O(\DMA_BNUM[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[7]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[7]),
        .O(\DMA_BNUM[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[8]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[8]),
        .O(\DMA_BNUM[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_BNUM[9]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(csr_num_byte[9]),
        .O(\DMA_BNUM[9]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[0] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[0]_i_1_n_0 ),
        .Q(DMA_BNUM[0]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[10] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[10]_i_1_n_0 ),
        .Q(DMA_BNUM[10]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[11] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[11]_i_1_n_0 ),
        .Q(DMA_BNUM[11]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[12] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[12]_i_1_n_0 ),
        .Q(DMA_BNUM[12]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[13] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[13]_i_1_n_0 ),
        .Q(DMA_BNUM[13]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[14] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[14]_i_1_n_0 ),
        .Q(DMA_BNUM[14]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[15] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[15]_i_2_n_0 ),
        .Q(DMA_BNUM[15]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[1] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[1]_i_1_n_0 ),
        .Q(DMA_BNUM[1]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[2] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[2]_i_1_n_0 ),
        .Q(DMA_BNUM[2]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[3] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[3]_i_1_n_0 ),
        .Q(DMA_BNUM[3]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[4] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[4]_i_1_n_0 ),
        .Q(DMA_BNUM[4]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[5] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[5]_i_1_n_0 ),
        .Q(DMA_BNUM[5]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[6] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[6]_i_1_n_0 ),
        .Q(DMA_BNUM[6]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[7] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[7]_i_1_n_0 ),
        .Q(DMA_BNUM[7]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[8] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[8]_i_1_n_0 ),
        .Q(DMA_BNUM[8]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_BNUM_reg[9] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_BNUM[9]_i_1_n_0 ),
        .Q(DMA_BNUM[9]));
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[0]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[0] ),
        .O(\DMA_CHUNK[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[1]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[1] ),
        .O(\DMA_CHUNK[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[2]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[2] ),
        .O(\DMA_CHUNK[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[3]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[3] ),
        .O(\DMA_CHUNK[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[4]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[4] ),
        .O(\DMA_CHUNK[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[5]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[5] ),
        .O(\DMA_CHUNK[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[6]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[6] ),
        .O(\DMA_CHUNK[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \DMA_CHUNK[7]_i_1 
       (.I0(csr_ctl_en_reg_0),
        .I1(\csr_num_chunk_reg_n_0_[7] ),
        .O(\DMA_CHUNK[7]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[0] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[0]_i_1_n_0 ),
        .Q(DMA_CHUNK[0]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[1] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[1]_i_1_n_0 ),
        .Q(DMA_CHUNK[1]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[2] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[2]_i_1_n_0 ),
        .Q(DMA_CHUNK[2]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[3] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[3]_i_1_n_0 ),
        .Q(DMA_CHUNK[3]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[4] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[4]_i_1_n_0 ),
        .Q(DMA_CHUNK[4]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[5] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[5]_i_1_n_0 ),
        .Q(DMA_CHUNK[5]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[6] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[6]_i_1_n_0 ),
        .Q(DMA_CHUNK[6]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CHUNK_reg[7] 
       (.C(PCLK),
        .CE(\DMA_BNUM[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CHUNK[7]_i_1_n_0 ),
        .Q(DMA_CHUNK[7]));
  LUT4 #(
    .INIT(16'hD010)) 
    \DMA_CNT[0]_i_1 
       (.I0(\DMA_CNT_reg_n_0_[0] ),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[10]_i_1 
       (.I0(clr_go3_carry__1_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[11]_i_1 
       (.I0(clr_go3_carry__1_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[12]_i_1 
       (.I0(clr_go3_carry__1_n_4),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[13]_i_1 
       (.I0(clr_go3_carry__2_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[14]_i_1 
       (.I0(clr_go3_carry__2_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[15]_i_1 
       (.I0(clr_go3_carry__2_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[16]_i_1 
       (.I0(clr_go3_carry__2_n_4),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[17]_i_1 
       (.I0(clr_go3_carry__3_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[18]_i_1 
       (.I0(clr_go3_carry__3_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[19]_i_1 
       (.I0(clr_go3_carry__3_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[1]_i_1 
       (.I0(clr_go3_carry_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[20]_i_1 
       (.I0(clr_go3_carry__3_n_4),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[21]_i_1 
       (.I0(clr_go3_carry__4_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[22]_i_1 
       (.I0(clr_go3_carry__4_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[23]_i_1 
       (.I0(clr_go3_carry__4_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[24]_i_1 
       (.I0(clr_go3_carry__4_n_4),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[25]_i_1 
       (.I0(clr_go3_carry__5_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[26]_i_1 
       (.I0(clr_go3_carry__5_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[27]_i_1 
       (.I0(clr_go3_carry__5_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[28]_i_1 
       (.I0(clr_go3_carry__5_n_4),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[29]_i_1 
       (.I0(clr_go3_carry__6_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[2]_i_1 
       (.I0(clr_go3_carry_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[30]_i_1 
       (.I0(clr_go3_carry__6_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[30]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFBFBBBFB)) 
    \DMA_CNT[31]_i_1 
       (.I0(\DMA_CNT[31]_i_3_n_0 ),
        .I1(csr_ctl_en_reg_0),
        .I2(\DMA_CNT[31]_i_4_n_0 ),
        .I3(\DMA_CNT[31]_i_5_n_0 ),
        .I4(clr_go2_carry__2_n_0),
        .O(\DMA_CNT[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \DMA_CNT[31]_i_10 
       (.I0(\csr_count_reg_n_0_[18] ),
        .I1(\csr_count_reg_n_0_[19] ),
        .I2(\csr_count_reg_n_0_[16] ),
        .I3(\csr_count_reg_n_0_[17] ),
        .I4(\DMA_CNT[31]_i_14_n_0 ),
        .O(\DMA_CNT[31]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \DMA_CNT[31]_i_11 
       (.I0(\csr_count_reg_n_0_[13] ),
        .I1(\csr_count_reg_n_0_[12] ),
        .I2(\csr_count_reg_n_0_[15] ),
        .I3(\csr_count_reg_n_0_[14] ),
        .O(\DMA_CNT[31]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \DMA_CNT[31]_i_12 
       (.I0(\csr_count_reg_n_0_[5] ),
        .I1(\csr_count_reg_n_0_[4] ),
        .I2(\csr_count_reg_n_0_[7] ),
        .I3(\csr_count_reg_n_0_[6] ),
        .O(\DMA_CNT[31]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \DMA_CNT[31]_i_13 
       (.I0(\csr_count_reg_n_0_[29] ),
        .I1(\csr_count_reg_n_0_[28] ),
        .I2(\csr_count_reg_n_0_[31] ),
        .I3(\csr_count_reg_n_0_[30] ),
        .O(\DMA_CNT[31]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \DMA_CNT[31]_i_14 
       (.I0(\csr_count_reg_n_0_[21] ),
        .I1(\csr_count_reg_n_0_[20] ),
        .I2(\csr_count_reg_n_0_[23] ),
        .I3(\csr_count_reg_n_0_[22] ),
        .O(\DMA_CNT[31]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[31]_i_2 
       (.I0(clr_go3_carry__6_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[31]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h1000)) 
    \DMA_CNT[31]_i_3 
       (.I0(csr_num_go),
        .I1(state[2]),
        .I2(state[1]),
        .I3(state[0]),
        .O(\DMA_CNT[31]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0400000000000000)) 
    \DMA_CNT[31]_i_4 
       (.I0(state[2]),
        .I1(csr_num_cont),
        .I2(DMA_DONE),
        .I3(clr_go0),
        .I4(state[1]),
        .I5(\DMA_CNT[31]_i_6_n_0 ),
        .O(\DMA_CNT[31]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \DMA_CNT[31]_i_5 
       (.I0(\DMA_CNT[31]_i_7_n_0 ),
        .I1(\DMA_CNT[31]_i_8_n_0 ),
        .I2(\DMA_CNT[31]_i_9_n_0 ),
        .I3(\DMA_CNT[31]_i_10_n_0 ),
        .O(\DMA_CNT[31]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \DMA_CNT[31]_i_6 
       (.I0(csr_num_go),
        .I1(state[0]),
        .O(\DMA_CNT[31]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \DMA_CNT[31]_i_7 
       (.I0(\csr_count_reg_n_0_[10] ),
        .I1(\csr_count_reg_n_0_[11] ),
        .I2(\csr_count_reg_n_0_[8] ),
        .I3(\csr_count_reg_n_0_[9] ),
        .I4(\DMA_CNT[31]_i_11_n_0 ),
        .O(\DMA_CNT[31]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \DMA_CNT[31]_i_8 
       (.I0(\csr_count_reg_n_0_[2] ),
        .I1(\csr_count_reg_n_0_[3] ),
        .I2(\csr_count_reg_n_0_[0] ),
        .I3(\csr_count_reg_n_0_[1] ),
        .I4(\DMA_CNT[31]_i_12_n_0 ),
        .O(\DMA_CNT[31]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \DMA_CNT[31]_i_9 
       (.I0(\csr_count_reg_n_0_[26] ),
        .I1(\csr_count_reg_n_0_[27] ),
        .I2(\csr_count_reg_n_0_[24] ),
        .I3(\csr_count_reg_n_0_[25] ),
        .I4(\DMA_CNT[31]_i_13_n_0 ),
        .O(\DMA_CNT[31]_i_9_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[3]_i_1 
       (.I0(clr_go3_carry_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[4]_i_1 
       (.I0(clr_go3_carry_n_4),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[5]_i_1 
       (.I0(clr_go3_carry__0_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[6]_i_1 
       (.I0(clr_go3_carry__0_n_6),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[7]_i_1 
       (.I0(clr_go3_carry__0_n_5),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[8]_i_1 
       (.I0(clr_go3_carry__0_n_4),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hE020)) 
    \DMA_CNT[9]_i_1 
       (.I0(clr_go3_carry__1_n_7),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .O(\DMA_CNT[9]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[0] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[0]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[10] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[10]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[11] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[11]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[12] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[12]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[13] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[13]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[14] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[14]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[15] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[15]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[16] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[16]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[17] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[17]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[18] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[18]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[19] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[19]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[1] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[1]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[20] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[20]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[21] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[21]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[21] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[22] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[22]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[23] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[23]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[24] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[24]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[25] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[25]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[26] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[26]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[26] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[27] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[27]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[28] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[28]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[29] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[29]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[29] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[2] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[2]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[30] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[30]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[30] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[31] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[31]_i_2_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[31] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[3] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[3]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[4] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[4]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[5] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[5]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[6] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[6]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[7] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[7]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[8] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[8]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_CNT_reg[9] 
       (.C(PCLK),
        .CE(\DMA_CNT[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_CNT[9]_i_1_n_0 ),
        .Q(\DMA_CNT_reg_n_0_[9] ));
  LUT6 #(
    .INIT(64'h3020FFFF30200000)) 
    DMA_GO_i_1
       (.I0(state[1]),
        .I1(state[0]),
        .I2(csr_ctl_en_reg_0),
        .I3(csr_num_go),
        .I4(DMA_GO_i_2_n_0),
        .I5(DMA_GO),
        .O(DMA_GO_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000002)) 
    DMA_GO_i_2
       (.I0(csr_num_go),
        .I1(state[0]),
        .I2(DMA_DONE),
        .I3(state[2]),
        .I4(clr_go0),
        .I5(\DMA_SRC[31]_i_1_n_0 ),
        .O(DMA_GO_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    DMA_GO_reg
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(DMA_GO_i_1_n_0),
        .Q(DMA_GO));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[0]_i_1 
       (.I0(\DMA_SRC_reg[3]_i_2_n_7 ),
        .I1(\csr_start_reg_n_0_[0] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[10]_i_1 
       (.I0(\DMA_SRC_reg[11]_i_2_n_5 ),
        .I1(\csr_start_reg_n_0_[10] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[11]_i_1 
       (.I0(\DMA_SRC_reg[11]_i_2_n_4 ),
        .I1(\csr_start_reg_n_0_[11] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[11]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[11]_i_3 
       (.I0(DMA_SRC[11]),
        .I1(csr_num_byte[11]),
        .O(\DMA_SRC[11]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[11]_i_4 
       (.I0(DMA_SRC[10]),
        .I1(csr_num_byte[10]),
        .O(\DMA_SRC[11]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[11]_i_5 
       (.I0(DMA_SRC[9]),
        .I1(csr_num_byte[9]),
        .O(\DMA_SRC[11]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[11]_i_6 
       (.I0(DMA_SRC[8]),
        .I1(csr_num_byte[8]),
        .O(\DMA_SRC[11]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[12]_i_1 
       (.I0(\DMA_SRC_reg[15]_i_2_n_7 ),
        .I1(\csr_start_reg_n_0_[12] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[13]_i_1 
       (.I0(\DMA_SRC_reg[15]_i_2_n_6 ),
        .I1(\csr_start_reg_n_0_[13] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[14]_i_1 
       (.I0(\DMA_SRC_reg[15]_i_2_n_5 ),
        .I1(\csr_start_reg_n_0_[14] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[15]_i_1 
       (.I0(\DMA_SRC_reg[15]_i_2_n_4 ),
        .I1(\csr_start_reg_n_0_[15] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[15]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[15]_i_3 
       (.I0(DMA_SRC[15]),
        .I1(csr_num_byte[15]),
        .O(\DMA_SRC[15]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[15]_i_4 
       (.I0(DMA_SRC[14]),
        .I1(csr_num_byte[14]),
        .O(\DMA_SRC[15]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[15]_i_5 
       (.I0(DMA_SRC[13]),
        .I1(csr_num_byte[13]),
        .O(\DMA_SRC[15]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[15]_i_6 
       (.I0(DMA_SRC[12]),
        .I1(csr_num_byte[12]),
        .O(\DMA_SRC[15]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[16]_i_1 
       (.I0(\DMA_SRC_reg[19]_i_2_n_7 ),
        .I1(\csr_start_reg_n_0_[16] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[17]_i_1 
       (.I0(\DMA_SRC_reg[19]_i_2_n_6 ),
        .I1(\csr_start_reg_n_0_[17] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[18]_i_1 
       (.I0(\DMA_SRC_reg[19]_i_2_n_5 ),
        .I1(\csr_start_reg_n_0_[18] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[19]_i_1 
       (.I0(\DMA_SRC_reg[19]_i_2_n_4 ),
        .I1(\csr_start_reg_n_0_[19] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[1]_i_1 
       (.I0(\DMA_SRC_reg[3]_i_2_n_6 ),
        .I1(\csr_start_reg_n_0_[1] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[20]_i_1 
       (.I0(\DMA_SRC_reg[23]_i_2_n_7 ),
        .I1(\csr_start_reg_n_0_[20] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[21]_i_1 
       (.I0(\DMA_SRC_reg[23]_i_2_n_6 ),
        .I1(\csr_start_reg_n_0_[21] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[22]_i_1 
       (.I0(\DMA_SRC_reg[23]_i_2_n_5 ),
        .I1(\csr_start_reg_n_0_[22] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[23]_i_1 
       (.I0(\DMA_SRC_reg[23]_i_2_n_4 ),
        .I1(\csr_start_reg_n_0_[23] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[24]_i_1 
       (.I0(\DMA_SRC_reg[27]_i_2_n_7 ),
        .I1(\csr_start_reg_n_0_[24] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[25]_i_1 
       (.I0(\DMA_SRC_reg[27]_i_2_n_6 ),
        .I1(\csr_start_reg_n_0_[25] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[26]_i_1 
       (.I0(\DMA_SRC_reg[27]_i_2_n_5 ),
        .I1(\csr_start_reg_n_0_[26] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[27]_i_1 
       (.I0(\DMA_SRC_reg[27]_i_2_n_4 ),
        .I1(\csr_start_reg_n_0_[27] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[28]_i_1 
       (.I0(\DMA_SRC_reg[31]_i_3_n_7 ),
        .I1(\csr_start_reg_n_0_[28] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[29]_i_1 
       (.I0(\DMA_SRC_reg[31]_i_3_n_6 ),
        .I1(\csr_start_reg_n_0_[29] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[2]_i_1 
       (.I0(\DMA_SRC_reg[3]_i_2_n_5 ),
        .I1(\csr_start_reg_n_0_[2] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[30]_i_1 
       (.I0(\DMA_SRC_reg[31]_i_3_n_5 ),
        .I1(\csr_start_reg_n_0_[30] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000B8FFFFFFFF)) 
    \DMA_SRC[31]_i_1 
       (.I0(DMA_DONE),
        .I1(state[0]),
        .I2(csr_num_go),
        .I3(state[1]),
        .I4(state[2]),
        .I5(csr_ctl_en_reg_0),
        .O(\DMA_SRC[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[31]_i_2 
       (.I0(\DMA_SRC_reg[31]_i_3_n_4 ),
        .I1(\csr_start_reg_n_0_[31] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[31]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[3]_i_1 
       (.I0(\DMA_SRC_reg[3]_i_2_n_4 ),
        .I1(\csr_start_reg_n_0_[3] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[3]_i_3 
       (.I0(DMA_SRC[3]),
        .I1(csr_num_byte[3]),
        .O(\DMA_SRC[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[3]_i_4 
       (.I0(DMA_SRC[2]),
        .I1(csr_num_byte[2]),
        .O(\DMA_SRC[3]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[3]_i_5 
       (.I0(DMA_SRC[1]),
        .I1(csr_num_byte[1]),
        .O(\DMA_SRC[3]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[3]_i_6 
       (.I0(DMA_SRC[0]),
        .I1(csr_num_byte[0]),
        .O(\DMA_SRC[3]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[4]_i_1 
       (.I0(\DMA_SRC_reg[7]_i_2_n_7 ),
        .I1(\csr_start_reg_n_0_[4] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[5]_i_1 
       (.I0(\DMA_SRC_reg[7]_i_2_n_6 ),
        .I1(\csr_start_reg_n_0_[5] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[6]_i_1 
       (.I0(\DMA_SRC_reg[7]_i_2_n_5 ),
        .I1(\csr_start_reg_n_0_[6] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[7]_i_1 
       (.I0(\DMA_SRC_reg[7]_i_2_n_4 ),
        .I1(\csr_start_reg_n_0_[7] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[7]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[7]_i_3 
       (.I0(DMA_SRC[7]),
        .I1(csr_num_byte[7]),
        .O(\DMA_SRC[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[7]_i_4 
       (.I0(DMA_SRC[6]),
        .I1(csr_num_byte[6]),
        .O(\DMA_SRC[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[7]_i_5 
       (.I0(DMA_SRC[5]),
        .I1(csr_num_byte[5]),
        .O(\DMA_SRC[7]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \DMA_SRC[7]_i_6 
       (.I0(DMA_SRC[4]),
        .I1(csr_num_byte[4]),
        .O(\DMA_SRC[7]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[8]_i_1 
       (.I0(\DMA_SRC_reg[11]_i_2_n_7 ),
        .I1(\csr_start_reg_n_0_[8] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hA0C0)) 
    \DMA_SRC[9]_i_1 
       (.I0(\DMA_SRC_reg[11]_i_2_n_6 ),
        .I1(\csr_start_reg_n_0_[9] ),
        .I2(csr_ctl_en_reg_0),
        .I3(state[0]),
        .O(\DMA_SRC[9]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[0] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[0]_i_1_n_0 ),
        .Q(DMA_SRC[0]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[10] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[10]_i_1_n_0 ),
        .Q(DMA_SRC[10]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[11] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[11]_i_1_n_0 ),
        .Q(DMA_SRC[11]));
  CARRY4 \DMA_SRC_reg[11]_i_2 
       (.CI(\DMA_SRC_reg[7]_i_2_n_0 ),
        .CO({\DMA_SRC_reg[11]_i_2_n_0 ,\DMA_SRC_reg[11]_i_2_n_1 ,\DMA_SRC_reg[11]_i_2_n_2 ,\DMA_SRC_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(DMA_SRC[11:8]),
        .O({\DMA_SRC_reg[11]_i_2_n_4 ,\DMA_SRC_reg[11]_i_2_n_5 ,\DMA_SRC_reg[11]_i_2_n_6 ,\DMA_SRC_reg[11]_i_2_n_7 }),
        .S({\DMA_SRC[11]_i_3_n_0 ,\DMA_SRC[11]_i_4_n_0 ,\DMA_SRC[11]_i_5_n_0 ,\DMA_SRC[11]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[12] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[12]_i_1_n_0 ),
        .Q(DMA_SRC[12]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[13] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[13]_i_1_n_0 ),
        .Q(DMA_SRC[13]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[14] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[14]_i_1_n_0 ),
        .Q(DMA_SRC[14]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[15] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[15]_i_1_n_0 ),
        .Q(DMA_SRC[15]));
  CARRY4 \DMA_SRC_reg[15]_i_2 
       (.CI(\DMA_SRC_reg[11]_i_2_n_0 ),
        .CO({\DMA_SRC_reg[15]_i_2_n_0 ,\DMA_SRC_reg[15]_i_2_n_1 ,\DMA_SRC_reg[15]_i_2_n_2 ,\DMA_SRC_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(DMA_SRC[15:12]),
        .O({\DMA_SRC_reg[15]_i_2_n_4 ,\DMA_SRC_reg[15]_i_2_n_5 ,\DMA_SRC_reg[15]_i_2_n_6 ,\DMA_SRC_reg[15]_i_2_n_7 }),
        .S({\DMA_SRC[15]_i_3_n_0 ,\DMA_SRC[15]_i_4_n_0 ,\DMA_SRC[15]_i_5_n_0 ,\DMA_SRC[15]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[16] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[16]_i_1_n_0 ),
        .Q(DMA_SRC[16]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[17] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[17]_i_1_n_0 ),
        .Q(DMA_SRC[17]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[18] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[18]_i_1_n_0 ),
        .Q(DMA_SRC[18]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[19] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[19]_i_1_n_0 ),
        .Q(DMA_SRC[19]));
  CARRY4 \DMA_SRC_reg[19]_i_2 
       (.CI(\DMA_SRC_reg[15]_i_2_n_0 ),
        .CO({\DMA_SRC_reg[19]_i_2_n_0 ,\DMA_SRC_reg[19]_i_2_n_1 ,\DMA_SRC_reg[19]_i_2_n_2 ,\DMA_SRC_reg[19]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\DMA_SRC_reg[19]_i_2_n_4 ,\DMA_SRC_reg[19]_i_2_n_5 ,\DMA_SRC_reg[19]_i_2_n_6 ,\DMA_SRC_reg[19]_i_2_n_7 }),
        .S(DMA_SRC[19:16]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[1] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[1]_i_1_n_0 ),
        .Q(DMA_SRC[1]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[20] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[20]_i_1_n_0 ),
        .Q(DMA_SRC[20]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[21] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[21]_i_1_n_0 ),
        .Q(DMA_SRC[21]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[22] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[22]_i_1_n_0 ),
        .Q(DMA_SRC[22]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[23] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[23]_i_1_n_0 ),
        .Q(DMA_SRC[23]));
  CARRY4 \DMA_SRC_reg[23]_i_2 
       (.CI(\DMA_SRC_reg[19]_i_2_n_0 ),
        .CO({\DMA_SRC_reg[23]_i_2_n_0 ,\DMA_SRC_reg[23]_i_2_n_1 ,\DMA_SRC_reg[23]_i_2_n_2 ,\DMA_SRC_reg[23]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\DMA_SRC_reg[23]_i_2_n_4 ,\DMA_SRC_reg[23]_i_2_n_5 ,\DMA_SRC_reg[23]_i_2_n_6 ,\DMA_SRC_reg[23]_i_2_n_7 }),
        .S(DMA_SRC[23:20]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[24] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[24]_i_1_n_0 ),
        .Q(DMA_SRC[24]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[25] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[25]_i_1_n_0 ),
        .Q(DMA_SRC[25]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[26] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[26]_i_1_n_0 ),
        .Q(DMA_SRC[26]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[27] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[27]_i_1_n_0 ),
        .Q(DMA_SRC[27]));
  CARRY4 \DMA_SRC_reg[27]_i_2 
       (.CI(\DMA_SRC_reg[23]_i_2_n_0 ),
        .CO({\DMA_SRC_reg[27]_i_2_n_0 ,\DMA_SRC_reg[27]_i_2_n_1 ,\DMA_SRC_reg[27]_i_2_n_2 ,\DMA_SRC_reg[27]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\DMA_SRC_reg[27]_i_2_n_4 ,\DMA_SRC_reg[27]_i_2_n_5 ,\DMA_SRC_reg[27]_i_2_n_6 ,\DMA_SRC_reg[27]_i_2_n_7 }),
        .S(DMA_SRC[27:24]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[28] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[28]_i_1_n_0 ),
        .Q(DMA_SRC[28]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[29] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[29]_i_1_n_0 ),
        .Q(DMA_SRC[29]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[2] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[2]_i_1_n_0 ),
        .Q(DMA_SRC[2]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[30] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[30]_i_1_n_0 ),
        .Q(DMA_SRC[30]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[31] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[31]_i_2_n_0 ),
        .Q(DMA_SRC[31]));
  CARRY4 \DMA_SRC_reg[31]_i_3 
       (.CI(\DMA_SRC_reg[27]_i_2_n_0 ),
        .CO({\NLW_DMA_SRC_reg[31]_i_3_CO_UNCONNECTED [3],\DMA_SRC_reg[31]_i_3_n_1 ,\DMA_SRC_reg[31]_i_3_n_2 ,\DMA_SRC_reg[31]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\DMA_SRC_reg[31]_i_3_n_4 ,\DMA_SRC_reg[31]_i_3_n_5 ,\DMA_SRC_reg[31]_i_3_n_6 ,\DMA_SRC_reg[31]_i_3_n_7 }),
        .S(DMA_SRC[31:28]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[3] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[3]_i_1_n_0 ),
        .Q(DMA_SRC[3]));
  CARRY4 \DMA_SRC_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\DMA_SRC_reg[3]_i_2_n_0 ,\DMA_SRC_reg[3]_i_2_n_1 ,\DMA_SRC_reg[3]_i_2_n_2 ,\DMA_SRC_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(DMA_SRC[3:0]),
        .O({\DMA_SRC_reg[3]_i_2_n_4 ,\DMA_SRC_reg[3]_i_2_n_5 ,\DMA_SRC_reg[3]_i_2_n_6 ,\DMA_SRC_reg[3]_i_2_n_7 }),
        .S({\DMA_SRC[3]_i_3_n_0 ,\DMA_SRC[3]_i_4_n_0 ,\DMA_SRC[3]_i_5_n_0 ,\DMA_SRC[3]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[4] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[4]_i_1_n_0 ),
        .Q(DMA_SRC[4]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[5] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[5]_i_1_n_0 ),
        .Q(DMA_SRC[5]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[6] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[6]_i_1_n_0 ),
        .Q(DMA_SRC[6]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[7] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[7]_i_1_n_0 ),
        .Q(DMA_SRC[7]));
  CARRY4 \DMA_SRC_reg[7]_i_2 
       (.CI(\DMA_SRC_reg[3]_i_2_n_0 ),
        .CO({\DMA_SRC_reg[7]_i_2_n_0 ,\DMA_SRC_reg[7]_i_2_n_1 ,\DMA_SRC_reg[7]_i_2_n_2 ,\DMA_SRC_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(DMA_SRC[7:4]),
        .O({\DMA_SRC_reg[7]_i_2_n_4 ,\DMA_SRC_reg[7]_i_2_n_5 ,\DMA_SRC_reg[7]_i_2_n_6 ,\DMA_SRC_reg[7]_i_2_n_7 }),
        .S({\DMA_SRC[7]_i_3_n_0 ,\DMA_SRC[7]_i_4_n_0 ,\DMA_SRC[7]_i_5_n_0 ,\DMA_SRC[7]_i_6_n_0 }));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[8] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[8]_i_1_n_0 ),
        .Q(DMA_SRC[8]));
  FDCE #(
    .INIT(1'b0)) 
    \DMA_SRC_reg[9] 
       (.C(PCLK),
        .CE(\DMA_SRC[31]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\DMA_SRC[9]_i_1_n_0 ),
        .Q(DMA_SRC[9]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEA)) 
    \T_RDATA[0]_i_1 
       (.I0(\T_RDATA[0]_i_2_n_0 ),
        .I1(\T_RDATA[0]_i_3_n_0 ),
        .I2(\csr_start_reg_n_0_[0] ),
        .I3(\T_RDATA[0]_i_4_n_0 ),
        .I4(\T_RDATA[0]_i_5_n_0 ),
        .I5(\T_RDATA[0]_i_6_n_0 ),
        .O(\T_RDATA[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[0]_i_2 
       (.I0(\T_RDATA[31]_i_8_n_0 ),
        .I1(p_1_in[0]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[0] ),
        .I4(\csr_count_reg_n_0_[0] ),
        .I5(\T_RDATA[29]_i_2_n_0 ),
        .O(\T_RDATA[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    \T_RDATA[0]_i_3 
       (.I0(PADDR[6]),
        .I1(PADDR[2]),
        .I2(PADDR[3]),
        .I3(PADDR[4]),
        .I4(\T_RDATA[31]_i_9_n_0 ),
        .O(\T_RDATA[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000002300)) 
    \T_RDATA[0]_i_4 
       (.I0(p_5_in),
        .I1(PADDR[6]),
        .I2(PADDR[4]),
        .I3(\T_RDATA[31]_i_9_n_0 ),
        .I4(PADDR[5]),
        .I5(\T_RDATA[0]_i_7_n_0 ),
        .O(\T_RDATA[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[0]_i_5 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[0]),
        .O(\T_RDATA[0]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[0]_i_6 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[0]),
        .O(\T_RDATA[0]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \T_RDATA[0]_i_7 
       (.I0(PADDR[2]),
        .I1(PADDR[3]),
        .O(\T_RDATA[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFF2)) 
    \T_RDATA[10]_i_1 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(PADDR[6]),
        .I2(\T_RDATA[10]_i_2_n_0 ),
        .I3(\T_RDATA[10]_i_3_n_0 ),
        .O(\T_RDATA[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[10]_i_2 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[10]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[10] ),
        .I4(p_1_in[10]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[10]_i_3 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[10] ),
        .I2(\T_RDATA[0]_i_3_n_0 ),
        .I3(\csr_start_reg_n_0_[10] ),
        .I4(p_3_in[10]),
        .I5(\T_RDATA[31]_i_5_n_0 ),
        .O(\T_RDATA[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[11]_i_1 
       (.I0(\T_RDATA[11]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[11] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[11] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[11]_i_3_n_0 ),
        .O(\T_RDATA[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[11]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[11]),
        .O(\T_RDATA[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[11]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[11]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[11] ),
        .I4(p_1_in[11]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[12]_i_1 
       (.I0(\T_RDATA[12]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[12] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[12] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[12]_i_3_n_0 ),
        .O(\T_RDATA[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[12]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[12]),
        .O(\T_RDATA[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[12]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[12]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[12] ),
        .I4(p_1_in[12]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[13]_i_1 
       (.I0(\T_RDATA[13]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[13] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[13] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[13]_i_3_n_0 ),
        .O(\T_RDATA[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[13]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[13]),
        .O(\T_RDATA[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[13]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[13]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[13] ),
        .I4(p_1_in[13]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[14]_i_1 
       (.I0(\T_RDATA[14]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[14] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[14] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[14]_i_3_n_0 ),
        .O(\T_RDATA[14]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[14]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[14]),
        .O(\T_RDATA[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[14]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[14]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[14] ),
        .I4(p_1_in[14]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[14]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[15]_i_1 
       (.I0(\T_RDATA[15]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[15] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[15] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[15]_i_3_n_0 ),
        .O(\T_RDATA[15]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[15]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[15]),
        .O(\T_RDATA[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[15]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[15]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[15] ),
        .I4(p_1_in[15]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[15]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFF2)) 
    \T_RDATA[16]_i_1 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(PADDR[6]),
        .I2(\T_RDATA[16]_i_2_n_0 ),
        .I3(\T_RDATA[16]_i_3_n_0 ),
        .O(\T_RDATA[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[16]_i_2 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[0] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[16] ),
        .I4(p_1_in[16]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[16]_i_3 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[16] ),
        .I2(\T_RDATA[0]_i_3_n_0 ),
        .I3(\csr_start_reg_n_0_[16] ),
        .I4(p_3_in[16]),
        .I5(\T_RDATA[31]_i_5_n_0 ),
        .O(\T_RDATA[16]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[17]_i_1 
       (.I0(\T_RDATA[17]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[17] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[17] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[17]_i_3_n_0 ),
        .O(\T_RDATA[17]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[17]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[17]),
        .O(\T_RDATA[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[17]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[1] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[17] ),
        .I4(p_1_in[17]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[17]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[18]_i_1 
       (.I0(\T_RDATA[18]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[18] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[18] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[18]_i_3_n_0 ),
        .O(\T_RDATA[18]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[18]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[18]),
        .O(\T_RDATA[18]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[18]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[2] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[18] ),
        .I4(p_1_in[18]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[18]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFF2)) 
    \T_RDATA[19]_i_1 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(PADDR[6]),
        .I2(\T_RDATA[19]_i_2_n_0 ),
        .I3(\T_RDATA[19]_i_3_n_0 ),
        .O(\T_RDATA[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[19]_i_2 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[3] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[19] ),
        .I4(p_1_in[19]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[19]_i_3 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[19] ),
        .I2(\T_RDATA[0]_i_3_n_0 ),
        .I3(\csr_start_reg_n_0_[19] ),
        .I4(p_3_in[19]),
        .I5(\T_RDATA[31]_i_5_n_0 ),
        .O(\T_RDATA[19]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[1]_i_1 
       (.I0(\T_RDATA[1]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[1] ),
        .I2(\T_RDATA[31]_i_4_n_0 ),
        .I3(\T_RDATA[31]_i_5_n_0 ),
        .I4(p_3_in[1]),
        .I5(\T_RDATA[1]_i_3_n_0 ),
        .O(\T_RDATA[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \T_RDATA[1]_i_2 
       (.I0(\csr_end_reg_n_0_[1] ),
        .I1(\T_RDATA[31]_i_7_n_0 ),
        .I2(p_1_in[1]),
        .I3(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[1]_i_3 
       (.I0(\csr_start_reg_n_0_[1] ),
        .I1(\T_RDATA[30]_i_3_n_0 ),
        .I2(\T_RDATA[1]_i_4_n_0 ),
        .I3(\T_RDATA[31]_i_9_n_0 ),
        .I4(\T_RDATA[31]_i_11_n_0 ),
        .I5(csr_num_byte[1]),
        .O(\T_RDATA[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \T_RDATA[1]_i_4 
       (.I0(PADDR[4]),
        .I1(IRQ),
        .I2(PADDR[6]),
        .I3(PADDR[3]),
        .I4(PADDR[2]),
        .I5(PADDR[5]),
        .O(\T_RDATA[1]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFF2)) 
    \T_RDATA[20]_i_1 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(PADDR[6]),
        .I2(\T_RDATA[20]_i_2_n_0 ),
        .I3(\T_RDATA[20]_i_3_n_0 ),
        .O(\T_RDATA[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[20]_i_2 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[4] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[20] ),
        .I4(p_1_in[20]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[20]_i_3 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[20] ),
        .I2(\T_RDATA[0]_i_3_n_0 ),
        .I3(\csr_start_reg_n_0_[20] ),
        .I4(p_3_in[20]),
        .I5(\T_RDATA[31]_i_5_n_0 ),
        .O(\T_RDATA[20]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[21]_i_1 
       (.I0(\T_RDATA[21]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[21] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[21] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[21]_i_3_n_0 ),
        .O(\T_RDATA[21]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[21]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[21]),
        .O(\T_RDATA[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[21]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[5] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[21] ),
        .I4(p_1_in[21]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[21]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[22]_i_1 
       (.I0(\T_RDATA[22]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[22] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[22] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[22]_i_3_n_0 ),
        .O(\T_RDATA[22]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[22]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[22]),
        .O(\T_RDATA[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[22]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[6] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[22] ),
        .I4(p_1_in[22]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[22]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[23]_i_1 
       (.I0(\T_RDATA[23]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[23] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[23] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[23]_i_3_n_0 ),
        .O(\T_RDATA[23]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[23]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[23]),
        .O(\T_RDATA[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[23]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(\csr_num_chunk_reg_n_0_[7] ),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[23] ),
        .I4(p_1_in[23]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[23]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[24]_i_1 
       (.I0(\T_RDATA[24]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[24] ),
        .I2(\T_RDATA[31]_i_4_n_0 ),
        .I3(\T_RDATA[30]_i_3_n_0 ),
        .I4(\csr_start_reg_n_0_[24] ),
        .I5(\T_RDATA[24]_i_3_n_0 ),
        .O(\T_RDATA[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \T_RDATA[24]_i_2 
       (.I0(\csr_end_reg_n_0_[24] ),
        .I1(\T_RDATA[31]_i_7_n_0 ),
        .I2(p_1_in[24]),
        .I3(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[24]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[24]_i_3 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[24]),
        .O(\T_RDATA[24]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[25]_i_1 
       (.I0(\T_RDATA[25]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[25] ),
        .I2(\T_RDATA[31]_i_4_n_0 ),
        .I3(\T_RDATA[30]_i_3_n_0 ),
        .I4(\csr_start_reg_n_0_[25] ),
        .I5(\T_RDATA[25]_i_3_n_0 ),
        .O(\T_RDATA[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \T_RDATA[25]_i_2 
       (.I0(\csr_end_reg_n_0_[25] ),
        .I1(\T_RDATA[31]_i_7_n_0 ),
        .I2(p_1_in[25]),
        .I3(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[25]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[25]_i_3 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[25]),
        .O(\T_RDATA[25]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[26]_i_1 
       (.I0(\T_RDATA[26]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[26] ),
        .I2(\T_RDATA[31]_i_4_n_0 ),
        .I3(\T_RDATA[30]_i_3_n_0 ),
        .I4(\csr_start_reg_n_0_[26] ),
        .I5(\T_RDATA[26]_i_3_n_0 ),
        .O(\T_RDATA[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \T_RDATA[26]_i_2 
       (.I0(\csr_end_reg_n_0_[26] ),
        .I1(\T_RDATA[31]_i_7_n_0 ),
        .I2(p_1_in[26]),
        .I3(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[26]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[26]_i_3 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[26]),
        .O(\T_RDATA[26]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[27]_i_1 
       (.I0(\T_RDATA[27]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[27] ),
        .I2(\T_RDATA[31]_i_4_n_0 ),
        .I3(\T_RDATA[30]_i_3_n_0 ),
        .I4(\csr_start_reg_n_0_[27] ),
        .I5(\T_RDATA[27]_i_3_n_0 ),
        .O(\T_RDATA[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \T_RDATA[27]_i_2 
       (.I0(\csr_end_reg_n_0_[27] ),
        .I1(\T_RDATA[31]_i_7_n_0 ),
        .I2(p_1_in[27]),
        .I3(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[27]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[27]_i_3 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[27]),
        .O(\T_RDATA[27]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[28]_i_1 
       (.I0(\T_RDATA[28]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[28] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[28] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[28]_i_3_n_0 ),
        .O(\T_RDATA[28]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[28]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[28]),
        .O(\T_RDATA[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[28]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_cont),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[28] ),
        .I4(p_1_in[28]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[28]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hFFF2)) 
    \T_RDATA[29]_i_1 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(PADDR[6]),
        .I2(\T_RDATA[29]_i_3_n_0 ),
        .I3(\T_RDATA[29]_i_4_n_0 ),
        .O(\T_RDATA[29]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000004)) 
    \T_RDATA[29]_i_2 
       (.I0(PADDR[4]),
        .I1(\T_RDATA[31]_i_9_n_0 ),
        .I2(PADDR[5]),
        .I3(PADDR[2]),
        .I4(PADDR[3]),
        .O(\T_RDATA[29]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[29]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(DMA_DONE),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[29] ),
        .I4(p_1_in[29]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[29]_i_4 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[29] ),
        .I2(\T_RDATA[0]_i_3_n_0 ),
        .I3(\csr_start_reg_n_0_[29] ),
        .I4(p_3_in[29]),
        .I5(\T_RDATA[31]_i_5_n_0 ),
        .O(\T_RDATA[29]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFF2)) 
    \T_RDATA[2]_i_1 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(PADDR[6]),
        .I2(\T_RDATA[2]_i_2_n_0 ),
        .I3(\T_RDATA[2]_i_3_n_0 ),
        .O(\T_RDATA[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[2]_i_2 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[2]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[2] ),
        .I4(p_1_in[2]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[2]_i_3 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(\csr_count_reg_n_0_[2] ),
        .I2(\T_RDATA[0]_i_3_n_0 ),
        .I3(\csr_start_reg_n_0_[2] ),
        .I4(p_3_in[2]),
        .I5(\T_RDATA[31]_i_5_n_0 ),
        .O(\T_RDATA[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[30]_i_1 
       (.I0(\T_RDATA[30]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[30] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[30] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[30]_i_4_n_0 ),
        .O(\T_RDATA[30]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[30]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[30]),
        .O(\T_RDATA[30]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \T_RDATA[30]_i_3 
       (.I0(\T_RDATA[31]_i_9_n_0 ),
        .I1(PADDR[4]),
        .I2(PADDR[5]),
        .I3(PADDR[6]),
        .I4(PADDR[3]),
        .I5(PADDR[2]),
        .O(\T_RDATA[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[30]_i_4 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(DMA_BUSY),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[30] ),
        .I4(p_1_in[30]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[30]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[31]_i_1 
       (.I0(\T_RDATA[31]_i_3_n_0 ),
        .I1(\csr_count_reg_n_0_[31] ),
        .I2(\T_RDATA[31]_i_4_n_0 ),
        .I3(\T_RDATA[31]_i_5_n_0 ),
        .I4(p_3_in[31]),
        .I5(\T_RDATA[31]_i_6_n_0 ),
        .O(\T_RDATA[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \T_RDATA[31]_i_10 
       (.I0(csr_ctl_en_reg_0),
        .I1(PADDR[4]),
        .I2(PADDR[6]),
        .I3(PADDR[3]),
        .I4(PADDR[2]),
        .I5(PADDR[5]),
        .O(\T_RDATA[31]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \T_RDATA[31]_i_11 
       (.I0(PADDR[2]),
        .I1(PADDR[3]),
        .I2(PADDR[6]),
        .I3(PADDR[5]),
        .I4(PADDR[4]),
        .I5(\T_RDATA[31]_i_9_n_0 ),
        .O(\T_RDATA[31]_i_11_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \T_RDATA[31]_i_2 
       (.I0(PRESETn),
        .O(\T_RDATA[31]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \T_RDATA[31]_i_3 
       (.I0(\csr_end_reg_n_0_[31] ),
        .I1(\T_RDATA[31]_i_7_n_0 ),
        .I2(p_1_in[31]),
        .I3(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[31]_i_4 
       (.I0(\T_RDATA[29]_i_2_n_0 ),
        .I1(PADDR[6]),
        .O(\T_RDATA[31]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000200000)) 
    \T_RDATA[31]_i_5 
       (.I0(PADDR[2]),
        .I1(PADDR[6]),
        .I2(PADDR[5]),
        .I3(PADDR[4]),
        .I4(\T_RDATA[31]_i_9_n_0 ),
        .I5(PADDR[3]),
        .O(\T_RDATA[31]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[31]_i_6 
       (.I0(\csr_start_reg_n_0_[31] ),
        .I1(\T_RDATA[30]_i_3_n_0 ),
        .I2(\T_RDATA[31]_i_10_n_0 ),
        .I3(\T_RDATA[31]_i_9_n_0 ),
        .I4(\T_RDATA[31]_i_11_n_0 ),
        .I5(csr_num_go),
        .O(\T_RDATA[31]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000400000)) 
    \T_RDATA[31]_i_7 
       (.I0(PADDR[2]),
        .I1(PADDR[3]),
        .I2(\T_RDATA[31]_i_9_n_0 ),
        .I3(PADDR[4]),
        .I4(PADDR[5]),
        .I5(PADDR[6]),
        .O(\T_RDATA[31]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    \T_RDATA[31]_i_8 
       (.I0(PADDR[2]),
        .I1(PADDR[6]),
        .I2(PADDR[5]),
        .I3(PADDR[4]),
        .I4(\T_RDATA[31]_i_9_n_0 ),
        .I5(PADDR[3]),
        .O(\T_RDATA[31]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'h00000004)) 
    \T_RDATA[31]_i_9 
       (.I0(PADDR[7]),
        .I1(PSEL),
        .I2(PADDR[0]),
        .I3(PADDR[1]),
        .I4(PWRITE),
        .O(\T_RDATA[31]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[3]_i_1 
       (.I0(\T_RDATA[3]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[3] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[3] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[3]_i_3_n_0 ),
        .O(\T_RDATA[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[3]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[3]),
        .O(\T_RDATA[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[3]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[3]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[3] ),
        .I4(p_1_in[3]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[4]_i_1 
       (.I0(\T_RDATA[4]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[4] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[4] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[4]_i_3_n_0 ),
        .O(\T_RDATA[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[4]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[4]),
        .O(\T_RDATA[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[4]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[4]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[4] ),
        .I4(p_1_in[4]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[5]_i_1 
       (.I0(\T_RDATA[5]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[5] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[5] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[5]_i_3_n_0 ),
        .O(\T_RDATA[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[5]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[5]),
        .O(\T_RDATA[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[5]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[5]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[5] ),
        .I4(p_1_in[5]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[5]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[6]_i_1 
       (.I0(\T_RDATA[6]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[6] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[6] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[6]_i_3_n_0 ),
        .O(\T_RDATA[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[6]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[6]),
        .O(\T_RDATA[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[6]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[6]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[6] ),
        .I4(p_1_in[6]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[7]_i_1 
       (.I0(\T_RDATA[7]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[7] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[7] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[7]_i_3_n_0 ),
        .O(\T_RDATA[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[7]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[7]),
        .O(\T_RDATA[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[7]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[7]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[7] ),
        .I4(p_1_in[7]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[8]_i_1 
       (.I0(\T_RDATA[8]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[8] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[8] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[8]_i_3_n_0 ),
        .O(\T_RDATA[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[8]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[8]),
        .O(\T_RDATA[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[8]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[8]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[8] ),
        .I4(p_1_in[8]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEAEAEA)) 
    \T_RDATA[9]_i_1 
       (.I0(\T_RDATA[9]_i_2_n_0 ),
        .I1(\csr_start_reg_n_0_[9] ),
        .I2(\T_RDATA[30]_i_3_n_0 ),
        .I3(\csr_count_reg_n_0_[9] ),
        .I4(\T_RDATA[31]_i_4_n_0 ),
        .I5(\T_RDATA[9]_i_3_n_0 ),
        .O(\T_RDATA[9]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \T_RDATA[9]_i_2 
       (.I0(\T_RDATA[31]_i_5_n_0 ),
        .I1(p_3_in[9]),
        .O(\T_RDATA[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF888F888F888)) 
    \T_RDATA[9]_i_3 
       (.I0(\T_RDATA[31]_i_11_n_0 ),
        .I1(csr_num_byte[9]),
        .I2(\T_RDATA[31]_i_7_n_0 ),
        .I3(\csr_end_reg_n_0_[9] ),
        .I4(p_1_in[9]),
        .I5(\T_RDATA[31]_i_8_n_0 ),
        .O(\T_RDATA[9]_i_3_n_0 ));
  FDCE \T_RDATA_reg[0] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[0]_i_1_n_0 ),
        .Q(PRDATA[0]));
  FDCE \T_RDATA_reg[10] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[10]_i_1_n_0 ),
        .Q(PRDATA[10]));
  FDCE \T_RDATA_reg[11] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[11]_i_1_n_0 ),
        .Q(PRDATA[11]));
  FDCE \T_RDATA_reg[12] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[12]_i_1_n_0 ),
        .Q(PRDATA[12]));
  FDCE \T_RDATA_reg[13] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[13]_i_1_n_0 ),
        .Q(PRDATA[13]));
  FDCE \T_RDATA_reg[14] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[14]_i_1_n_0 ),
        .Q(PRDATA[14]));
  FDCE \T_RDATA_reg[15] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[15]_i_1_n_0 ),
        .Q(PRDATA[15]));
  FDCE \T_RDATA_reg[16] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[16]_i_1_n_0 ),
        .Q(PRDATA[16]));
  FDCE \T_RDATA_reg[17] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[17]_i_1_n_0 ),
        .Q(PRDATA[17]));
  FDCE \T_RDATA_reg[18] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[18]_i_1_n_0 ),
        .Q(PRDATA[18]));
  FDCE \T_RDATA_reg[19] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[19]_i_1_n_0 ),
        .Q(PRDATA[19]));
  FDCE \T_RDATA_reg[1] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[1]_i_1_n_0 ),
        .Q(PRDATA[1]));
  FDCE \T_RDATA_reg[20] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[20]_i_1_n_0 ),
        .Q(PRDATA[20]));
  FDCE \T_RDATA_reg[21] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[21]_i_1_n_0 ),
        .Q(PRDATA[21]));
  FDCE \T_RDATA_reg[22] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[22]_i_1_n_0 ),
        .Q(PRDATA[22]));
  FDCE \T_RDATA_reg[23] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[23]_i_1_n_0 ),
        .Q(PRDATA[23]));
  FDCE \T_RDATA_reg[24] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[24]_i_1_n_0 ),
        .Q(PRDATA[24]));
  FDCE \T_RDATA_reg[25] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[25]_i_1_n_0 ),
        .Q(PRDATA[25]));
  FDCE \T_RDATA_reg[26] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[26]_i_1_n_0 ),
        .Q(PRDATA[26]));
  FDCE \T_RDATA_reg[27] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[27]_i_1_n_0 ),
        .Q(PRDATA[27]));
  FDCE \T_RDATA_reg[28] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[28]_i_1_n_0 ),
        .Q(PRDATA[28]));
  FDCE \T_RDATA_reg[29] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[29]_i_1_n_0 ),
        .Q(PRDATA[29]));
  FDCE \T_RDATA_reg[2] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[2]_i_1_n_0 ),
        .Q(PRDATA[2]));
  FDCE \T_RDATA_reg[30] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[30]_i_1_n_0 ),
        .Q(PRDATA[30]));
  FDCE \T_RDATA_reg[31] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[31]_i_1_n_0 ),
        .Q(PRDATA[31]));
  FDCE \T_RDATA_reg[3] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[3]_i_1_n_0 ),
        .Q(PRDATA[3]));
  FDCE \T_RDATA_reg[4] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[4]_i_1_n_0 ),
        .Q(PRDATA[4]));
  FDCE \T_RDATA_reg[5] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[5]_i_1_n_0 ),
        .Q(PRDATA[5]));
  FDCE \T_RDATA_reg[6] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[6]_i_1_n_0 ),
        .Q(PRDATA[6]));
  FDCE \T_RDATA_reg[7] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[7]_i_1_n_0 ),
        .Q(PRDATA[7]));
  FDCE \T_RDATA_reg[8] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[8]_i_1_n_0 ),
        .Q(PRDATA[8]));
  FDCE \T_RDATA_reg[9] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\T_RDATA[9]_i_1_n_0 ),
        .Q(PRDATA[9]));
  CARRY4 clr_go0_carry
       (.CI(1'b0),
        .CO({clr_go0_carry_n_0,clr_go0_carry_n_1,clr_go0_carry_n_2,clr_go0_carry_n_3}),
        .CYINIT(1'b1),
        .DI({clr_go0_carry_i_1_n_0,clr_go0_carry_i_2_n_0,clr_go0_carry_i_3_n_0,clr_go0_carry_i_4_n_0}),
        .O(NLW_clr_go0_carry_O_UNCONNECTED[3:0]),
        .S({clr_go0_carry_i_5_n_0,clr_go0_carry_i_6_n_0,clr_go0_carry_i_7_n_0,clr_go0_carry_i_8_n_0}));
  CARRY4 clr_go0_carry__0
       (.CI(clr_go0_carry_n_0),
        .CO({clr_go0_carry__0_n_0,clr_go0_carry__0_n_1,clr_go0_carry__0_n_2,clr_go0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({clr_go0_carry__0_i_1_n_0,clr_go0_carry__0_i_2_n_0,clr_go0_carry__0_i_3_n_0,clr_go0_carry__0_i_4_n_0}),
        .O(NLW_clr_go0_carry__0_O_UNCONNECTED[3:0]),
        .S({clr_go0_carry__0_i_5_n_0,clr_go0_carry__0_i_6_n_0,clr_go0_carry__0_i_7_n_0,clr_go0_carry__0_i_8_n_0}));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__0_i_1
       (.I0(DMA_SRC[15]),
        .I1(\csr_end_reg_n_0_[15] ),
        .I2(DMA_SRC[14]),
        .I3(\csr_end_reg_n_0_[14] ),
        .O(clr_go0_carry__0_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__0_i_2
       (.I0(DMA_SRC[13]),
        .I1(\csr_end_reg_n_0_[13] ),
        .I2(DMA_SRC[12]),
        .I3(\csr_end_reg_n_0_[12] ),
        .O(clr_go0_carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__0_i_3
       (.I0(DMA_SRC[11]),
        .I1(\csr_end_reg_n_0_[11] ),
        .I2(DMA_SRC[10]),
        .I3(\csr_end_reg_n_0_[10] ),
        .O(clr_go0_carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__0_i_4
       (.I0(DMA_SRC[9]),
        .I1(\csr_end_reg_n_0_[9] ),
        .I2(DMA_SRC[8]),
        .I3(\csr_end_reg_n_0_[8] ),
        .O(clr_go0_carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__0_i_5
       (.I0(\csr_end_reg_n_0_[15] ),
        .I1(DMA_SRC[15]),
        .I2(\csr_end_reg_n_0_[14] ),
        .I3(DMA_SRC[14]),
        .O(clr_go0_carry__0_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__0_i_6
       (.I0(\csr_end_reg_n_0_[13] ),
        .I1(DMA_SRC[13]),
        .I2(\csr_end_reg_n_0_[12] ),
        .I3(DMA_SRC[12]),
        .O(clr_go0_carry__0_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__0_i_7
       (.I0(\csr_end_reg_n_0_[11] ),
        .I1(DMA_SRC[11]),
        .I2(\csr_end_reg_n_0_[10] ),
        .I3(DMA_SRC[10]),
        .O(clr_go0_carry__0_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__0_i_8
       (.I0(\csr_end_reg_n_0_[9] ),
        .I1(DMA_SRC[9]),
        .I2(\csr_end_reg_n_0_[8] ),
        .I3(DMA_SRC[8]),
        .O(clr_go0_carry__0_i_8_n_0));
  CARRY4 clr_go0_carry__1
       (.CI(clr_go0_carry__0_n_0),
        .CO({clr_go0_carry__1_n_0,clr_go0_carry__1_n_1,clr_go0_carry__1_n_2,clr_go0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({clr_go0_carry__1_i_1_n_0,clr_go0_carry__1_i_2_n_0,clr_go0_carry__1_i_3_n_0,clr_go0_carry__1_i_4_n_0}),
        .O(NLW_clr_go0_carry__1_O_UNCONNECTED[3:0]),
        .S({clr_go0_carry__1_i_5_n_0,clr_go0_carry__1_i_6_n_0,clr_go0_carry__1_i_7_n_0,clr_go0_carry__1_i_8_n_0}));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__1_i_1
       (.I0(DMA_SRC[23]),
        .I1(\csr_end_reg_n_0_[23] ),
        .I2(DMA_SRC[22]),
        .I3(\csr_end_reg_n_0_[22] ),
        .O(clr_go0_carry__1_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__1_i_2
       (.I0(DMA_SRC[21]),
        .I1(\csr_end_reg_n_0_[21] ),
        .I2(DMA_SRC[20]),
        .I3(\csr_end_reg_n_0_[20] ),
        .O(clr_go0_carry__1_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__1_i_3
       (.I0(DMA_SRC[19]),
        .I1(\csr_end_reg_n_0_[19] ),
        .I2(DMA_SRC[18]),
        .I3(\csr_end_reg_n_0_[18] ),
        .O(clr_go0_carry__1_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__1_i_4
       (.I0(DMA_SRC[17]),
        .I1(\csr_end_reg_n_0_[17] ),
        .I2(DMA_SRC[16]),
        .I3(\csr_end_reg_n_0_[16] ),
        .O(clr_go0_carry__1_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__1_i_5
       (.I0(\csr_end_reg_n_0_[23] ),
        .I1(DMA_SRC[23]),
        .I2(\csr_end_reg_n_0_[22] ),
        .I3(DMA_SRC[22]),
        .O(clr_go0_carry__1_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__1_i_6
       (.I0(\csr_end_reg_n_0_[21] ),
        .I1(DMA_SRC[21]),
        .I2(\csr_end_reg_n_0_[20] ),
        .I3(DMA_SRC[20]),
        .O(clr_go0_carry__1_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__1_i_7
       (.I0(\csr_end_reg_n_0_[19] ),
        .I1(DMA_SRC[19]),
        .I2(\csr_end_reg_n_0_[18] ),
        .I3(DMA_SRC[18]),
        .O(clr_go0_carry__1_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__1_i_8
       (.I0(\csr_end_reg_n_0_[17] ),
        .I1(DMA_SRC[17]),
        .I2(\csr_end_reg_n_0_[16] ),
        .I3(DMA_SRC[16]),
        .O(clr_go0_carry__1_i_8_n_0));
  CARRY4 clr_go0_carry__2
       (.CI(clr_go0_carry__1_n_0),
        .CO({clr_go0,clr_go0_carry__2_n_1,clr_go0_carry__2_n_2,clr_go0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({clr_go0_carry__2_i_1_n_0,clr_go0_carry__2_i_2_n_0,clr_go0_carry__2_i_3_n_0,clr_go0_carry__2_i_4_n_0}),
        .O(NLW_clr_go0_carry__2_O_UNCONNECTED[3:0]),
        .S({clr_go0_carry__2_i_5_n_0,clr_go0_carry__2_i_6_n_0,clr_go0_carry__2_i_7_n_0,clr_go0_carry__2_i_8_n_0}));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__2_i_1
       (.I0(DMA_SRC[31]),
        .I1(\csr_end_reg_n_0_[31] ),
        .I2(DMA_SRC[30]),
        .I3(\csr_end_reg_n_0_[30] ),
        .O(clr_go0_carry__2_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__2_i_2
       (.I0(DMA_SRC[29]),
        .I1(\csr_end_reg_n_0_[29] ),
        .I2(DMA_SRC[28]),
        .I3(\csr_end_reg_n_0_[28] ),
        .O(clr_go0_carry__2_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__2_i_3
       (.I0(DMA_SRC[27]),
        .I1(\csr_end_reg_n_0_[27] ),
        .I2(DMA_SRC[26]),
        .I3(\csr_end_reg_n_0_[26] ),
        .O(clr_go0_carry__2_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry__2_i_4
       (.I0(DMA_SRC[25]),
        .I1(\csr_end_reg_n_0_[25] ),
        .I2(DMA_SRC[24]),
        .I3(\csr_end_reg_n_0_[24] ),
        .O(clr_go0_carry__2_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__2_i_5
       (.I0(\csr_end_reg_n_0_[31] ),
        .I1(DMA_SRC[31]),
        .I2(\csr_end_reg_n_0_[30] ),
        .I3(DMA_SRC[30]),
        .O(clr_go0_carry__2_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__2_i_6
       (.I0(\csr_end_reg_n_0_[29] ),
        .I1(DMA_SRC[29]),
        .I2(\csr_end_reg_n_0_[28] ),
        .I3(DMA_SRC[28]),
        .O(clr_go0_carry__2_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__2_i_7
       (.I0(\csr_end_reg_n_0_[27] ),
        .I1(DMA_SRC[27]),
        .I2(\csr_end_reg_n_0_[26] ),
        .I3(DMA_SRC[26]),
        .O(clr_go0_carry__2_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry__2_i_8
       (.I0(\csr_end_reg_n_0_[25] ),
        .I1(DMA_SRC[25]),
        .I2(\csr_end_reg_n_0_[24] ),
        .I3(DMA_SRC[24]),
        .O(clr_go0_carry__2_i_8_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry_i_1
       (.I0(DMA_SRC[7]),
        .I1(\csr_end_reg_n_0_[7] ),
        .I2(DMA_SRC[6]),
        .I3(\csr_end_reg_n_0_[6] ),
        .O(clr_go0_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry_i_2
       (.I0(DMA_SRC[5]),
        .I1(\csr_end_reg_n_0_[5] ),
        .I2(DMA_SRC[4]),
        .I3(\csr_end_reg_n_0_[4] ),
        .O(clr_go0_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry_i_3
       (.I0(DMA_SRC[3]),
        .I1(\csr_end_reg_n_0_[3] ),
        .I2(DMA_SRC[2]),
        .I3(\csr_end_reg_n_0_[2] ),
        .O(clr_go0_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go0_carry_i_4
       (.I0(DMA_SRC[1]),
        .I1(\csr_end_reg_n_0_[1] ),
        .I2(DMA_SRC[0]),
        .I3(\csr_end_reg_n_0_[0] ),
        .O(clr_go0_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry_i_5
       (.I0(\csr_end_reg_n_0_[7] ),
        .I1(DMA_SRC[7]),
        .I2(\csr_end_reg_n_0_[6] ),
        .I3(DMA_SRC[6]),
        .O(clr_go0_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry_i_6
       (.I0(\csr_end_reg_n_0_[5] ),
        .I1(DMA_SRC[5]),
        .I2(\csr_end_reg_n_0_[4] ),
        .I3(DMA_SRC[4]),
        .O(clr_go0_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry_i_7
       (.I0(\csr_end_reg_n_0_[3] ),
        .I1(DMA_SRC[3]),
        .I2(\csr_end_reg_n_0_[2] ),
        .I3(DMA_SRC[2]),
        .O(clr_go0_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h9009)) 
    clr_go0_carry_i_8
       (.I0(\csr_end_reg_n_0_[1] ),
        .I1(DMA_SRC[1]),
        .I2(\csr_end_reg_n_0_[0] ),
        .I3(DMA_SRC[0]),
        .O(clr_go0_carry_i_8_n_0));
  CARRY4 clr_go2_carry
       (.CI(1'b0),
        .CO({clr_go2_carry_n_0,clr_go2_carry_n_1,clr_go2_carry_n_2,clr_go2_carry_n_3}),
        .CYINIT(1'b0),
        .DI({clr_go2_carry_i_1_n_0,clr_go2_carry_i_2_n_0,clr_go2_carry_i_3_n_0,clr_go2_carry_i_4_n_0}),
        .O(NLW_clr_go2_carry_O_UNCONNECTED[3:0]),
        .S({clr_go2_carry_i_5_n_0,clr_go2_carry_i_6_n_0,clr_go2_carry_i_7_n_0,clr_go2_carry_i_8_n_0}));
  CARRY4 clr_go2_carry__0
       (.CI(clr_go2_carry_n_0),
        .CO({clr_go2_carry__0_n_0,clr_go2_carry__0_n_1,clr_go2_carry__0_n_2,clr_go2_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({clr_go2_carry__0_i_1_n_0,clr_go2_carry__0_i_2_n_0,clr_go2_carry__0_i_3_n_0,clr_go2_carry__0_i_4_n_0}),
        .O(NLW_clr_go2_carry__0_O_UNCONNECTED[3:0]),
        .S({clr_go2_carry__0_i_5_n_0,clr_go2_carry__0_i_6_n_0,clr_go2_carry__0_i_7_n_0,clr_go2_carry__0_i_8_n_0}));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__0_i_1
       (.I0(\csr_count_reg_n_0_[15] ),
        .I1(clr_go3_carry__2_n_5),
        .I2(\csr_count_reg_n_0_[14] ),
        .I3(clr_go3_carry__2_n_6),
        .O(clr_go2_carry__0_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__0_i_2
       (.I0(\csr_count_reg_n_0_[13] ),
        .I1(clr_go3_carry__2_n_7),
        .I2(\csr_count_reg_n_0_[12] ),
        .I3(clr_go3_carry__1_n_4),
        .O(clr_go2_carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__0_i_3
       (.I0(\csr_count_reg_n_0_[11] ),
        .I1(clr_go3_carry__1_n_5),
        .I2(\csr_count_reg_n_0_[10] ),
        .I3(clr_go3_carry__1_n_6),
        .O(clr_go2_carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__0_i_4
       (.I0(\csr_count_reg_n_0_[9] ),
        .I1(clr_go3_carry__1_n_7),
        .I2(\csr_count_reg_n_0_[8] ),
        .I3(clr_go3_carry__0_n_4),
        .O(clr_go2_carry__0_i_4_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__0_i_5
       (.I0(\csr_count_reg_n_0_[15] ),
        .I1(\csr_count_reg_n_0_[14] ),
        .I2(clr_go3_carry__2_n_5),
        .I3(clr_go3_carry__2_n_6),
        .O(clr_go2_carry__0_i_5_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__0_i_6
       (.I0(\csr_count_reg_n_0_[13] ),
        .I1(\csr_count_reg_n_0_[12] ),
        .I2(clr_go3_carry__2_n_7),
        .I3(clr_go3_carry__1_n_4),
        .O(clr_go2_carry__0_i_6_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__0_i_7
       (.I0(\csr_count_reg_n_0_[11] ),
        .I1(\csr_count_reg_n_0_[10] ),
        .I2(clr_go3_carry__1_n_5),
        .I3(clr_go3_carry__1_n_6),
        .O(clr_go2_carry__0_i_7_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__0_i_8
       (.I0(\csr_count_reg_n_0_[9] ),
        .I1(\csr_count_reg_n_0_[8] ),
        .I2(clr_go3_carry__1_n_7),
        .I3(clr_go3_carry__0_n_4),
        .O(clr_go2_carry__0_i_8_n_0));
  CARRY4 clr_go2_carry__1
       (.CI(clr_go2_carry__0_n_0),
        .CO({clr_go2_carry__1_n_0,clr_go2_carry__1_n_1,clr_go2_carry__1_n_2,clr_go2_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({clr_go2_carry__1_i_1_n_0,clr_go2_carry__1_i_2_n_0,clr_go2_carry__1_i_3_n_0,clr_go2_carry__1_i_4_n_0}),
        .O(NLW_clr_go2_carry__1_O_UNCONNECTED[3:0]),
        .S({clr_go2_carry__1_i_5_n_0,clr_go2_carry__1_i_6_n_0,clr_go2_carry__1_i_7_n_0,clr_go2_carry__1_i_8_n_0}));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__1_i_1
       (.I0(\csr_count_reg_n_0_[23] ),
        .I1(clr_go3_carry__4_n_5),
        .I2(\csr_count_reg_n_0_[22] ),
        .I3(clr_go3_carry__4_n_6),
        .O(clr_go2_carry__1_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__1_i_2
       (.I0(\csr_count_reg_n_0_[21] ),
        .I1(clr_go3_carry__4_n_7),
        .I2(\csr_count_reg_n_0_[20] ),
        .I3(clr_go3_carry__3_n_4),
        .O(clr_go2_carry__1_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__1_i_3
       (.I0(\csr_count_reg_n_0_[19] ),
        .I1(clr_go3_carry__3_n_5),
        .I2(\csr_count_reg_n_0_[18] ),
        .I3(clr_go3_carry__3_n_6),
        .O(clr_go2_carry__1_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__1_i_4
       (.I0(\csr_count_reg_n_0_[17] ),
        .I1(clr_go3_carry__3_n_7),
        .I2(\csr_count_reg_n_0_[16] ),
        .I3(clr_go3_carry__2_n_4),
        .O(clr_go2_carry__1_i_4_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__1_i_5
       (.I0(\csr_count_reg_n_0_[23] ),
        .I1(\csr_count_reg_n_0_[22] ),
        .I2(clr_go3_carry__4_n_5),
        .I3(clr_go3_carry__4_n_6),
        .O(clr_go2_carry__1_i_5_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__1_i_6
       (.I0(\csr_count_reg_n_0_[21] ),
        .I1(\csr_count_reg_n_0_[20] ),
        .I2(clr_go3_carry__4_n_7),
        .I3(clr_go3_carry__3_n_4),
        .O(clr_go2_carry__1_i_6_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__1_i_7
       (.I0(\csr_count_reg_n_0_[19] ),
        .I1(\csr_count_reg_n_0_[18] ),
        .I2(clr_go3_carry__3_n_5),
        .I3(clr_go3_carry__3_n_6),
        .O(clr_go2_carry__1_i_7_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__1_i_8
       (.I0(\csr_count_reg_n_0_[17] ),
        .I1(\csr_count_reg_n_0_[16] ),
        .I2(clr_go3_carry__3_n_7),
        .I3(clr_go3_carry__2_n_4),
        .O(clr_go2_carry__1_i_8_n_0));
  CARRY4 clr_go2_carry__2
       (.CI(clr_go2_carry__1_n_0),
        .CO({clr_go2_carry__2_n_0,clr_go2_carry__2_n_1,clr_go2_carry__2_n_2,clr_go2_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({clr_go2_carry__2_i_1_n_0,clr_go2_carry__2_i_2_n_0,clr_go2_carry__2_i_3_n_0,clr_go2_carry__2_i_4_n_0}),
        .O(NLW_clr_go2_carry__2_O_UNCONNECTED[3:0]),
        .S({clr_go2_carry__2_i_5_n_0,clr_go2_carry__2_i_6_n_0,clr_go2_carry__2_i_7_n_0,clr_go2_carry__2_i_8_n_0}));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__2_i_1
       (.I0(\csr_count_reg_n_0_[31] ),
        .I1(clr_go3_carry__6_n_5),
        .I2(\csr_count_reg_n_0_[30] ),
        .I3(clr_go3_carry__6_n_6),
        .O(clr_go2_carry__2_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__2_i_2
       (.I0(\csr_count_reg_n_0_[29] ),
        .I1(clr_go3_carry__6_n_7),
        .I2(\csr_count_reg_n_0_[28] ),
        .I3(clr_go3_carry__5_n_4),
        .O(clr_go2_carry__2_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__2_i_3
       (.I0(\csr_count_reg_n_0_[27] ),
        .I1(clr_go3_carry__5_n_5),
        .I2(\csr_count_reg_n_0_[26] ),
        .I3(clr_go3_carry__5_n_6),
        .O(clr_go2_carry__2_i_3_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry__2_i_4
       (.I0(\csr_count_reg_n_0_[25] ),
        .I1(clr_go3_carry__5_n_7),
        .I2(\csr_count_reg_n_0_[24] ),
        .I3(clr_go3_carry__4_n_4),
        .O(clr_go2_carry__2_i_4_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__2_i_5
       (.I0(\csr_count_reg_n_0_[31] ),
        .I1(\csr_count_reg_n_0_[30] ),
        .I2(clr_go3_carry__6_n_5),
        .I3(clr_go3_carry__6_n_6),
        .O(clr_go2_carry__2_i_5_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__2_i_6
       (.I0(\csr_count_reg_n_0_[29] ),
        .I1(\csr_count_reg_n_0_[28] ),
        .I2(clr_go3_carry__6_n_7),
        .I3(clr_go3_carry__5_n_4),
        .O(clr_go2_carry__2_i_6_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__2_i_7
       (.I0(\csr_count_reg_n_0_[27] ),
        .I1(\csr_count_reg_n_0_[26] ),
        .I2(clr_go3_carry__5_n_5),
        .I3(clr_go3_carry__5_n_6),
        .O(clr_go2_carry__2_i_7_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry__2_i_8
       (.I0(\csr_count_reg_n_0_[25] ),
        .I1(\csr_count_reg_n_0_[24] ),
        .I2(clr_go3_carry__5_n_7),
        .I3(clr_go3_carry__4_n_4),
        .O(clr_go2_carry__2_i_8_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry_i_1
       (.I0(\csr_count_reg_n_0_[7] ),
        .I1(clr_go3_carry__0_n_5),
        .I2(\csr_count_reg_n_0_[6] ),
        .I3(clr_go3_carry__0_n_6),
        .O(clr_go2_carry_i_1_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry_i_2
       (.I0(\csr_count_reg_n_0_[5] ),
        .I1(clr_go3_carry__0_n_7),
        .I2(\csr_count_reg_n_0_[4] ),
        .I3(clr_go3_carry_n_4),
        .O(clr_go2_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h22B2)) 
    clr_go2_carry_i_3
       (.I0(\csr_count_reg_n_0_[3] ),
        .I1(clr_go3_carry_n_5),
        .I2(\csr_count_reg_n_0_[2] ),
        .I3(clr_go3_carry_n_6),
        .O(clr_go2_carry_i_3_n_0));
  LUT4 #(
    .INIT(16'hB222)) 
    clr_go2_carry_i_4
       (.I0(\csr_count_reg_n_0_[1] ),
        .I1(clr_go3_carry_n_7),
        .I2(\DMA_CNT_reg_n_0_[0] ),
        .I3(\csr_count_reg_n_0_[0] ),
        .O(clr_go2_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry_i_5
       (.I0(\csr_count_reg_n_0_[7] ),
        .I1(\csr_count_reg_n_0_[6] ),
        .I2(clr_go3_carry__0_n_5),
        .I3(clr_go3_carry__0_n_6),
        .O(clr_go2_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry_i_6
       (.I0(\csr_count_reg_n_0_[5] ),
        .I1(\csr_count_reg_n_0_[4] ),
        .I2(clr_go3_carry__0_n_7),
        .I3(clr_go3_carry_n_4),
        .O(clr_go2_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h8421)) 
    clr_go2_carry_i_7
       (.I0(\csr_count_reg_n_0_[3] ),
        .I1(\csr_count_reg_n_0_[2] ),
        .I2(clr_go3_carry_n_5),
        .I3(clr_go3_carry_n_6),
        .O(clr_go2_carry_i_7_n_0));
  LUT4 #(
    .INIT(16'h2814)) 
    clr_go2_carry_i_8
       (.I0(\csr_count_reg_n_0_[1] ),
        .I1(\csr_count_reg_n_0_[0] ),
        .I2(\DMA_CNT_reg_n_0_[0] ),
        .I3(clr_go3_carry_n_7),
        .O(clr_go2_carry_i_8_n_0));
  CARRY4 clr_go3_carry
       (.CI(1'b0),
        .CO({clr_go3_carry_n_0,clr_go3_carry_n_1,clr_go3_carry_n_2,clr_go3_carry_n_3}),
        .CYINIT(\DMA_CNT_reg_n_0_[0] ),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({clr_go3_carry_n_4,clr_go3_carry_n_5,clr_go3_carry_n_6,clr_go3_carry_n_7}),
        .S({\DMA_CNT_reg_n_0_[4] ,\DMA_CNT_reg_n_0_[3] ,\DMA_CNT_reg_n_0_[2] ,\DMA_CNT_reg_n_0_[1] }));
  CARRY4 clr_go3_carry__0
       (.CI(clr_go3_carry_n_0),
        .CO({clr_go3_carry__0_n_0,clr_go3_carry__0_n_1,clr_go3_carry__0_n_2,clr_go3_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({clr_go3_carry__0_n_4,clr_go3_carry__0_n_5,clr_go3_carry__0_n_6,clr_go3_carry__0_n_7}),
        .S({\DMA_CNT_reg_n_0_[8] ,\DMA_CNT_reg_n_0_[7] ,\DMA_CNT_reg_n_0_[6] ,\DMA_CNT_reg_n_0_[5] }));
  CARRY4 clr_go3_carry__1
       (.CI(clr_go3_carry__0_n_0),
        .CO({clr_go3_carry__1_n_0,clr_go3_carry__1_n_1,clr_go3_carry__1_n_2,clr_go3_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({clr_go3_carry__1_n_4,clr_go3_carry__1_n_5,clr_go3_carry__1_n_6,clr_go3_carry__1_n_7}),
        .S({\DMA_CNT_reg_n_0_[12] ,\DMA_CNT_reg_n_0_[11] ,\DMA_CNT_reg_n_0_[10] ,\DMA_CNT_reg_n_0_[9] }));
  CARRY4 clr_go3_carry__2
       (.CI(clr_go3_carry__1_n_0),
        .CO({clr_go3_carry__2_n_0,clr_go3_carry__2_n_1,clr_go3_carry__2_n_2,clr_go3_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({clr_go3_carry__2_n_4,clr_go3_carry__2_n_5,clr_go3_carry__2_n_6,clr_go3_carry__2_n_7}),
        .S({\DMA_CNT_reg_n_0_[16] ,\DMA_CNT_reg_n_0_[15] ,\DMA_CNT_reg_n_0_[14] ,\DMA_CNT_reg_n_0_[13] }));
  CARRY4 clr_go3_carry__3
       (.CI(clr_go3_carry__2_n_0),
        .CO({clr_go3_carry__3_n_0,clr_go3_carry__3_n_1,clr_go3_carry__3_n_2,clr_go3_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({clr_go3_carry__3_n_4,clr_go3_carry__3_n_5,clr_go3_carry__3_n_6,clr_go3_carry__3_n_7}),
        .S({\DMA_CNT_reg_n_0_[20] ,\DMA_CNT_reg_n_0_[19] ,\DMA_CNT_reg_n_0_[18] ,\DMA_CNT_reg_n_0_[17] }));
  CARRY4 clr_go3_carry__4
       (.CI(clr_go3_carry__3_n_0),
        .CO({clr_go3_carry__4_n_0,clr_go3_carry__4_n_1,clr_go3_carry__4_n_2,clr_go3_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({clr_go3_carry__4_n_4,clr_go3_carry__4_n_5,clr_go3_carry__4_n_6,clr_go3_carry__4_n_7}),
        .S({\DMA_CNT_reg_n_0_[24] ,\DMA_CNT_reg_n_0_[23] ,\DMA_CNT_reg_n_0_[22] ,\DMA_CNT_reg_n_0_[21] }));
  CARRY4 clr_go3_carry__5
       (.CI(clr_go3_carry__4_n_0),
        .CO({clr_go3_carry__5_n_0,clr_go3_carry__5_n_1,clr_go3_carry__5_n_2,clr_go3_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({clr_go3_carry__5_n_4,clr_go3_carry__5_n_5,clr_go3_carry__5_n_6,clr_go3_carry__5_n_7}),
        .S({\DMA_CNT_reg_n_0_[28] ,\DMA_CNT_reg_n_0_[27] ,\DMA_CNT_reg_n_0_[26] ,\DMA_CNT_reg_n_0_[25] }));
  CARRY4 clr_go3_carry__6
       (.CI(clr_go3_carry__5_n_0),
        .CO({NLW_clr_go3_carry__6_CO_UNCONNECTED[3:2],clr_go3_carry__6_n_2,clr_go3_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_clr_go3_carry__6_O_UNCONNECTED[3],clr_go3_carry__6_n_5,clr_go3_carry__6_n_6,clr_go3_carry__6_n_7}),
        .S({1'b0,\DMA_CNT_reg_n_0_[31] ,\DMA_CNT_reg_n_0_[30] ,\DMA_CNT_reg_n_0_[29] }));
  LUT6 #(
    .INIT(64'hAAABABABAAA8A8A8)) 
    clr_go_i_1
       (.I0(clr_go9_out),
        .I1(state[2]),
        .I2(clr_go_i_3_n_0),
        .I3(clr_go_i_4_n_0),
        .I4(\DMA_CNT[31]_i_5_n_0 ),
        .I5(clr_go),
        .O(clr_go_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000E200)) 
    clr_go_i_2
       (.I0(clr_go0),
        .I1(state[0]),
        .I2(csr_num_go),
        .I3(csr_ctl_en_reg_0),
        .I4(state[2]),
        .O(clr_go9_out));
  LUT6 #(
    .INIT(64'h7D555D555D555D55)) 
    clr_go_i_3
       (.I0(csr_ctl_en_reg_0),
        .I1(state[0]),
        .I2(csr_num_go),
        .I3(state[1]),
        .I4(clr_go0),
        .I5(clr_go_i_5_n_0),
        .O(clr_go_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    clr_go_i_4
       (.I0(clr_go0),
        .I1(state[1]),
        .I2(csr_num_go),
        .I3(state[0]),
        .I4(DMA_DONE),
        .I5(clr_go2_carry__2_n_0),
        .O(clr_go_i_4_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    clr_go_i_5
       (.I0(csr_num_cont),
        .I1(DMA_DONE),
        .O(clr_go_i_5_n_0));
  FDCE #(
    .INIT(1'b0)) 
    clr_go_reg
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(clr_go_i_1_n_0),
        .Q(clr_go));
  LUT4 #(
    .INIT(16'h8000)) 
    \csr_count[31]_i_1 
       (.I0(PWRITE),
        .I1(PRESETn),
        .I2(PSEL),
        .I3(PADDR[6]),
        .O(\csr_count[31]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[0] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[0]),
        .Q(\csr_count_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[10] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[10]),
        .Q(\csr_count_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[11] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[11]),
        .Q(\csr_count_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[12] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[12]),
        .Q(\csr_count_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[13] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[13]),
        .Q(\csr_count_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[14] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[14]),
        .Q(\csr_count_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[15] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[15]),
        .Q(\csr_count_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[16] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[16]),
        .Q(\csr_count_reg_n_0_[16] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[17] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[17]),
        .Q(\csr_count_reg_n_0_[17] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[18] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[18]),
        .Q(\csr_count_reg_n_0_[18] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[19] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[19]),
        .Q(\csr_count_reg_n_0_[19] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[1] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[1]),
        .Q(\csr_count_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[20] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[20]),
        .Q(\csr_count_reg_n_0_[20] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[21] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[21]),
        .Q(\csr_count_reg_n_0_[21] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[22] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[22]),
        .Q(\csr_count_reg_n_0_[22] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[23] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[23]),
        .Q(\csr_count_reg_n_0_[23] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[24] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[24]),
        .Q(\csr_count_reg_n_0_[24] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[25] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[25]),
        .Q(\csr_count_reg_n_0_[25] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[26] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[26]),
        .Q(\csr_count_reg_n_0_[26] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[27] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[27]),
        .Q(\csr_count_reg_n_0_[27] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[28] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[28]),
        .Q(\csr_count_reg_n_0_[28] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[29] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[29]),
        .Q(\csr_count_reg_n_0_[29] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[2] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[2]),
        .Q(\csr_count_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[30] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[30]),
        .Q(\csr_count_reg_n_0_[30] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[31] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[31]),
        .Q(\csr_count_reg_n_0_[31] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[3] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[3]),
        .Q(\csr_count_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[4] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[4]),
        .Q(\csr_count_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[5] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[5]),
        .Q(\csr_count_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[6] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[6]),
        .Q(\csr_count_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[7] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[7]),
        .Q(\csr_count_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[8] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[8]),
        .Q(\csr_count_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_count_reg[9] 
       (.C(PCLK),
        .CE(\csr_count[31]_i_1_n_0 ),
        .D(PWDATA[9]),
        .Q(\csr_count_reg_n_0_[9] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFEFFFFFF02000000)) 
    csr_ctl_en_i_1
       (.I0(PWDATA[31]),
        .I1(PADDR[6]),
        .I2(PADDR[5]),
        .I3(PWRITE),
        .I4(PSEL),
        .I5(csr_ctl_en_reg_0),
        .O(csr_ctl_en_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    csr_ctl_en_reg
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(csr_ctl_en_i_1_n_0),
        .Q(csr_ctl_en_reg_0));
  LUT6 #(
    .INIT(64'hFFFFEFFF00002000)) 
    csr_ctl_ie_i_1
       (.I0(PWDATA[0]),
        .I1(csr_ctl_ie_i_2_n_0),
        .I2(PWRITE),
        .I3(PADDR[4]),
        .I4(csr_ctl_ie_i_3_n_0),
        .I5(p_5_in),
        .O(csr_ctl_ie_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    csr_ctl_ie_i_2
       (.I0(PADDR[5]),
        .I1(PADDR[6]),
        .I2(PADDR[3]),
        .I3(PADDR[2]),
        .O(csr_ctl_ie_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'hFFFB)) 
    csr_ctl_ie_i_3
       (.I0(PADDR[7]),
        .I1(PSEL),
        .I2(PADDR[0]),
        .I3(PADDR[1]),
        .O(csr_ctl_ie_i_3_n_0));
  FDCE #(
    .INIT(1'b0)) 
    csr_ctl_ie_reg
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(csr_ctl_ie_i_1_n_0),
        .Q(p_5_in));
  LUT6 #(
    .INIT(64'hDDDDDDDDC0000000)) 
    csr_ctl_ip_i_1
       (.I0(PWDATA[1]),
        .I1(csr_ctl_ip_i_2_n_0),
        .I2(DMA_DONE),
        .I3(DMA_GO),
        .I4(p_5_in),
        .I5(IRQ),
        .O(csr_ctl_ip_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hFFBF)) 
    csr_ctl_ip_i_2
       (.I0(csr_ctl_ie_i_3_n_0),
        .I1(PADDR[4]),
        .I2(PWRITE),
        .I3(csr_ctl_ie_i_2_n_0),
        .O(csr_ctl_ip_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    csr_ctl_ip_reg
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(csr_ctl_ip_i_1_n_0),
        .Q(IRQ));
  LUT5 #(
    .INIT(32'h00800000)) 
    \csr_end[31]_i_1 
       (.I0(PWRITE),
        .I1(PRESETn),
        .I2(PSEL),
        .I3(PADDR[2]),
        .I4(PADDR[3]),
        .O(\csr_end[31]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \csr_end[63]_i_1 
       (.I0(PADDR[3]),
        .I1(PADDR[2]),
        .I2(PWRITE),
        .I3(PRESETn),
        .I4(PSEL),
        .O(\csr_end[63]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[0] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[0]),
        .Q(\csr_end_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[10] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[10]),
        .Q(\csr_end_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[11] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[11]),
        .Q(\csr_end_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[12] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[12]),
        .Q(\csr_end_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[13] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[13]),
        .Q(\csr_end_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[14] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[14]),
        .Q(\csr_end_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[15] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[15]),
        .Q(\csr_end_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[16] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[16]),
        .Q(\csr_end_reg_n_0_[16] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[17] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[17]),
        .Q(\csr_end_reg_n_0_[17] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[18] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[18]),
        .Q(\csr_end_reg_n_0_[18] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[19] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[19]),
        .Q(\csr_end_reg_n_0_[19] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[1] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[1]),
        .Q(\csr_end_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[20] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[20]),
        .Q(\csr_end_reg_n_0_[20] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[21] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[21]),
        .Q(\csr_end_reg_n_0_[21] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[22] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[22]),
        .Q(\csr_end_reg_n_0_[22] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[23] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[23]),
        .Q(\csr_end_reg_n_0_[23] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[24] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[24]),
        .Q(\csr_end_reg_n_0_[24] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[25] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[25]),
        .Q(\csr_end_reg_n_0_[25] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[26] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[26]),
        .Q(\csr_end_reg_n_0_[26] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[27] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[27]),
        .Q(\csr_end_reg_n_0_[27] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[28] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[28]),
        .Q(\csr_end_reg_n_0_[28] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[29] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[29]),
        .Q(\csr_end_reg_n_0_[29] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[2] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[2]),
        .Q(\csr_end_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[30] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[30]),
        .Q(\csr_end_reg_n_0_[30] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[31] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[31]),
        .Q(\csr_end_reg_n_0_[31] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[32] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[0]),
        .Q(p_1_in[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[33] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[1]),
        .Q(p_1_in[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[34] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[2]),
        .Q(p_1_in[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[35] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[3]),
        .Q(p_1_in[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[36] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[4]),
        .Q(p_1_in[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[37] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[5]),
        .Q(p_1_in[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[38] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[6]),
        .Q(p_1_in[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[39] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[7]),
        .Q(p_1_in[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[3] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[3]),
        .Q(\csr_end_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[40] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[8]),
        .Q(p_1_in[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[41] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[9]),
        .Q(p_1_in[9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[42] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[10]),
        .Q(p_1_in[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[43] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[11]),
        .Q(p_1_in[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[44] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[12]),
        .Q(p_1_in[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[45] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[13]),
        .Q(p_1_in[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[46] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[14]),
        .Q(p_1_in[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[47] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[15]),
        .Q(p_1_in[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[48] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[16]),
        .Q(p_1_in[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[49] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[17]),
        .Q(p_1_in[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[4] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[4]),
        .Q(\csr_end_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[50] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[18]),
        .Q(p_1_in[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[51] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[19]),
        .Q(p_1_in[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[52] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[20]),
        .Q(p_1_in[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[53] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[21]),
        .Q(p_1_in[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[54] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[22]),
        .Q(p_1_in[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[55] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[23]),
        .Q(p_1_in[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[56] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[24]),
        .Q(p_1_in[24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[57] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[25]),
        .Q(p_1_in[25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[58] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[26]),
        .Q(p_1_in[26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[59] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[27]),
        .Q(p_1_in[27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[5] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[5]),
        .Q(\csr_end_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[60] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[28]),
        .Q(p_1_in[28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[61] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[29]),
        .Q(p_1_in[29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[62] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[30]),
        .Q(p_1_in[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[63] 
       (.C(PCLK),
        .CE(\csr_end[63]_i_1_n_0 ),
        .D(PWDATA[31]),
        .Q(p_1_in[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[6] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[6]),
        .Q(\csr_end_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[7] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[7]),
        .Q(\csr_end_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[8] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[8]),
        .Q(\csr_end_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_end_reg[9] 
       (.C(PCLK),
        .CE(\csr_end[31]_i_1_n_0 ),
        .D(PWDATA[9]),
        .Q(\csr_end_reg_n_0_[9] ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8000)) 
    \csr_num_byte[15]_i_1 
       (.I0(PSEL),
        .I1(PADDR[5]),
        .I2(PWRITE),
        .I3(PADDR[4]),
        .O(\csr_num_byte[15]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[0] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[0]),
        .Q(csr_num_byte[0]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[10] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[10]),
        .Q(csr_num_byte[10]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[11] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[11]),
        .Q(csr_num_byte[11]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[12] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[12]),
        .Q(csr_num_byte[12]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[13] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[13]),
        .Q(csr_num_byte[13]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[14] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[14]),
        .Q(csr_num_byte[14]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[15] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[15]),
        .Q(csr_num_byte[15]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[1] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[1]),
        .Q(csr_num_byte[1]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[2] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[2]),
        .Q(csr_num_byte[2]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[3] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[3]),
        .Q(csr_num_byte[3]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[4] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[4]),
        .Q(csr_num_byte[4]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[5] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[5]),
        .Q(csr_num_byte[5]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[6] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[6]),
        .Q(csr_num_byte[6]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[7] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[7]),
        .Q(csr_num_byte[7]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[8] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[8]),
        .Q(csr_num_byte[8]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_byte_reg[9] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[9]),
        .Q(csr_num_byte[9]));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[0] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[16]),
        .Q(\csr_num_chunk_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[1] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[17]),
        .Q(\csr_num_chunk_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[2] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[18]),
        .Q(\csr_num_chunk_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[3] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[19]),
        .Q(\csr_num_chunk_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[4] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[20]),
        .Q(\csr_num_chunk_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[5] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[21]),
        .Q(\csr_num_chunk_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[6] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[22]),
        .Q(\csr_num_chunk_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \csr_num_chunk_reg[7] 
       (.C(PCLK),
        .CE(\csr_num_byte[15]_i_1_n_0 ),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(PWDATA[23]),
        .Q(\csr_num_chunk_reg_n_0_[7] ));
  LUT6 #(
    .INIT(64'hEFFFFFFF20000000)) 
    csr_num_cont_i_1
       (.I0(PWDATA[28]),
        .I1(csr_num_cont_i_2_n_0),
        .I2(PADDR[5]),
        .I3(PSEL),
        .I4(PRESETn),
        .I5(csr_num_cont),
        .O(csr_num_cont_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h7)) 
    csr_num_cont_i_2
       (.I0(PADDR[4]),
        .I1(PWRITE),
        .O(csr_num_cont_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    csr_num_cont_reg
       (.C(PCLK),
        .CE(1'b1),
        .D(csr_num_cont_i_1_n_0),
        .Q(csr_num_cont),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0080FFBF00800080)) 
    csr_num_go_i_1
       (.I0(PWDATA[31]),
        .I1(csr_num_go_i_2_n_0),
        .I2(PWRITE),
        .I3(csr_ctl_ie_i_3_n_0),
        .I4(clr_go),
        .I5(csr_num_go),
        .O(csr_num_go_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'h00000008)) 
    csr_num_go_i_2
       (.I0(PADDR[4]),
        .I1(PADDR[5]),
        .I2(PADDR[6]),
        .I3(PADDR[3]),
        .I4(PADDR[2]),
        .O(csr_num_go_i_2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    csr_num_go_reg
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(csr_num_go_i_1_n_0),
        .Q(csr_num_go));
  LUT5 #(
    .INIT(32'h00000004)) 
    \csr_start[31]_i_1 
       (.I0(PADDR[4]),
        .I1(\csr_start[31]_i_2_n_0 ),
        .I2(PADDR[6]),
        .I3(PADDR[2]),
        .I4(PADDR[3]),
        .O(\csr_start[31]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \csr_start[31]_i_2 
       (.I0(PSEL),
        .I1(PRESETn),
        .I2(PWRITE),
        .O(\csr_start[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h40000000)) 
    \csr_start[63]_i_1 
       (.I0(PADDR[3]),
        .I1(PADDR[2]),
        .I2(PWRITE),
        .I3(PRESETn),
        .I4(PSEL),
        .O(\csr_start[63]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[0] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[0]),
        .Q(\csr_start_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[10] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[10]),
        .Q(\csr_start_reg_n_0_[10] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[11] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[11]),
        .Q(\csr_start_reg_n_0_[11] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[12] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[12]),
        .Q(\csr_start_reg_n_0_[12] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[13] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[13]),
        .Q(\csr_start_reg_n_0_[13] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[14] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[14]),
        .Q(\csr_start_reg_n_0_[14] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[15] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[15]),
        .Q(\csr_start_reg_n_0_[15] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[16] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[16]),
        .Q(\csr_start_reg_n_0_[16] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[17] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[17]),
        .Q(\csr_start_reg_n_0_[17] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[18] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[18]),
        .Q(\csr_start_reg_n_0_[18] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[19] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[19]),
        .Q(\csr_start_reg_n_0_[19] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[1] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[1]),
        .Q(\csr_start_reg_n_0_[1] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[20] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[20]),
        .Q(\csr_start_reg_n_0_[20] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[21] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[21]),
        .Q(\csr_start_reg_n_0_[21] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[22] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[22]),
        .Q(\csr_start_reg_n_0_[22] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[23] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[23]),
        .Q(\csr_start_reg_n_0_[23] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[24] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[24]),
        .Q(\csr_start_reg_n_0_[24] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[25] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[25]),
        .Q(\csr_start_reg_n_0_[25] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[26] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[26]),
        .Q(\csr_start_reg_n_0_[26] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[27] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[27]),
        .Q(\csr_start_reg_n_0_[27] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[28] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[28]),
        .Q(\csr_start_reg_n_0_[28] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[29] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[29]),
        .Q(\csr_start_reg_n_0_[29] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[2] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[2]),
        .Q(\csr_start_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[30] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[30]),
        .Q(\csr_start_reg_n_0_[30] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[31] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[31]),
        .Q(\csr_start_reg_n_0_[31] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[32] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[0]),
        .Q(p_3_in[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[33] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[1]),
        .Q(p_3_in[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[34] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[2]),
        .Q(p_3_in[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[35] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[3]),
        .Q(p_3_in[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[36] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[4]),
        .Q(p_3_in[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[37] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[5]),
        .Q(p_3_in[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[38] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[6]),
        .Q(p_3_in[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[39] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[7]),
        .Q(p_3_in[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[3] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[3]),
        .Q(\csr_start_reg_n_0_[3] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[40] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[8]),
        .Q(p_3_in[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[41] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[9]),
        .Q(p_3_in[9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[42] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[10]),
        .Q(p_3_in[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[43] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[11]),
        .Q(p_3_in[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[44] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[12]),
        .Q(p_3_in[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[45] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[13]),
        .Q(p_3_in[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[46] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[14]),
        .Q(p_3_in[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[47] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[15]),
        .Q(p_3_in[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[48] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[16]),
        .Q(p_3_in[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[49] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[17]),
        .Q(p_3_in[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[4] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[4]),
        .Q(\csr_start_reg_n_0_[4] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[50] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[18]),
        .Q(p_3_in[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[51] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[19]),
        .Q(p_3_in[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[52] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[20]),
        .Q(p_3_in[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[53] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[21]),
        .Q(p_3_in[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[54] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[22]),
        .Q(p_3_in[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[55] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[23]),
        .Q(p_3_in[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[56] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[24]),
        .Q(p_3_in[24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[57] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[25]),
        .Q(p_3_in[25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[58] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[26]),
        .Q(p_3_in[26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[59] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[27]),
        .Q(p_3_in[27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[5] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[5]),
        .Q(\csr_start_reg_n_0_[5] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[60] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[28]),
        .Q(p_3_in[28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[61] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[29]),
        .Q(p_3_in[29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[62] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[30]),
        .Q(p_3_in[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[63] 
       (.C(PCLK),
        .CE(\csr_start[63]_i_1_n_0 ),
        .D(PWDATA[31]),
        .Q(p_3_in[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[6] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[6]),
        .Q(\csr_start_reg_n_0_[6] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[7] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[7]),
        .Q(\csr_start_reg_n_0_[7] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[8] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[8]),
        .Q(\csr_start_reg_n_0_[8] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \csr_start_reg[9] 
       (.C(PCLK),
        .CE(\csr_start[31]_i_1_n_0 ),
        .D(PWDATA[9]),
        .Q(\csr_start_reg_n_0_[9] ),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEEEFEEEEEEEEEEEE)) 
    \state[0]_i_1 
       (.I0(\state[0]_i_2_n_0 ),
        .I1(\state[0]_i_3_n_0 ),
        .I2(DMA_DONE),
        .I3(clr_go2_carry__2_n_0),
        .I4(\state[0]_i_4_n_0 ),
        .I5(\DMA_CNT[31]_i_5_n_0 ),
        .O(\state[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF0015001500FF00)) 
    \state[0]_i_2 
       (.I0(DMA_DONE),
        .I1(clr_go0),
        .I2(csr_num_cont),
        .I3(\state[0]_i_4_n_0 ),
        .I4(state[0]),
        .I5(state[1]),
        .O(\state[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h01000000)) 
    \state[0]_i_3 
       (.I0(DMA_DONE),
        .I1(state[1]),
        .I2(state[2]),
        .I3(csr_ctl_en_reg_0),
        .I4(state[0]),
        .O(\state[0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \state[0]_i_4 
       (.I0(csr_num_go),
        .I1(csr_ctl_en_reg_0),
        .I2(state[2]),
        .O(\state[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF20FFF0)) 
    \state[1]_i_1 
       (.I0(\DMA_CNT[31]_i_5_n_0 ),
        .I1(clr_go2_carry__2_n_0),
        .I2(\state[1]_i_2_n_0 ),
        .I3(\state[1]_i_3_n_0 ),
        .I4(csr_num_cont),
        .I5(\state[1]_i_4_n_0 ),
        .O(\state[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h08000000)) 
    \state[1]_i_2 
       (.I0(state[1]),
        .I1(clr_go0),
        .I2(state[2]),
        .I3(csr_ctl_en_reg_0),
        .I4(csr_num_go),
        .O(\state[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h08000000)) 
    \state[1]_i_3 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(state[2]),
        .I3(csr_ctl_en_reg_0),
        .I4(csr_num_go),
        .O(\state[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h02080000)) 
    \state[1]_i_4 
       (.I0(csr_ctl_en_reg_0),
        .I1(state[0]),
        .I2(state[2]),
        .I3(state[1]),
        .I4(DMA_DONE),
        .O(\state[1]_i_4_n_0 ));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\state[0]_i_1_n_0 ),
        .Q(state[0]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(\state[1]_i_1_n_0 ),
        .Q(state[1]));
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(PCLK),
        .CE(1'b1),
        .CLR(\T_RDATA[31]_i_2_n_0 ),
        .D(1'b0),
        .Q(state[2]));
endmodule

(* APB_AW = "32" *) (* APB_DS = "4" *) (* APB_DW = "32" *) 
(* DMA_AWID = "32" *) (* T_ADDR_WID = "8" *) 
module axi_mem2stream_csr_apb
   (PRESETn,
    PCLK,
    PSEL,
    PENABLE,
    PADDR,
    PWRITE,
    PRDATA,
    PWDATA,
    PREADY,
    PSLVERR,
    PSTRB,
    PPROT,
    IRQ,
    DMA_EN,
    DMA_GO,
    DMA_BUSY,
    DMA_DONE,
    DMA_SRC,
    DMA_BNUM,
    DMA_CHUNK);
  input PRESETn;
  input PCLK;
  input PSEL;
  input PENABLE;
  input [31:0]PADDR;
  input PWRITE;
  output [31:0]PRDATA;
  input [31:0]PWDATA;
  output PREADY;
  output PSLVERR;
  input [3:0]PSTRB;
  input [2:0]PPROT;
  output IRQ;
  output DMA_EN;
  output DMA_GO;
  input DMA_BUSY;
  input DMA_DONE;
  output [31:0]DMA_SRC;
  output [15:0]DMA_BNUM;
  output [7:0]DMA_CHUNK;

  wire \<const0> ;
  wire \<const1> ;
  wire [15:0]DMA_BNUM;
  wire DMA_BUSY;
  wire [7:0]DMA_CHUNK;
  wire DMA_DONE;
  wire DMA_EN;
  wire DMA_GO;
  wire [31:0]DMA_SRC;
  wire IRQ;
  wire [31:0]PADDR;
  wire PCLK;
  wire [31:0]PRDATA;
  wire PRESETn;
  wire PSEL;
  wire [31:0]PWDATA;
  wire PWRITE;

  assign PREADY = \<const1> ;
  assign PSLVERR = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  axi_mem2stream_csr u_csr
       (.DMA_BNUM(DMA_BNUM),
        .DMA_BUSY(DMA_BUSY),
        .DMA_CHUNK(DMA_CHUNK),
        .DMA_DONE(DMA_DONE),
        .DMA_GO(DMA_GO),
        .DMA_SRC(DMA_SRC),
        .IRQ(IRQ),
        .PADDR(PADDR[7:0]),
        .PCLK(PCLK),
        .PRDATA(PRDATA),
        .PRESETn(PRESETn),
        .PSEL(PSEL),
        .PWDATA(PWDATA),
        .PWRITE(PWRITE),
        .csr_ctl_en_reg_0(DMA_EN));
endmodule

(* AXIS_WIDTH_DATA = "32" *) (* AXIS_WIDTH_DS = "4" *) (* AXI_WIDTH_DA = "32" *) 
(* FIFO_LAST = "33" *) (* FIFO_START = "32" *) (* FIFO_WIDTH = "34" *) 
module axi_mem2stream_equal
   (ARESETn,
    AXIS_CLK,
    AXIS_TREADY,
    AXIS_TVALID,
    AXIS_TDATA,
    AXIS_TSTRB,
    AXIS_TLAST,
    AXIS_TSTART,
    fifo_rd_rdy,
    fifo_rd_vld,
    fifo_rd_dat,
    fifo_full,
    fifo_empty);
  input ARESETn;
  input AXIS_CLK;
  input AXIS_TREADY;
  output AXIS_TVALID;
  output [31:0]AXIS_TDATA;
  output [3:0]AXIS_TSTRB;
  output AXIS_TLAST;
  output AXIS_TSTART;
  output fifo_rd_rdy;
  input fifo_rd_vld;
  input [33:0]fifo_rd_dat;
  input fifo_full;
  input fifo_empty;

  wire \<const1> ;
  wire AXIS_TLAST;
  wire AXIS_TREADY;
  wire AXIS_TSTART;
  wire [33:0]fifo_rd_dat;
  wire fifo_rd_vld;

  assign AXIS_TDATA[31:0] = fifo_rd_dat[31:0];
  assign AXIS_TSTRB[3] = \<const1> ;
  assign AXIS_TSTRB[2] = \<const1> ;
  assign AXIS_TSTRB[1] = \<const1> ;
  assign AXIS_TSTRB[0] = \<const1> ;
  assign AXIS_TVALID = fifo_rd_vld;
  assign fifo_rd_rdy = AXIS_TREADY;
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h8)) 
    AXIS_TLAST_INST_0
       (.I0(fifo_rd_vld),
        .I1(fifo_rd_dat[33]),
        .O(AXIS_TLAST));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h8)) 
    AXIS_TSTART_INST_0
       (.I0(fifo_rd_vld),
        .I1(fifo_rd_dat[32]),
        .O(AXIS_TSTART));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* CHECK_LICENSE_TYPE = "axi_mem2stream_fifo_async_34x16,fifo_generator_v13_2_3,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "fifo_generator_v13_2_3,Vivado 2018.3" *) 
module axi_mem2stream_fifo_async_34x16
   (rst,
    wr_clk,
    rd_clk,
    din,
    wr_en,
    rd_en,
    dout,
    full,
    almost_full,
    empty,
    valid,
    rd_data_count,
    wr_data_count);
  input rst;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 write_clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME write_clk, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input wr_clk;
  (* x_interface_info = "xilinx.com:signal:clock:1.0 read_clk CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME read_clk, FREQ_HZ 100000000, PHASE 0.000, INSERT_VIP 0" *) input rd_clk;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_DATA" *) input [33:0]din;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE WR_EN" *) input wr_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_EN" *) input rd_en;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ RD_DATA" *) output [33:0]dout;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE FULL" *) output full;
  (* x_interface_info = "xilinx.com:interface:fifo_write:1.0 FIFO_WRITE ALMOST_FULL" *) output almost_full;
  (* x_interface_info = "xilinx.com:interface:fifo_read:1.0 FIFO_READ EMPTY" *) output empty;
  output valid;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;

  wire almost_full;
  wire [33:0]din;
  wire [33:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [4:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire valid;
  wire wr_clk;
  wire [4:0]wr_data_count;
  wire wr_en;
  wire NLW_U0_almost_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_overflow_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_ar_prog_full_UNCONNECTED;
  wire NLW_U0_axi_ar_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_ar_underflow_UNCONNECTED;
  wire NLW_U0_axi_aw_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_overflow_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_aw_prog_full_UNCONNECTED;
  wire NLW_U0_axi_aw_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_aw_underflow_UNCONNECTED;
  wire NLW_U0_axi_b_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_overflow_UNCONNECTED;
  wire NLW_U0_axi_b_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_b_prog_full_UNCONNECTED;
  wire NLW_U0_axi_b_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_b_underflow_UNCONNECTED;
  wire NLW_U0_axi_r_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_overflow_UNCONNECTED;
  wire NLW_U0_axi_r_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_r_prog_full_UNCONNECTED;
  wire NLW_U0_axi_r_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_r_underflow_UNCONNECTED;
  wire NLW_U0_axi_w_dbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_overflow_UNCONNECTED;
  wire NLW_U0_axi_w_prog_empty_UNCONNECTED;
  wire NLW_U0_axi_w_prog_full_UNCONNECTED;
  wire NLW_U0_axi_w_sbiterr_UNCONNECTED;
  wire NLW_U0_axi_w_underflow_UNCONNECTED;
  wire NLW_U0_axis_dbiterr_UNCONNECTED;
  wire NLW_U0_axis_overflow_UNCONNECTED;
  wire NLW_U0_axis_prog_empty_UNCONNECTED;
  wire NLW_U0_axis_prog_full_UNCONNECTED;
  wire NLW_U0_axis_sbiterr_UNCONNECTED;
  wire NLW_U0_axis_underflow_UNCONNECTED;
  wire NLW_U0_dbiterr_UNCONNECTED;
  wire NLW_U0_m_axi_arvalid_UNCONNECTED;
  wire NLW_U0_m_axi_awvalid_UNCONNECTED;
  wire NLW_U0_m_axi_bready_UNCONNECTED;
  wire NLW_U0_m_axi_rready_UNCONNECTED;
  wire NLW_U0_m_axi_wlast_UNCONNECTED;
  wire NLW_U0_m_axi_wvalid_UNCONNECTED;
  wire NLW_U0_m_axis_tlast_UNCONNECTED;
  wire NLW_U0_m_axis_tvalid_UNCONNECTED;
  wire NLW_U0_overflow_UNCONNECTED;
  wire NLW_U0_prog_empty_UNCONNECTED;
  wire NLW_U0_prog_full_UNCONNECTED;
  wire NLW_U0_rd_rst_busy_UNCONNECTED;
  wire NLW_U0_s_axi_arready_UNCONNECTED;
  wire NLW_U0_s_axi_awready_UNCONNECTED;
  wire NLW_U0_s_axi_bvalid_UNCONNECTED;
  wire NLW_U0_s_axi_rlast_UNCONNECTED;
  wire NLW_U0_s_axi_rvalid_UNCONNECTED;
  wire NLW_U0_s_axi_wready_UNCONNECTED;
  wire NLW_U0_s_axis_tready_UNCONNECTED;
  wire NLW_U0_sbiterr_UNCONNECTED;
  wire NLW_U0_underflow_UNCONNECTED;
  wire NLW_U0_wr_ack_UNCONNECTED;
  wire NLW_U0_wr_rst_busy_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_ar_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_aw_wr_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_rd_data_count_UNCONNECTED;
  wire [4:0]NLW_U0_axi_b_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_r_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axi_w_wr_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_rd_data_count_UNCONNECTED;
  wire [10:0]NLW_U0_axis_wr_data_count_UNCONNECTED;
  wire [3:0]NLW_U0_data_count_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_araddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_arburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_arlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_arlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_arregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_arsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_aruser_UNCONNECTED;
  wire [31:0]NLW_U0_m_axi_awaddr_UNCONNECTED;
  wire [1:0]NLW_U0_m_axi_awburst_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awcache_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_awlen_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awlock_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awprot_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awqos_UNCONNECTED;
  wire [3:0]NLW_U0_m_axi_awregion_UNCONNECTED;
  wire [2:0]NLW_U0_m_axi_awsize_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_awuser_UNCONNECTED;
  wire [63:0]NLW_U0_m_axi_wdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wid_UNCONNECTED;
  wire [7:0]NLW_U0_m_axi_wstrb_UNCONNECTED;
  wire [0:0]NLW_U0_m_axi_wuser_UNCONNECTED;
  wire [7:0]NLW_U0_m_axis_tdata_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tdest_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tid_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tkeep_UNCONNECTED;
  wire [0:0]NLW_U0_m_axis_tstrb_UNCONNECTED;
  wire [3:0]NLW_U0_m_axis_tuser_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_bid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_bresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_buser_UNCONNECTED;
  wire [63:0]NLW_U0_s_axi_rdata_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_rid_UNCONNECTED;
  wire [1:0]NLW_U0_s_axi_rresp_UNCONNECTED;
  wire [0:0]NLW_U0_s_axi_ruser_UNCONNECTED;

  (* C_ADD_NGC_CONSTRAINT = "0" *) 
  (* C_APPLICATION_TYPE_AXIS = "0" *) 
  (* C_APPLICATION_TYPE_RACH = "0" *) 
  (* C_APPLICATION_TYPE_RDCH = "0" *) 
  (* C_APPLICATION_TYPE_WACH = "0" *) 
  (* C_APPLICATION_TYPE_WDCH = "0" *) 
  (* C_APPLICATION_TYPE_WRCH = "0" *) 
  (* C_AXIS_TDATA_WIDTH = "8" *) 
  (* C_AXIS_TDEST_WIDTH = "1" *) 
  (* C_AXIS_TID_WIDTH = "1" *) 
  (* C_AXIS_TKEEP_WIDTH = "1" *) 
  (* C_AXIS_TSTRB_WIDTH = "1" *) 
  (* C_AXIS_TUSER_WIDTH = "4" *) 
  (* C_AXIS_TYPE = "0" *) 
  (* C_AXI_ADDR_WIDTH = "32" *) 
  (* C_AXI_ARUSER_WIDTH = "1" *) 
  (* C_AXI_AWUSER_WIDTH = "1" *) 
  (* C_AXI_BUSER_WIDTH = "1" *) 
  (* C_AXI_DATA_WIDTH = "64" *) 
  (* C_AXI_ID_WIDTH = "1" *) 
  (* C_AXI_LEN_WIDTH = "8" *) 
  (* C_AXI_LOCK_WIDTH = "1" *) 
  (* C_AXI_RUSER_WIDTH = "1" *) 
  (* C_AXI_TYPE = "1" *) 
  (* C_AXI_WUSER_WIDTH = "1" *) 
  (* C_COMMON_CLOCK = "0" *) 
  (* C_COUNT_TYPE = "0" *) 
  (* C_DATA_COUNT_WIDTH = "4" *) 
  (* C_DEFAULT_VALUE = "BlankString" *) 
  (* C_DIN_WIDTH = "34" *) 
  (* C_DIN_WIDTH_AXIS = "1" *) 
  (* C_DIN_WIDTH_RACH = "32" *) 
  (* C_DIN_WIDTH_RDCH = "64" *) 
  (* C_DIN_WIDTH_WACH = "1" *) 
  (* C_DIN_WIDTH_WDCH = "64" *) 
  (* C_DIN_WIDTH_WRCH = "2" *) 
  (* C_DOUT_RST_VAL = "0" *) 
  (* C_DOUT_WIDTH = "34" *) 
  (* C_ENABLE_RLOCS = "0" *) 
  (* C_ENABLE_RST_SYNC = "1" *) 
  (* C_EN_SAFETY_CKT = "0" *) 
  (* C_ERROR_INJECTION_TYPE = "0" *) 
  (* C_ERROR_INJECTION_TYPE_AXIS = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WACH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) 
  (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FULL_FLAGS_RST_VAL = "1" *) 
  (* C_HAS_ALMOST_EMPTY = "0" *) 
  (* C_HAS_ALMOST_FULL = "1" *) 
  (* C_HAS_AXIS_TDATA = "1" *) 
  (* C_HAS_AXIS_TDEST = "0" *) 
  (* C_HAS_AXIS_TID = "0" *) 
  (* C_HAS_AXIS_TKEEP = "0" *) 
  (* C_HAS_AXIS_TLAST = "0" *) 
  (* C_HAS_AXIS_TREADY = "1" *) 
  (* C_HAS_AXIS_TSTRB = "0" *) 
  (* C_HAS_AXIS_TUSER = "1" *) 
  (* C_HAS_AXI_ARUSER = "0" *) 
  (* C_HAS_AXI_AWUSER = "0" *) 
  (* C_HAS_AXI_BUSER = "0" *) 
  (* C_HAS_AXI_ID = "0" *) 
  (* C_HAS_AXI_RD_CHANNEL = "1" *) 
  (* C_HAS_AXI_RUSER = "0" *) 
  (* C_HAS_AXI_WR_CHANNEL = "1" *) 
  (* C_HAS_AXI_WUSER = "0" *) 
  (* C_HAS_BACKUP = "0" *) 
  (* C_HAS_DATA_COUNT = "0" *) 
  (* C_HAS_DATA_COUNTS_AXIS = "0" *) 
  (* C_HAS_DATA_COUNTS_RACH = "0" *) 
  (* C_HAS_DATA_COUNTS_RDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WACH = "0" *) 
  (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
  (* C_HAS_DATA_COUNTS_WRCH = "0" *) 
  (* C_HAS_INT_CLK = "0" *) 
  (* C_HAS_MASTER_CE = "0" *) 
  (* C_HAS_MEMINIT_FILE = "0" *) 
  (* C_HAS_OVERFLOW = "0" *) 
  (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
  (* C_HAS_PROG_FLAGS_RACH = "0" *) 
  (* C_HAS_PROG_FLAGS_RDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WACH = "0" *) 
  (* C_HAS_PROG_FLAGS_WDCH = "0" *) 
  (* C_HAS_PROG_FLAGS_WRCH = "0" *) 
  (* C_HAS_RD_DATA_COUNT = "1" *) 
  (* C_HAS_RD_RST = "0" *) 
  (* C_HAS_RST = "1" *) 
  (* C_HAS_SLAVE_CE = "0" *) 
  (* C_HAS_SRST = "0" *) 
  (* C_HAS_UNDERFLOW = "0" *) 
  (* C_HAS_VALID = "1" *) 
  (* C_HAS_WR_ACK = "0" *) 
  (* C_HAS_WR_DATA_COUNT = "1" *) 
  (* C_HAS_WR_RST = "0" *) 
  (* C_IMPLEMENTATION_TYPE = "2" *) 
  (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_RDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WACH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
  (* C_IMPLEMENTATION_TYPE_WRCH = "1" *) 
  (* C_INIT_WR_PNTR_VAL = "0" *) 
  (* C_INTERFACE_TYPE = "0" *) 
  (* C_MEMORY_TYPE = "1" *) 
  (* C_MIF_FILE_NAME = "BlankString" *) 
  (* C_MSGON_VAL = "1" *) 
  (* C_OPTIMIZATION_MODE = "0" *) 
  (* C_OVERFLOW_LOW = "0" *) 
  (* C_POWER_SAVING_MODE = "0" *) 
  (* C_PRELOAD_LATENCY = "0" *) 
  (* C_PRELOAD_REGS = "1" *) 
  (* C_PRIM_FIFO_TYPE = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) 
  (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WACH = "512x36" *) 
  (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) 
  (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) 
  (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) 
  (* C_PROG_EMPTY_TYPE = "0" *) 
  (* C_PROG_EMPTY_TYPE_AXIS = "0" *) 
  (* C_PROG_EMPTY_TYPE_RACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WACH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WDCH = "0" *) 
  (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
  (* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) 
  (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) 
  (* C_PROG_FULL_TYPE = "0" *) 
  (* C_PROG_FULL_TYPE_AXIS = "0" *) 
  (* C_PROG_FULL_TYPE_RACH = "0" *) 
  (* C_PROG_FULL_TYPE_RDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WACH = "0" *) 
  (* C_PROG_FULL_TYPE_WDCH = "0" *) 
  (* C_PROG_FULL_TYPE_WRCH = "0" *) 
  (* C_RACH_TYPE = "0" *) 
  (* C_RDCH_TYPE = "0" *) 
  (* C_RD_DATA_COUNT_WIDTH = "5" *) 
  (* C_RD_DEPTH = "16" *) 
  (* C_RD_FREQ = "1" *) 
  (* C_RD_PNTR_WIDTH = "4" *) 
  (* C_REG_SLICE_MODE_AXIS = "0" *) 
  (* C_REG_SLICE_MODE_RACH = "0" *) 
  (* C_REG_SLICE_MODE_RDCH = "0" *) 
  (* C_REG_SLICE_MODE_WACH = "0" *) 
  (* C_REG_SLICE_MODE_WDCH = "0" *) 
  (* C_REG_SLICE_MODE_WRCH = "0" *) 
  (* C_SELECT_XPM = "0" *) 
  (* C_SYNCHRONIZER_STAGE = "2" *) 
  (* C_UNDERFLOW_LOW = "0" *) 
  (* C_USE_COMMON_OVERFLOW = "0" *) 
  (* C_USE_COMMON_UNDERFLOW = "0" *) 
  (* C_USE_DEFAULT_SETTINGS = "0" *) 
  (* C_USE_DOUT_RST = "1" *) 
  (* C_USE_ECC = "0" *) 
  (* C_USE_ECC_AXIS = "0" *) 
  (* C_USE_ECC_RACH = "0" *) 
  (* C_USE_ECC_RDCH = "0" *) 
  (* C_USE_ECC_WACH = "0" *) 
  (* C_USE_ECC_WDCH = "0" *) 
  (* C_USE_ECC_WRCH = "0" *) 
  (* C_USE_EMBEDDED_REG = "0" *) 
  (* C_USE_FIFO16_FLAGS = "0" *) 
  (* C_USE_FWFT_DATA_COUNT = "1" *) 
  (* C_USE_PIPELINE_REG = "0" *) 
  (* C_VALID_LOW = "0" *) 
  (* C_WACH_TYPE = "0" *) 
  (* C_WDCH_TYPE = "0" *) 
  (* C_WRCH_TYPE = "0" *) 
  (* C_WR_ACK_LOW = "0" *) 
  (* C_WR_DATA_COUNT_WIDTH = "5" *) 
  (* C_WR_DEPTH = "16" *) 
  (* C_WR_DEPTH_AXIS = "1024" *) 
  (* C_WR_DEPTH_RACH = "16" *) 
  (* C_WR_DEPTH_RDCH = "1024" *) 
  (* C_WR_DEPTH_WACH = "16" *) 
  (* C_WR_DEPTH_WDCH = "1024" *) 
  (* C_WR_DEPTH_WRCH = "16" *) 
  (* C_WR_FREQ = "1" *) 
  (* C_WR_PNTR_WIDTH = "4" *) 
  (* C_WR_PNTR_WIDTH_AXIS = "10" *) 
  (* C_WR_PNTR_WIDTH_RACH = "4" *) 
  (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WACH = "4" *) 
  (* C_WR_PNTR_WIDTH_WDCH = "10" *) 
  (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
  (* C_WR_RESPONSE_LATENCY = "1" *) 
  axi_mem2stream_fifo_async_34x16_fifo_generator_v13_2_3 U0
       (.almost_empty(NLW_U0_almost_empty_UNCONNECTED),
        .almost_full(almost_full),
        .axi_ar_data_count(NLW_U0_axi_ar_data_count_UNCONNECTED[4:0]),
        .axi_ar_dbiterr(NLW_U0_axi_ar_dbiterr_UNCONNECTED),
        .axi_ar_injectdbiterr(1'b0),
        .axi_ar_injectsbiterr(1'b0),
        .axi_ar_overflow(NLW_U0_axi_ar_overflow_UNCONNECTED),
        .axi_ar_prog_empty(NLW_U0_axi_ar_prog_empty_UNCONNECTED),
        .axi_ar_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_prog_full(NLW_U0_axi_ar_prog_full_UNCONNECTED),
        .axi_ar_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_ar_rd_data_count(NLW_U0_axi_ar_rd_data_count_UNCONNECTED[4:0]),
        .axi_ar_sbiterr(NLW_U0_axi_ar_sbiterr_UNCONNECTED),
        .axi_ar_underflow(NLW_U0_axi_ar_underflow_UNCONNECTED),
        .axi_ar_wr_data_count(NLW_U0_axi_ar_wr_data_count_UNCONNECTED[4:0]),
        .axi_aw_data_count(NLW_U0_axi_aw_data_count_UNCONNECTED[4:0]),
        .axi_aw_dbiterr(NLW_U0_axi_aw_dbiterr_UNCONNECTED),
        .axi_aw_injectdbiterr(1'b0),
        .axi_aw_injectsbiterr(1'b0),
        .axi_aw_overflow(NLW_U0_axi_aw_overflow_UNCONNECTED),
        .axi_aw_prog_empty(NLW_U0_axi_aw_prog_empty_UNCONNECTED),
        .axi_aw_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_prog_full(NLW_U0_axi_aw_prog_full_UNCONNECTED),
        .axi_aw_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_aw_rd_data_count(NLW_U0_axi_aw_rd_data_count_UNCONNECTED[4:0]),
        .axi_aw_sbiterr(NLW_U0_axi_aw_sbiterr_UNCONNECTED),
        .axi_aw_underflow(NLW_U0_axi_aw_underflow_UNCONNECTED),
        .axi_aw_wr_data_count(NLW_U0_axi_aw_wr_data_count_UNCONNECTED[4:0]),
        .axi_b_data_count(NLW_U0_axi_b_data_count_UNCONNECTED[4:0]),
        .axi_b_dbiterr(NLW_U0_axi_b_dbiterr_UNCONNECTED),
        .axi_b_injectdbiterr(1'b0),
        .axi_b_injectsbiterr(1'b0),
        .axi_b_overflow(NLW_U0_axi_b_overflow_UNCONNECTED),
        .axi_b_prog_empty(NLW_U0_axi_b_prog_empty_UNCONNECTED),
        .axi_b_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_prog_full(NLW_U0_axi_b_prog_full_UNCONNECTED),
        .axi_b_prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .axi_b_rd_data_count(NLW_U0_axi_b_rd_data_count_UNCONNECTED[4:0]),
        .axi_b_sbiterr(NLW_U0_axi_b_sbiterr_UNCONNECTED),
        .axi_b_underflow(NLW_U0_axi_b_underflow_UNCONNECTED),
        .axi_b_wr_data_count(NLW_U0_axi_b_wr_data_count_UNCONNECTED[4:0]),
        .axi_r_data_count(NLW_U0_axi_r_data_count_UNCONNECTED[10:0]),
        .axi_r_dbiterr(NLW_U0_axi_r_dbiterr_UNCONNECTED),
        .axi_r_injectdbiterr(1'b0),
        .axi_r_injectsbiterr(1'b0),
        .axi_r_overflow(NLW_U0_axi_r_overflow_UNCONNECTED),
        .axi_r_prog_empty(NLW_U0_axi_r_prog_empty_UNCONNECTED),
        .axi_r_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_prog_full(NLW_U0_axi_r_prog_full_UNCONNECTED),
        .axi_r_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_r_rd_data_count(NLW_U0_axi_r_rd_data_count_UNCONNECTED[10:0]),
        .axi_r_sbiterr(NLW_U0_axi_r_sbiterr_UNCONNECTED),
        .axi_r_underflow(NLW_U0_axi_r_underflow_UNCONNECTED),
        .axi_r_wr_data_count(NLW_U0_axi_r_wr_data_count_UNCONNECTED[10:0]),
        .axi_w_data_count(NLW_U0_axi_w_data_count_UNCONNECTED[10:0]),
        .axi_w_dbiterr(NLW_U0_axi_w_dbiterr_UNCONNECTED),
        .axi_w_injectdbiterr(1'b0),
        .axi_w_injectsbiterr(1'b0),
        .axi_w_overflow(NLW_U0_axi_w_overflow_UNCONNECTED),
        .axi_w_prog_empty(NLW_U0_axi_w_prog_empty_UNCONNECTED),
        .axi_w_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_prog_full(NLW_U0_axi_w_prog_full_UNCONNECTED),
        .axi_w_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axi_w_rd_data_count(NLW_U0_axi_w_rd_data_count_UNCONNECTED[10:0]),
        .axi_w_sbiterr(NLW_U0_axi_w_sbiterr_UNCONNECTED),
        .axi_w_underflow(NLW_U0_axi_w_underflow_UNCONNECTED),
        .axi_w_wr_data_count(NLW_U0_axi_w_wr_data_count_UNCONNECTED[10:0]),
        .axis_data_count(NLW_U0_axis_data_count_UNCONNECTED[10:0]),
        .axis_dbiterr(NLW_U0_axis_dbiterr_UNCONNECTED),
        .axis_injectdbiterr(1'b0),
        .axis_injectsbiterr(1'b0),
        .axis_overflow(NLW_U0_axis_overflow_UNCONNECTED),
        .axis_prog_empty(NLW_U0_axis_prog_empty_UNCONNECTED),
        .axis_prog_empty_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_prog_full(NLW_U0_axis_prog_full_UNCONNECTED),
        .axis_prog_full_thresh({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .axis_rd_data_count(NLW_U0_axis_rd_data_count_UNCONNECTED[10:0]),
        .axis_sbiterr(NLW_U0_axis_sbiterr_UNCONNECTED),
        .axis_underflow(NLW_U0_axis_underflow_UNCONNECTED),
        .axis_wr_data_count(NLW_U0_axis_wr_data_count_UNCONNECTED[10:0]),
        .backup(1'b0),
        .backup_marker(1'b0),
        .clk(1'b0),
        .data_count(NLW_U0_data_count_UNCONNECTED[3:0]),
        .dbiterr(NLW_U0_dbiterr_UNCONNECTED),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .injectdbiterr(1'b0),
        .injectsbiterr(1'b0),
        .int_clk(1'b0),
        .m_aclk(1'b0),
        .m_aclk_en(1'b0),
        .m_axi_araddr(NLW_U0_m_axi_araddr_UNCONNECTED[31:0]),
        .m_axi_arburst(NLW_U0_m_axi_arburst_UNCONNECTED[1:0]),
        .m_axi_arcache(NLW_U0_m_axi_arcache_UNCONNECTED[3:0]),
        .m_axi_arid(NLW_U0_m_axi_arid_UNCONNECTED[0]),
        .m_axi_arlen(NLW_U0_m_axi_arlen_UNCONNECTED[7:0]),
        .m_axi_arlock(NLW_U0_m_axi_arlock_UNCONNECTED[0]),
        .m_axi_arprot(NLW_U0_m_axi_arprot_UNCONNECTED[2:0]),
        .m_axi_arqos(NLW_U0_m_axi_arqos_UNCONNECTED[3:0]),
        .m_axi_arready(1'b0),
        .m_axi_arregion(NLW_U0_m_axi_arregion_UNCONNECTED[3:0]),
        .m_axi_arsize(NLW_U0_m_axi_arsize_UNCONNECTED[2:0]),
        .m_axi_aruser(NLW_U0_m_axi_aruser_UNCONNECTED[0]),
        .m_axi_arvalid(NLW_U0_m_axi_arvalid_UNCONNECTED),
        .m_axi_awaddr(NLW_U0_m_axi_awaddr_UNCONNECTED[31:0]),
        .m_axi_awburst(NLW_U0_m_axi_awburst_UNCONNECTED[1:0]),
        .m_axi_awcache(NLW_U0_m_axi_awcache_UNCONNECTED[3:0]),
        .m_axi_awid(NLW_U0_m_axi_awid_UNCONNECTED[0]),
        .m_axi_awlen(NLW_U0_m_axi_awlen_UNCONNECTED[7:0]),
        .m_axi_awlock(NLW_U0_m_axi_awlock_UNCONNECTED[0]),
        .m_axi_awprot(NLW_U0_m_axi_awprot_UNCONNECTED[2:0]),
        .m_axi_awqos(NLW_U0_m_axi_awqos_UNCONNECTED[3:0]),
        .m_axi_awready(1'b0),
        .m_axi_awregion(NLW_U0_m_axi_awregion_UNCONNECTED[3:0]),
        .m_axi_awsize(NLW_U0_m_axi_awsize_UNCONNECTED[2:0]),
        .m_axi_awuser(NLW_U0_m_axi_awuser_UNCONNECTED[0]),
        .m_axi_awvalid(NLW_U0_m_axi_awvalid_UNCONNECTED),
        .m_axi_bid(1'b0),
        .m_axi_bready(NLW_U0_m_axi_bready_UNCONNECTED),
        .m_axi_bresp({1'b0,1'b0}),
        .m_axi_buser(1'b0),
        .m_axi_bvalid(1'b0),
        .m_axi_rdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .m_axi_rid(1'b0),
        .m_axi_rlast(1'b0),
        .m_axi_rready(NLW_U0_m_axi_rready_UNCONNECTED),
        .m_axi_rresp({1'b0,1'b0}),
        .m_axi_ruser(1'b0),
        .m_axi_rvalid(1'b0),
        .m_axi_wdata(NLW_U0_m_axi_wdata_UNCONNECTED[63:0]),
        .m_axi_wid(NLW_U0_m_axi_wid_UNCONNECTED[0]),
        .m_axi_wlast(NLW_U0_m_axi_wlast_UNCONNECTED),
        .m_axi_wready(1'b0),
        .m_axi_wstrb(NLW_U0_m_axi_wstrb_UNCONNECTED[7:0]),
        .m_axi_wuser(NLW_U0_m_axi_wuser_UNCONNECTED[0]),
        .m_axi_wvalid(NLW_U0_m_axi_wvalid_UNCONNECTED),
        .m_axis_tdata(NLW_U0_m_axis_tdata_UNCONNECTED[7:0]),
        .m_axis_tdest(NLW_U0_m_axis_tdest_UNCONNECTED[0]),
        .m_axis_tid(NLW_U0_m_axis_tid_UNCONNECTED[0]),
        .m_axis_tkeep(NLW_U0_m_axis_tkeep_UNCONNECTED[0]),
        .m_axis_tlast(NLW_U0_m_axis_tlast_UNCONNECTED),
        .m_axis_tready(1'b0),
        .m_axis_tstrb(NLW_U0_m_axis_tstrb_UNCONNECTED[0]),
        .m_axis_tuser(NLW_U0_m_axis_tuser_UNCONNECTED[3:0]),
        .m_axis_tvalid(NLW_U0_m_axis_tvalid_UNCONNECTED),
        .overflow(NLW_U0_overflow_UNCONNECTED),
        .prog_empty(NLW_U0_prog_empty_UNCONNECTED),
        .prog_empty_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_empty_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .prog_full(NLW_U0_prog_full_UNCONNECTED),
        .prog_full_thresh({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_assert({1'b0,1'b0,1'b0,1'b0}),
        .prog_full_thresh_negate({1'b0,1'b0,1'b0,1'b0}),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rd_rst(1'b0),
        .rd_rst_busy(NLW_U0_rd_rst_busy_UNCONNECTED),
        .rst(rst),
        .s_aclk(1'b0),
        .s_aclk_en(1'b0),
        .s_aresetn(1'b0),
        .s_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arburst({1'b0,1'b0}),
        .s_axi_arcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arid(1'b0),
        .s_axi_arlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arlock(1'b0),
        .s_axi_arprot({1'b0,1'b0,1'b0}),
        .s_axi_arqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arready(NLW_U0_s_axi_arready_UNCONNECTED),
        .s_axi_arregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_arsize({1'b0,1'b0,1'b0}),
        .s_axi_aruser(1'b0),
        .s_axi_arvalid(1'b0),
        .s_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awburst({1'b0,1'b0}),
        .s_axi_awcache({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awid(1'b0),
        .s_axi_awlen({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awlock(1'b0),
        .s_axi_awprot({1'b0,1'b0,1'b0}),
        .s_axi_awqos({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awready(NLW_U0_s_axi_awready_UNCONNECTED),
        .s_axi_awregion({1'b0,1'b0,1'b0,1'b0}),
        .s_axi_awsize({1'b0,1'b0,1'b0}),
        .s_axi_awuser(1'b0),
        .s_axi_awvalid(1'b0),
        .s_axi_bid(NLW_U0_s_axi_bid_UNCONNECTED[0]),
        .s_axi_bready(1'b0),
        .s_axi_bresp(NLW_U0_s_axi_bresp_UNCONNECTED[1:0]),
        .s_axi_buser(NLW_U0_s_axi_buser_UNCONNECTED[0]),
        .s_axi_bvalid(NLW_U0_s_axi_bvalid_UNCONNECTED),
        .s_axi_rdata(NLW_U0_s_axi_rdata_UNCONNECTED[63:0]),
        .s_axi_rid(NLW_U0_s_axi_rid_UNCONNECTED[0]),
        .s_axi_rlast(NLW_U0_s_axi_rlast_UNCONNECTED),
        .s_axi_rready(1'b0),
        .s_axi_rresp(NLW_U0_s_axi_rresp_UNCONNECTED[1:0]),
        .s_axi_ruser(NLW_U0_s_axi_ruser_UNCONNECTED[0]),
        .s_axi_rvalid(NLW_U0_s_axi_rvalid_UNCONNECTED),
        .s_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wid(1'b0),
        .s_axi_wlast(1'b0),
        .s_axi_wready(NLW_U0_s_axi_wready_UNCONNECTED),
        .s_axi_wstrb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axi_wuser(1'b0),
        .s_axi_wvalid(1'b0),
        .s_axis_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tdest(1'b0),
        .s_axis_tid(1'b0),
        .s_axis_tkeep(1'b0),
        .s_axis_tlast(1'b0),
        .s_axis_tready(NLW_U0_s_axis_tready_UNCONNECTED),
        .s_axis_tstrb(1'b0),
        .s_axis_tuser({1'b0,1'b0,1'b0,1'b0}),
        .s_axis_tvalid(1'b0),
        .sbiterr(NLW_U0_sbiterr_UNCONNECTED),
        .sleep(1'b0),
        .srst(1'b0),
        .underflow(NLW_U0_underflow_UNCONNECTED),
        .valid(valid),
        .wr_ack(NLW_U0_wr_ack_UNCONNECTED),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst(1'b0),
        .wr_rst_busy(NLW_U0_wr_rst_busy_UNCONNECTED));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module axi_mem2stream_fifo_async_34x16_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* xpm_cdc = "ASYNC_RST" *) 
module axi_mem2stream_fifo_async_34x16_xpm_cdc_async_rst__2
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [1:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[1];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "4" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module axi_mem2stream_fifo_async_34x16_xpm_cdc_gray
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [3:0]src_in_bin;
  input dest_clk;
  output [3:0]dest_out_bin;

  wire [3:0]async_path;
  wire [2:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[1] ;
  wire [3:0]dest_out_bin;
  wire [2:0]gray_enc;
  wire src_clk;
  wire [3:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .I3(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[3]),
        .Q(async_path[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "2" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_gray" *) 
(* REG_OUTPUT = "1" *) (* SIM_ASSERT_CHK = "0" *) (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
(* VERSION = "0" *) (* WIDTH = "4" *) (* XPM_MODULE = "TRUE" *) 
(* xpm_cdc = "GRAY" *) 
module axi_mem2stream_fifo_async_34x16_xpm_cdc_gray__2
   (src_clk,
    src_in_bin,
    dest_clk,
    dest_out_bin);
  input src_clk;
  input [3:0]src_in_bin;
  input dest_clk;
  output [3:0]dest_out_bin;

  wire [3:0]async_path;
  wire [2:0]binval;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "GRAY" *) wire [3:0]\dest_graysync_ff[1] ;
  wire [3:0]dest_out_bin;
  wire [2:0]gray_enc;
  wire src_clk;
  wire [3:0]src_in_bin;

  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[0]),
        .Q(\dest_graysync_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[1]),
        .Q(\dest_graysync_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[2]),
        .Q(\dest_graysync_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[0][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path[3]),
        .Q(\dest_graysync_ff[0] [3]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [0]),
        .Q(\dest_graysync_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [1]),
        .Q(\dest_graysync_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [2]),
        .Q(\dest_graysync_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "GRAY" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dest_graysync_ff_reg[1][3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[0] [3]),
        .Q(\dest_graysync_ff[1] [3]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6996)) 
    \dest_out_bin_ff[0]_i_1 
       (.I0(\dest_graysync_ff[1] [0]),
        .I1(\dest_graysync_ff[1] [2]),
        .I2(\dest_graysync_ff[1] [3]),
        .I3(\dest_graysync_ff[1] [1]),
        .O(binval[0]));
  LUT3 #(
    .INIT(8'h96)) 
    \dest_out_bin_ff[1]_i_1 
       (.I0(\dest_graysync_ff[1] [1]),
        .I1(\dest_graysync_ff[1] [3]),
        .I2(\dest_graysync_ff[1] [2]),
        .O(binval[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \dest_out_bin_ff[2]_i_1 
       (.I0(\dest_graysync_ff[1] [2]),
        .I1(\dest_graysync_ff[1] [3]),
        .O(binval[2]));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[0]),
        .Q(dest_out_bin[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[1]),
        .Q(dest_out_bin[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(binval[2]),
        .Q(dest_out_bin[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dest_out_bin_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\dest_graysync_ff[1] [3]),
        .Q(dest_out_bin[3]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[0]_i_1 
       (.I0(src_in_bin[1]),
        .I1(src_in_bin[0]),
        .O(gray_enc[0]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[1]_i_1 
       (.I0(src_in_bin[2]),
        .I1(src_in_bin[1]),
        .O(gray_enc[1]));
  LUT2 #(
    .INIT(4'h6)) 
    \src_gray_ff[2]_i_1 
       (.I0(src_in_bin[3]),
        .I1(src_in_bin[2]),
        .O(gray_enc[2]));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[0] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[0]),
        .Q(async_path[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[1] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[1]),
        .Q(async_path[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[2] 
       (.C(src_clk),
        .CE(1'b1),
        .D(gray_enc[2]),
        .Q(async_path[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \src_gray_ff_reg[3] 
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in_bin[3]),
        .Q(async_path[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module axi_mem2stream_fifo_async_34x16_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* xpm_cdc = "SINGLE" *) 
module axi_mem2stream_fifo_async_34x16_xpm_cdc_single__2
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* ACTIVE_HIGH = "1" *) (* CYCLES = "2" *) (* INIT_VALUE = "1'b0" *) 
module axi_mem2stream_sync
   (reset_n,
    clk,
    sig_in,
    sig_out);
  input reset_n;
  input clk;
  input sig_in;
  output sig_out;

  wire clk;
  wire [2:1]p_0_out;
  wire reset_n;
  wire sig_in;
  wire sig_out;
  wire \sync[2]_i_1_n_0 ;

  LUT1 #(
    .INIT(2'h1)) 
    \sync[2]_i_1 
       (.I0(reset_n),
        .O(\sync[2]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(sig_in),
        .Q(p_0_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[1]),
        .Q(p_0_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[2]),
        .Q(sig_out));
endmodule

(* ACTIVE_HIGH = "1" *) (* CYCLES = "2" *) (* INIT_VALUE = "1'b0" *) 
(* ORIG_REF_NAME = "axi_mem2stream_sync" *) 
module axi_mem2stream_sync__1
   (reset_n,
    clk,
    sig_in,
    sig_out);
  input reset_n;
  input clk;
  input sig_in;
  output sig_out;

  wire clk;
  wire [2:1]p_0_out;
  wire reset_n;
  wire sig_in;
  wire sig_out;
  wire \sync[2]_i_1_n_0 ;

  LUT1 #(
    .INIT(2'h1)) 
    \sync[2]_i_1 
       (.I0(reset_n),
        .O(\sync[2]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(sig_in),
        .Q(p_0_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[1]),
        .Q(p_0_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[2]),
        .Q(sig_out));
endmodule

(* ACTIVE_HIGH = "1" *) (* CYCLES = "2" *) (* INIT_VALUE = "1'b0" *) 
(* ORIG_REF_NAME = "axi_mem2stream_sync" *) 
module axi_mem2stream_sync__2
   (reset_n,
    clk,
    sig_in,
    sig_out);
  input reset_n;
  input clk;
  input sig_in;
  output sig_out;

  wire clk;
  wire [2:1]p_0_out;
  wire reset_n;
  wire sig_in;
  wire sig_out;
  wire \sync[2]_i_1_n_0 ;

  LUT1 #(
    .INIT(2'h1)) 
    \sync[2]_i_1 
       (.I0(reset_n),
        .O(\sync[2]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(sig_in),
        .Q(p_0_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[1]),
        .Q(p_0_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[2]),
        .Q(sig_out));
endmodule

(* ACTIVE_HIGH = "1" *) (* CYCLES = "2" *) (* INIT_VALUE = "1'b0" *) 
(* ORIG_REF_NAME = "axi_mem2stream_sync" *) 
module axi_mem2stream_sync__3
   (reset_n,
    clk,
    sig_in,
    sig_out);
  input reset_n;
  input clk;
  input sig_in;
  output sig_out;

  wire clk;
  wire [2:1]p_0_out;
  wire reset_n;
  wire sig_in;
  wire sig_out;
  wire \sync[2]_i_1_n_0 ;

  LUT1 #(
    .INIT(2'h1)) 
    \sync[2]_i_1 
       (.I0(reset_n),
        .O(\sync[2]_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[0] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(sig_in),
        .Q(p_0_out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[1] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[1]),
        .Q(p_0_out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \sync_reg[2] 
       (.C(clk),
        .CE(1'b1),
        .CLR(\sync[2]_i_1_n_0 ),
        .D(p_0_out[2]),
        .Q(sig_out));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_generic_cstr" *) 
module axi_mem2stream_fifo_async_34x16_blk_mem_gen_generic_cstr
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    SR,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    din);
  output [33:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SR;
  input [3:0]Q;
  input [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [33:0]din;

  wire [33:0]D;
  wire [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire [33:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  axi_mem2stream_fifo_async_34x16_blk_mem_gen_prim_width \ramloop[0].ram.r 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_width" *) 
module axi_mem2stream_fifo_async_34x16_blk_mem_gen_prim_width
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    SR,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    din);
  output [33:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SR;
  input [3:0]Q;
  input [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [33:0]din;

  wire [33:0]D;
  wire [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire [33:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  axi_mem2stream_fifo_async_34x16_blk_mem_gen_prim_wrapper \prim_noinit.ram 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_prim_wrapper" *) 
module axi_mem2stream_fifo_async_34x16_blk_mem_gen_prim_wrapper
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    SR,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ,
    din);
  output [33:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SR;
  input [3:0]Q;
  input [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ;
  input [33:0]din;

  wire [33:0]D;
  wire [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ;
  wire \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire [33:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  (* box_type = "PRIMITIVE" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_MODE("SDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(0),
    .RSTREG_PRIORITY_A("REGCE"),
    .RSTREG_PRIORITY_B("REGCE"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(0),
    .WRITE_WIDTH_B(36)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,Q,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b0,1'b0,1'b0,1'b0,1'b0,\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_0 ,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(rd_clk),
        .CLKBWRCLK(wr_clk),
        .DIADI({din[16:9],din[7:0]}),
        .DIBDI({din[33:26],din[24:17]}),
        .DIPADIP({1'b0,din[8]}),
        .DIPBDIP({1'b0,din[25]}),
        .DOADO({D[16:9],D[7:0]}),
        .DOBDO({D[33:26],D[24:17]}),
        .DOPADOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_32 ,D[8]}),
        .DOPBDOP({\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_n_34 ,D[25]}),
        .ENARDEN(tmp_ram_rd_en),
        .ENBWREN(E),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(SR),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({E,E,E,E}));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_top" *) 
module axi_mem2stream_fifo_async_34x16_blk_mem_gen_top
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    SR,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    din);
  output [33:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SR;
  input [3:0]Q;
  input [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [33:0]din;

  wire [33:0]D;
  wire [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire [33:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  axi_mem2stream_fifo_async_34x16_blk_mem_gen_generic_cstr \valid.cstr 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_2" *) 
module axi_mem2stream_fifo_async_34x16_blk_mem_gen_v8_4_2
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    SR,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    din);
  output [33:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SR;
  input [3:0]Q;
  input [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [33:0]din;

  wire [33:0]D;
  wire [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire [33:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  axi_mem2stream_fifo_async_34x16_blk_mem_gen_v8_4_2_synth inst_blk_mem_gen
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "blk_mem_gen_v8_4_2_synth" *) 
module axi_mem2stream_fifo_async_34x16_blk_mem_gen_v8_4_2_synth
   (D,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    SR,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    din);
  output [33:0]D;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SR;
  input [3:0]Q;
  input [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [33:0]din;

  wire [33:0]D;
  wire [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire [33:0]din;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  axi_mem2stream_fifo_async_34x16_blk_mem_gen_top \gnbram.gnativebmg.native_blk_mem_gen 
       (.D(D),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "clk_x_pntrs" *) 
module axi_mem2stream_fifo_async_34x16_clk_x_pntrs
   (ram_full_fb_i_reg,
    RD_PNTR_WR,
    D,
    \dest_out_bin_ff_reg[0] ,
    WR_PNTR_RD,
    \dest_out_bin_ff_reg[2] ,
    wr_en_0,
    out,
    wr_en,
    \gaf.ram_almost_full_i_reg ,
    Q,
    \gaf.ram_almost_full_i_i_3_0 ,
    \gaf.ram_almost_full_i_i_2_0 ,
    \src_gray_ff_reg[3] ,
    \src_gray_ff_reg[3]_0 ,
    ram_empty_fb_i_reg,
    almost_full,
    wr_clk,
    rd_clk);
  output ram_full_fb_i_reg;
  output [2:0]RD_PNTR_WR;
  output [1:0]D;
  output \dest_out_bin_ff_reg[0] ;
  output [3:0]WR_PNTR_RD;
  output \dest_out_bin_ff_reg[2] ;
  output wr_en_0;
  input out;
  input wr_en;
  input \gaf.ram_almost_full_i_reg ;
  input [3:0]Q;
  input [3:0]\gaf.ram_almost_full_i_i_3_0 ;
  input [3:0]\gaf.ram_almost_full_i_i_2_0 ;
  input [3:0]\src_gray_ff_reg[3] ;
  input [3:0]\src_gray_ff_reg[3]_0 ;
  input ram_empty_fb_i_reg;
  input almost_full;
  input wr_clk;
  input rd_clk;

  wire [1:0]D;
  wire [3:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire [3:0]WR_PNTR_RD;
  wire almost_full;
  wire \dest_out_bin_ff_reg[0] ;
  wire \dest_out_bin_ff_reg[2] ;
  wire [3:0]\gaf.ram_almost_full_i_i_2_0 ;
  wire [3:0]\gaf.ram_almost_full_i_i_3_0 ;
  wire \gaf.ram_almost_full_i_i_4_n_0 ;
  wire \gaf.ram_almost_full_i_i_5_n_0 ;
  wire \gaf.ram_almost_full_i_reg ;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp2 ;
  wire \gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp3 ;
  wire out;
  wire [3:3]p_25_out;
  wire ram_empty_fb_i_reg;
  wire ram_empty_i_i_2_n_0;
  wire ram_full_fb_i_reg;
  wire ram_full_i_i_3_n_0;
  wire rd_clk;
  wire [3:0]\src_gray_ff_reg[3] ;
  wire [3:0]\src_gray_ff_reg[3]_0 ;
  wire wr_clk;
  wire \wr_data_count_i[4]_i_2_n_0 ;
  wire \wr_data_count_i[4]_i_3_n_0 ;
  wire wr_en;
  wire wr_en_0;

  LUT6 #(
    .INIT(64'h0960900909600960)) 
    \g_rd.gvalid_low.rd_dc_i[4]_i_3 
       (.I0(WR_PNTR_RD[2]),
        .I1(\src_gray_ff_reg[3]_0 [2]),
        .I2(WR_PNTR_RD[1]),
        .I3(\src_gray_ff_reg[3]_0 [1]),
        .I4(WR_PNTR_RD[0]),
        .I5(\src_gray_ff_reg[3]_0 [0]),
        .O(\dest_out_bin_ff_reg[2] ));
  LUT6 #(
    .INIT(64'h00FF00F8000000F8)) 
    \gaf.ram_almost_full_i_i_1 
       (.I0(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp3 ),
        .I1(wr_en),
        .I2(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp2 ),
        .I3(\gaf.ram_almost_full_i_reg ),
        .I4(out),
        .I5(almost_full),
        .O(wr_en_0));
  LUT5 #(
    .INIT(32'h90090000)) 
    \gaf.ram_almost_full_i_i_2 
       (.I0(\gaf.ram_almost_full_i_i_2_0 [1]),
        .I1(RD_PNTR_WR[1]),
        .I2(\gaf.ram_almost_full_i_i_2_0 [0]),
        .I3(RD_PNTR_WR[0]),
        .I4(\gaf.ram_almost_full_i_i_4_n_0 ),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp3 ));
  LUT5 #(
    .INIT(32'h90090000)) 
    \gaf.ram_almost_full_i_i_3 
       (.I0(\gaf.ram_almost_full_i_i_3_0 [1]),
        .I1(RD_PNTR_WR[1]),
        .I2(\gaf.ram_almost_full_i_i_3_0 [0]),
        .I3(RD_PNTR_WR[0]),
        .I4(\gaf.ram_almost_full_i_i_5_n_0 ),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp2 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gaf.ram_almost_full_i_i_4 
       (.I0(RD_PNTR_WR[2]),
        .I1(\gaf.ram_almost_full_i_i_2_0 [2]),
        .I2(p_25_out),
        .I3(\gaf.ram_almost_full_i_i_2_0 [3]),
        .O(\gaf.ram_almost_full_i_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \gaf.ram_almost_full_i_i_5 
       (.I0(RD_PNTR_WR[2]),
        .I1(\gaf.ram_almost_full_i_i_3_0 [2]),
        .I2(p_25_out),
        .I3(\gaf.ram_almost_full_i_i_3_0 [3]),
        .O(\gaf.ram_almost_full_i_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF82000082)) 
    ram_empty_i_i_1
       (.I0(ram_empty_i_i_2_n_0),
        .I1(WR_PNTR_RD[0]),
        .I2(\src_gray_ff_reg[3]_0 [0]),
        .I3(WR_PNTR_RD[1]),
        .I4(\src_gray_ff_reg[3]_0 [1]),
        .I5(ram_empty_fb_i_reg),
        .O(\dest_out_bin_ff_reg[0] ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_2
       (.I0(WR_PNTR_RD[2]),
        .I1(\src_gray_ff_reg[3]_0 [2]),
        .I2(WR_PNTR_RD[3]),
        .I3(\src_gray_ff_reg[3]_0 [3]),
        .O(ram_empty_i_i_2_n_0));
  LUT5 #(
    .INIT(32'h0000FF20)) 
    ram_full_i_i_1
       (.I0(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp2 ),
        .I1(out),
        .I2(wr_en),
        .I3(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ),
        .I4(\gaf.ram_almost_full_i_reg ),
        .O(ram_full_fb_i_reg));
  LUT5 #(
    .INIT(32'h90090000)) 
    ram_full_i_i_2
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .I2(Q[0]),
        .I3(RD_PNTR_WR[0]),
        .I4(ram_full_i_i_3_n_0),
        .O(\gntv_or_sync_fifo.gl0.wr/gwas.wsts/comp1 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_full_i_i_3
       (.I0(RD_PNTR_WR[2]),
        .I1(Q[2]),
        .I2(p_25_out),
        .I3(Q[3]),
        .O(ram_full_i_i_3_n_0));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "4" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  axi_mem2stream_fifo_async_34x16_xpm_cdc_gray rd_pntr_cdc_inst
       (.dest_clk(wr_clk),
        .dest_out_bin({p_25_out,RD_PNTR_WR}),
        .src_clk(rd_clk),
        .src_in_bin(\src_gray_ff_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h3C96693C693CC369)) 
    \wr_data_count_i[3]_i_1 
       (.I0(\wr_data_count_i[4]_i_2_n_0 ),
        .I1(\src_gray_ff_reg[3] [3]),
        .I2(p_25_out),
        .I3(RD_PNTR_WR[2]),
        .I4(\src_gray_ff_reg[3] [2]),
        .I5(\wr_data_count_i[4]_i_3_n_0 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'h0090600090000090)) 
    \wr_data_count_i[4]_i_1 
       (.I0(\src_gray_ff_reg[3] [3]),
        .I1(p_25_out),
        .I2(\wr_data_count_i[4]_i_2_n_0 ),
        .I3(\wr_data_count_i[4]_i_3_n_0 ),
        .I4(RD_PNTR_WR[2]),
        .I5(\src_gray_ff_reg[3] [2]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h2DD2)) 
    \wr_data_count_i[4]_i_2 
       (.I0(RD_PNTR_WR[0]),
        .I1(\src_gray_ff_reg[3] [0]),
        .I2(RD_PNTR_WR[1]),
        .I3(\src_gray_ff_reg[3] [1]),
        .O(\wr_data_count_i[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hDD4D)) 
    \wr_data_count_i[4]_i_3 
       (.I0(RD_PNTR_WR[1]),
        .I1(\src_gray_ff_reg[3] [1]),
        .I2(RD_PNTR_WR[0]),
        .I3(\src_gray_ff_reg[3] [0]),
        .O(\wr_data_count_i[4]_i_3_n_0 ));
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* REG_OUTPUT = "1" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SIM_LOSSLESS_GRAY_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "4" *) 
  (* XPM_CDC = "GRAY" *) 
  (* XPM_MODULE = "TRUE" *) 
  axi_mem2stream_fifo_async_34x16_xpm_cdc_gray__2 wr_pntr_cdc_inst
       (.dest_clk(rd_clk),
        .dest_out_bin(WR_PNTR_RD),
        .src_clk(wr_clk),
        .src_in_bin(\src_gray_ff_reg[3] ));
endmodule

(* ORIG_REF_NAME = "fifo_generator_ramfifo" *) 
module axi_mem2stream_fifo_async_34x16_fifo_generator_ramfifo
   (wr_rst_busy,
    AR,
    empty,
    VALID,
    full,
    dout,
    rd_data_count,
    wr_data_count,
    almost_full,
    wr_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output VALID;
  output full;
  output [33:0]dout;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output almost_full;
  input wr_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [33:0]din;
  input rd_en;

  wire [0:0]AR;
  wire VALID;
  wire almost_full;
  wire [33:0]din;
  wire [33:0]dout;
  wire empty;
  wire full;
  wire \gntv_or_sync_fifo.gcx.clkx_n_0 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_11 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_12 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_4 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_5 ;
  wire \gntv_or_sync_fifo.gcx.clkx_n_6 ;
  wire \gntv_or_sync_fifo.gl0.rd_n_3 ;
  wire \gntv_or_sync_fifo.gl0.wr_n_1 ;
  wire [3:0]p_0_out;
  wire [3:0]p_13_out;
  wire [3:0]p_14_out;
  wire p_20_out;
  wire [3:0]p_24_out;
  wire [2:0]p_25_out;
  wire p_6_out;
  wire rd_clk;
  wire [4:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire rst_full_ff_i;
  wire rst_full_gen_i;
  wire rstblk_n_0;
  wire tmp_ram_rd_en;
  wire wr_clk;
  wire [4:0]wr_data_count;
  wire wr_en;
  wire [3:0]wr_pntr_plus2;
  wire [3:0]wr_pntr_plus3;
  wire wr_rst_busy;

  axi_mem2stream_fifo_async_34x16_clk_x_pntrs \gntv_or_sync_fifo.gcx.clkx 
       (.D({\gntv_or_sync_fifo.gcx.clkx_n_4 ,\gntv_or_sync_fifo.gcx.clkx_n_5 }),
        .Q(p_14_out),
        .RD_PNTR_WR(p_25_out),
        .WR_PNTR_RD(p_24_out),
        .almost_full(almost_full),
        .\dest_out_bin_ff_reg[0] (\gntv_or_sync_fifo.gcx.clkx_n_6 ),
        .\dest_out_bin_ff_reg[2] (\gntv_or_sync_fifo.gcx.clkx_n_11 ),
        .\gaf.ram_almost_full_i_i_2_0 (wr_pntr_plus3),
        .\gaf.ram_almost_full_i_i_3_0 (wr_pntr_plus2),
        .\gaf.ram_almost_full_i_reg (rst_full_gen_i),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gl0.rd_n_3 ),
        .ram_full_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .rd_clk(rd_clk),
        .\src_gray_ff_reg[3] (p_13_out),
        .\src_gray_ff_reg[3]_0 (p_0_out),
        .wr_clk(wr_clk),
        .wr_en(wr_en),
        .wr_en_0(\gntv_or_sync_fifo.gcx.clkx_n_12 ));
  axi_mem2stream_fifo_async_34x16_rd_logic \gntv_or_sync_fifo.gl0.rd 
       (.AS(AR),
        .E(p_6_out),
        .Q(p_0_out),
        .WR_PNTR_RD(p_24_out),
        .empty(empty),
        .\g_rd.gvalid_low.rd_dc_i_reg[4] (\gntv_or_sync_fifo.gcx.clkx_n_11 ),
        .\gc0.count_reg[0] (\gntv_or_sync_fifo.gl0.rd_n_3 ),
        .out(VALID),
        .ram_empty_fb_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_6 ),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  axi_mem2stream_fifo_async_34x16_wr_logic \gntv_or_sync_fifo.gl0.wr 
       (.AR(rstblk_n_0),
        .D({\gntv_or_sync_fifo.gcx.clkx_n_4 ,\gntv_or_sync_fifo.gcx.clkx_n_5 }),
        .E(p_20_out),
        .Q(p_13_out),
        .RD_PNTR_WR(p_25_out),
        .almost_full(almost_full),
        .full(full),
        .\gaf.ram_almost_full_i_reg (rst_full_ff_i),
        .\gaf.ram_almost_full_i_reg_0 (\gntv_or_sync_fifo.gcx.clkx_n_12 ),
        .\gic0.gc1.count_d1_reg[3] (wr_pntr_plus2),
        .\gic0.gc1.count_d2_reg[3] (p_14_out),
        .\gic0.gc1.count_reg[3] (wr_pntr_plus3),
        .out(\gntv_or_sync_fifo.gl0.wr_n_1 ),
        .ram_full_i_reg(\gntv_or_sync_fifo.gcx.clkx_n_0 ),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en));
  axi_mem2stream_fifo_async_34x16_memory \gntv_or_sync_fifo.mem 
       (.\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (p_13_out),
        .E(p_20_out),
        .Q(p_0_out),
        .SR(AR),
        .din(din),
        .dout(dout),
        .\goreg_bm.dout_i_reg[33]_0 (p_6_out),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
  axi_mem2stream_fifo_async_34x16_reset_blk_ramfifo rstblk
       (.AR(rstblk_n_0),
        .SR(AR),
        .\grstd1.grst_full.grst_f.rst_d3_reg_0 (rst_full_gen_i),
        .out(rst_full_ff_i),
        .rd_clk(rd_clk),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_top" *) 
module axi_mem2stream_fifo_async_34x16_fifo_generator_top
   (wr_rst_busy,
    AS,
    empty,
    VALID,
    full,
    dout,
    rd_data_count,
    wr_data_count,
    almost_full,
    wr_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en);
  output wr_rst_busy;
  output [0:0]AS;
  output empty;
  output VALID;
  output full;
  output [33:0]dout;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output almost_full;
  input wr_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [33:0]din;
  input rd_en;

  wire [0:0]AS;
  wire VALID;
  wire almost_full;
  wire [33:0]din;
  wire [33:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [4:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire [4:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  axi_mem2stream_fifo_async_34x16_fifo_generator_ramfifo \grf.rf 
       (.AR(AS),
        .VALID(VALID),
        .almost_full(almost_full),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* C_ADD_NGC_CONSTRAINT = "0" *) (* C_APPLICATION_TYPE_AXIS = "0" *) (* C_APPLICATION_TYPE_RACH = "0" *) 
(* C_APPLICATION_TYPE_RDCH = "0" *) (* C_APPLICATION_TYPE_WACH = "0" *) (* C_APPLICATION_TYPE_WDCH = "0" *) 
(* C_APPLICATION_TYPE_WRCH = "0" *) (* C_AXIS_TDATA_WIDTH = "8" *) (* C_AXIS_TDEST_WIDTH = "1" *) 
(* C_AXIS_TID_WIDTH = "1" *) (* C_AXIS_TKEEP_WIDTH = "1" *) (* C_AXIS_TSTRB_WIDTH = "1" *) 
(* C_AXIS_TUSER_WIDTH = "4" *) (* C_AXIS_TYPE = "0" *) (* C_AXI_ADDR_WIDTH = "32" *) 
(* C_AXI_ARUSER_WIDTH = "1" *) (* C_AXI_AWUSER_WIDTH = "1" *) (* C_AXI_BUSER_WIDTH = "1" *) 
(* C_AXI_DATA_WIDTH = "64" *) (* C_AXI_ID_WIDTH = "1" *) (* C_AXI_LEN_WIDTH = "8" *) 
(* C_AXI_LOCK_WIDTH = "1" *) (* C_AXI_RUSER_WIDTH = "1" *) (* C_AXI_TYPE = "1" *) 
(* C_AXI_WUSER_WIDTH = "1" *) (* C_COMMON_CLOCK = "0" *) (* C_COUNT_TYPE = "0" *) 
(* C_DATA_COUNT_WIDTH = "4" *) (* C_DEFAULT_VALUE = "BlankString" *) (* C_DIN_WIDTH = "34" *) 
(* C_DIN_WIDTH_AXIS = "1" *) (* C_DIN_WIDTH_RACH = "32" *) (* C_DIN_WIDTH_RDCH = "64" *) 
(* C_DIN_WIDTH_WACH = "1" *) (* C_DIN_WIDTH_WDCH = "64" *) (* C_DIN_WIDTH_WRCH = "2" *) 
(* C_DOUT_RST_VAL = "0" *) (* C_DOUT_WIDTH = "34" *) (* C_ENABLE_RLOCS = "0" *) 
(* C_ENABLE_RST_SYNC = "1" *) (* C_EN_SAFETY_CKT = "0" *) (* C_ERROR_INJECTION_TYPE = "0" *) 
(* C_ERROR_INJECTION_TYPE_AXIS = "0" *) (* C_ERROR_INJECTION_TYPE_RACH = "0" *) (* C_ERROR_INJECTION_TYPE_RDCH = "0" *) 
(* C_ERROR_INJECTION_TYPE_WACH = "0" *) (* C_ERROR_INJECTION_TYPE_WDCH = "0" *) (* C_ERROR_INJECTION_TYPE_WRCH = "0" *) 
(* C_FAMILY = "zynq" *) (* C_FULL_FLAGS_RST_VAL = "1" *) (* C_HAS_ALMOST_EMPTY = "0" *) 
(* C_HAS_ALMOST_FULL = "1" *) (* C_HAS_AXIS_TDATA = "1" *) (* C_HAS_AXIS_TDEST = "0" *) 
(* C_HAS_AXIS_TID = "0" *) (* C_HAS_AXIS_TKEEP = "0" *) (* C_HAS_AXIS_TLAST = "0" *) 
(* C_HAS_AXIS_TREADY = "1" *) (* C_HAS_AXIS_TSTRB = "0" *) (* C_HAS_AXIS_TUSER = "1" *) 
(* C_HAS_AXI_ARUSER = "0" *) (* C_HAS_AXI_AWUSER = "0" *) (* C_HAS_AXI_BUSER = "0" *) 
(* C_HAS_AXI_ID = "0" *) (* C_HAS_AXI_RD_CHANNEL = "1" *) (* C_HAS_AXI_RUSER = "0" *) 
(* C_HAS_AXI_WR_CHANNEL = "1" *) (* C_HAS_AXI_WUSER = "0" *) (* C_HAS_BACKUP = "0" *) 
(* C_HAS_DATA_COUNT = "0" *) (* C_HAS_DATA_COUNTS_AXIS = "0" *) (* C_HAS_DATA_COUNTS_RACH = "0" *) 
(* C_HAS_DATA_COUNTS_RDCH = "0" *) (* C_HAS_DATA_COUNTS_WACH = "0" *) (* C_HAS_DATA_COUNTS_WDCH = "0" *) 
(* C_HAS_DATA_COUNTS_WRCH = "0" *) (* C_HAS_INT_CLK = "0" *) (* C_HAS_MASTER_CE = "0" *) 
(* C_HAS_MEMINIT_FILE = "0" *) (* C_HAS_OVERFLOW = "0" *) (* C_HAS_PROG_FLAGS_AXIS = "0" *) 
(* C_HAS_PROG_FLAGS_RACH = "0" *) (* C_HAS_PROG_FLAGS_RDCH = "0" *) (* C_HAS_PROG_FLAGS_WACH = "0" *) 
(* C_HAS_PROG_FLAGS_WDCH = "0" *) (* C_HAS_PROG_FLAGS_WRCH = "0" *) (* C_HAS_RD_DATA_COUNT = "1" *) 
(* C_HAS_RD_RST = "0" *) (* C_HAS_RST = "1" *) (* C_HAS_SLAVE_CE = "0" *) 
(* C_HAS_SRST = "0" *) (* C_HAS_UNDERFLOW = "0" *) (* C_HAS_VALID = "1" *) 
(* C_HAS_WR_ACK = "0" *) (* C_HAS_WR_DATA_COUNT = "1" *) (* C_HAS_WR_RST = "0" *) 
(* C_IMPLEMENTATION_TYPE = "2" *) (* C_IMPLEMENTATION_TYPE_AXIS = "1" *) (* C_IMPLEMENTATION_TYPE_RACH = "1" *) 
(* C_IMPLEMENTATION_TYPE_RDCH = "1" *) (* C_IMPLEMENTATION_TYPE_WACH = "1" *) (* C_IMPLEMENTATION_TYPE_WDCH = "1" *) 
(* C_IMPLEMENTATION_TYPE_WRCH = "1" *) (* C_INIT_WR_PNTR_VAL = "0" *) (* C_INTERFACE_TYPE = "0" *) 
(* C_MEMORY_TYPE = "1" *) (* C_MIF_FILE_NAME = "BlankString" *) (* C_MSGON_VAL = "1" *) 
(* C_OPTIMIZATION_MODE = "0" *) (* C_OVERFLOW_LOW = "0" *) (* C_POWER_SAVING_MODE = "0" *) 
(* C_PRELOAD_LATENCY = "0" *) (* C_PRELOAD_REGS = "1" *) (* C_PRIM_FIFO_TYPE = "512x36" *) 
(* C_PRIM_FIFO_TYPE_AXIS = "1kx18" *) (* C_PRIM_FIFO_TYPE_RACH = "512x36" *) (* C_PRIM_FIFO_TYPE_RDCH = "1kx36" *) 
(* C_PRIM_FIFO_TYPE_WACH = "512x36" *) (* C_PRIM_FIFO_TYPE_WDCH = "1kx36" *) (* C_PRIM_FIFO_TYPE_WRCH = "512x36" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL = "4" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_AXIS = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_RACH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_RDCH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WACH = "1022" *) (* C_PROG_EMPTY_THRESH_ASSERT_VAL_WDCH = "1022" *) 
(* C_PROG_EMPTY_THRESH_ASSERT_VAL_WRCH = "1022" *) (* C_PROG_EMPTY_THRESH_NEGATE_VAL = "5" *) (* C_PROG_EMPTY_TYPE = "0" *) 
(* C_PROG_EMPTY_TYPE_AXIS = "0" *) (* C_PROG_EMPTY_TYPE_RACH = "0" *) (* C_PROG_EMPTY_TYPE_RDCH = "0" *) 
(* C_PROG_EMPTY_TYPE_WACH = "0" *) (* C_PROG_EMPTY_TYPE_WDCH = "0" *) (* C_PROG_EMPTY_TYPE_WRCH = "0" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL = "15" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_AXIS = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_RACH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_RDCH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WACH = "1023" *) (* C_PROG_FULL_THRESH_ASSERT_VAL_WDCH = "1023" *) 
(* C_PROG_FULL_THRESH_ASSERT_VAL_WRCH = "1023" *) (* C_PROG_FULL_THRESH_NEGATE_VAL = "14" *) (* C_PROG_FULL_TYPE = "0" *) 
(* C_PROG_FULL_TYPE_AXIS = "0" *) (* C_PROG_FULL_TYPE_RACH = "0" *) (* C_PROG_FULL_TYPE_RDCH = "0" *) 
(* C_PROG_FULL_TYPE_WACH = "0" *) (* C_PROG_FULL_TYPE_WDCH = "0" *) (* C_PROG_FULL_TYPE_WRCH = "0" *) 
(* C_RACH_TYPE = "0" *) (* C_RDCH_TYPE = "0" *) (* C_RD_DATA_COUNT_WIDTH = "5" *) 
(* C_RD_DEPTH = "16" *) (* C_RD_FREQ = "1" *) (* C_RD_PNTR_WIDTH = "4" *) 
(* C_REG_SLICE_MODE_AXIS = "0" *) (* C_REG_SLICE_MODE_RACH = "0" *) (* C_REG_SLICE_MODE_RDCH = "0" *) 
(* C_REG_SLICE_MODE_WACH = "0" *) (* C_REG_SLICE_MODE_WDCH = "0" *) (* C_REG_SLICE_MODE_WRCH = "0" *) 
(* C_SELECT_XPM = "0" *) (* C_SYNCHRONIZER_STAGE = "2" *) (* C_UNDERFLOW_LOW = "0" *) 
(* C_USE_COMMON_OVERFLOW = "0" *) (* C_USE_COMMON_UNDERFLOW = "0" *) (* C_USE_DEFAULT_SETTINGS = "0" *) 
(* C_USE_DOUT_RST = "1" *) (* C_USE_ECC = "0" *) (* C_USE_ECC_AXIS = "0" *) 
(* C_USE_ECC_RACH = "0" *) (* C_USE_ECC_RDCH = "0" *) (* C_USE_ECC_WACH = "0" *) 
(* C_USE_ECC_WDCH = "0" *) (* C_USE_ECC_WRCH = "0" *) (* C_USE_EMBEDDED_REG = "0" *) 
(* C_USE_FIFO16_FLAGS = "0" *) (* C_USE_FWFT_DATA_COUNT = "1" *) (* C_USE_PIPELINE_REG = "0" *) 
(* C_VALID_LOW = "0" *) (* C_WACH_TYPE = "0" *) (* C_WDCH_TYPE = "0" *) 
(* C_WRCH_TYPE = "0" *) (* C_WR_ACK_LOW = "0" *) (* C_WR_DATA_COUNT_WIDTH = "5" *) 
(* C_WR_DEPTH = "16" *) (* C_WR_DEPTH_AXIS = "1024" *) (* C_WR_DEPTH_RACH = "16" *) 
(* C_WR_DEPTH_RDCH = "1024" *) (* C_WR_DEPTH_WACH = "16" *) (* C_WR_DEPTH_WDCH = "1024" *) 
(* C_WR_DEPTH_WRCH = "16" *) (* C_WR_FREQ = "1" *) (* C_WR_PNTR_WIDTH = "4" *) 
(* C_WR_PNTR_WIDTH_AXIS = "10" *) (* C_WR_PNTR_WIDTH_RACH = "4" *) (* C_WR_PNTR_WIDTH_RDCH = "10" *) 
(* C_WR_PNTR_WIDTH_WACH = "4" *) (* C_WR_PNTR_WIDTH_WDCH = "10" *) (* C_WR_PNTR_WIDTH_WRCH = "4" *) 
(* C_WR_RESPONSE_LATENCY = "1" *) (* ORIG_REF_NAME = "fifo_generator_v13_2_3" *) 
module axi_mem2stream_fifo_async_34x16_fifo_generator_v13_2_3
   (backup,
    backup_marker,
    clk,
    rst,
    srst,
    wr_clk,
    wr_rst,
    rd_clk,
    rd_rst,
    din,
    wr_en,
    rd_en,
    prog_empty_thresh,
    prog_empty_thresh_assert,
    prog_empty_thresh_negate,
    prog_full_thresh,
    prog_full_thresh_assert,
    prog_full_thresh_negate,
    int_clk,
    injectdbiterr,
    injectsbiterr,
    sleep,
    dout,
    full,
    almost_full,
    wr_ack,
    overflow,
    empty,
    almost_empty,
    valid,
    underflow,
    data_count,
    rd_data_count,
    wr_data_count,
    prog_full,
    prog_empty,
    sbiterr,
    dbiterr,
    wr_rst_busy,
    rd_rst_busy,
    m_aclk,
    s_aclk,
    s_aresetn,
    m_aclk_en,
    s_aclk_en,
    s_axi_awid,
    s_axi_awaddr,
    s_axi_awlen,
    s_axi_awsize,
    s_axi_awburst,
    s_axi_awlock,
    s_axi_awcache,
    s_axi_awprot,
    s_axi_awqos,
    s_axi_awregion,
    s_axi_awuser,
    s_axi_awvalid,
    s_axi_awready,
    s_axi_wid,
    s_axi_wdata,
    s_axi_wstrb,
    s_axi_wlast,
    s_axi_wuser,
    s_axi_wvalid,
    s_axi_wready,
    s_axi_bid,
    s_axi_bresp,
    s_axi_buser,
    s_axi_bvalid,
    s_axi_bready,
    m_axi_awid,
    m_axi_awaddr,
    m_axi_awlen,
    m_axi_awsize,
    m_axi_awburst,
    m_axi_awlock,
    m_axi_awcache,
    m_axi_awprot,
    m_axi_awqos,
    m_axi_awregion,
    m_axi_awuser,
    m_axi_awvalid,
    m_axi_awready,
    m_axi_wid,
    m_axi_wdata,
    m_axi_wstrb,
    m_axi_wlast,
    m_axi_wuser,
    m_axi_wvalid,
    m_axi_wready,
    m_axi_bid,
    m_axi_bresp,
    m_axi_buser,
    m_axi_bvalid,
    m_axi_bready,
    s_axi_arid,
    s_axi_araddr,
    s_axi_arlen,
    s_axi_arsize,
    s_axi_arburst,
    s_axi_arlock,
    s_axi_arcache,
    s_axi_arprot,
    s_axi_arqos,
    s_axi_arregion,
    s_axi_aruser,
    s_axi_arvalid,
    s_axi_arready,
    s_axi_rid,
    s_axi_rdata,
    s_axi_rresp,
    s_axi_rlast,
    s_axi_ruser,
    s_axi_rvalid,
    s_axi_rready,
    m_axi_arid,
    m_axi_araddr,
    m_axi_arlen,
    m_axi_arsize,
    m_axi_arburst,
    m_axi_arlock,
    m_axi_arcache,
    m_axi_arprot,
    m_axi_arqos,
    m_axi_arregion,
    m_axi_aruser,
    m_axi_arvalid,
    m_axi_arready,
    m_axi_rid,
    m_axi_rdata,
    m_axi_rresp,
    m_axi_rlast,
    m_axi_ruser,
    m_axi_rvalid,
    m_axi_rready,
    s_axis_tvalid,
    s_axis_tready,
    s_axis_tdata,
    s_axis_tstrb,
    s_axis_tkeep,
    s_axis_tlast,
    s_axis_tid,
    s_axis_tdest,
    s_axis_tuser,
    m_axis_tvalid,
    m_axis_tready,
    m_axis_tdata,
    m_axis_tstrb,
    m_axis_tkeep,
    m_axis_tlast,
    m_axis_tid,
    m_axis_tdest,
    m_axis_tuser,
    axi_aw_injectsbiterr,
    axi_aw_injectdbiterr,
    axi_aw_prog_full_thresh,
    axi_aw_prog_empty_thresh,
    axi_aw_data_count,
    axi_aw_wr_data_count,
    axi_aw_rd_data_count,
    axi_aw_sbiterr,
    axi_aw_dbiterr,
    axi_aw_overflow,
    axi_aw_underflow,
    axi_aw_prog_full,
    axi_aw_prog_empty,
    axi_w_injectsbiterr,
    axi_w_injectdbiterr,
    axi_w_prog_full_thresh,
    axi_w_prog_empty_thresh,
    axi_w_data_count,
    axi_w_wr_data_count,
    axi_w_rd_data_count,
    axi_w_sbiterr,
    axi_w_dbiterr,
    axi_w_overflow,
    axi_w_underflow,
    axi_w_prog_full,
    axi_w_prog_empty,
    axi_b_injectsbiterr,
    axi_b_injectdbiterr,
    axi_b_prog_full_thresh,
    axi_b_prog_empty_thresh,
    axi_b_data_count,
    axi_b_wr_data_count,
    axi_b_rd_data_count,
    axi_b_sbiterr,
    axi_b_dbiterr,
    axi_b_overflow,
    axi_b_underflow,
    axi_b_prog_full,
    axi_b_prog_empty,
    axi_ar_injectsbiterr,
    axi_ar_injectdbiterr,
    axi_ar_prog_full_thresh,
    axi_ar_prog_empty_thresh,
    axi_ar_data_count,
    axi_ar_wr_data_count,
    axi_ar_rd_data_count,
    axi_ar_sbiterr,
    axi_ar_dbiterr,
    axi_ar_overflow,
    axi_ar_underflow,
    axi_ar_prog_full,
    axi_ar_prog_empty,
    axi_r_injectsbiterr,
    axi_r_injectdbiterr,
    axi_r_prog_full_thresh,
    axi_r_prog_empty_thresh,
    axi_r_data_count,
    axi_r_wr_data_count,
    axi_r_rd_data_count,
    axi_r_sbiterr,
    axi_r_dbiterr,
    axi_r_overflow,
    axi_r_underflow,
    axi_r_prog_full,
    axi_r_prog_empty,
    axis_injectsbiterr,
    axis_injectdbiterr,
    axis_prog_full_thresh,
    axis_prog_empty_thresh,
    axis_data_count,
    axis_wr_data_count,
    axis_rd_data_count,
    axis_sbiterr,
    axis_dbiterr,
    axis_overflow,
    axis_underflow,
    axis_prog_full,
    axis_prog_empty);
  input backup;
  input backup_marker;
  input clk;
  input rst;
  input srst;
  input wr_clk;
  input wr_rst;
  input rd_clk;
  input rd_rst;
  input [33:0]din;
  input wr_en;
  input rd_en;
  input [3:0]prog_empty_thresh;
  input [3:0]prog_empty_thresh_assert;
  input [3:0]prog_empty_thresh_negate;
  input [3:0]prog_full_thresh;
  input [3:0]prog_full_thresh_assert;
  input [3:0]prog_full_thresh_negate;
  input int_clk;
  input injectdbiterr;
  input injectsbiterr;
  input sleep;
  output [33:0]dout;
  output full;
  output almost_full;
  output wr_ack;
  output overflow;
  output empty;
  output almost_empty;
  output valid;
  output underflow;
  output [3:0]data_count;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output prog_full;
  output prog_empty;
  output sbiterr;
  output dbiterr;
  output wr_rst_busy;
  output rd_rst_busy;
  input m_aclk;
  input s_aclk;
  input s_aresetn;
  input m_aclk_en;
  input s_aclk_en;
  input [0:0]s_axi_awid;
  input [31:0]s_axi_awaddr;
  input [7:0]s_axi_awlen;
  input [2:0]s_axi_awsize;
  input [1:0]s_axi_awburst;
  input [0:0]s_axi_awlock;
  input [3:0]s_axi_awcache;
  input [2:0]s_axi_awprot;
  input [3:0]s_axi_awqos;
  input [3:0]s_axi_awregion;
  input [0:0]s_axi_awuser;
  input s_axi_awvalid;
  output s_axi_awready;
  input [0:0]s_axi_wid;
  input [63:0]s_axi_wdata;
  input [7:0]s_axi_wstrb;
  input s_axi_wlast;
  input [0:0]s_axi_wuser;
  input s_axi_wvalid;
  output s_axi_wready;
  output [0:0]s_axi_bid;
  output [1:0]s_axi_bresp;
  output [0:0]s_axi_buser;
  output s_axi_bvalid;
  input s_axi_bready;
  output [0:0]m_axi_awid;
  output [31:0]m_axi_awaddr;
  output [7:0]m_axi_awlen;
  output [2:0]m_axi_awsize;
  output [1:0]m_axi_awburst;
  output [0:0]m_axi_awlock;
  output [3:0]m_axi_awcache;
  output [2:0]m_axi_awprot;
  output [3:0]m_axi_awqos;
  output [3:0]m_axi_awregion;
  output [0:0]m_axi_awuser;
  output m_axi_awvalid;
  input m_axi_awready;
  output [0:0]m_axi_wid;
  output [63:0]m_axi_wdata;
  output [7:0]m_axi_wstrb;
  output m_axi_wlast;
  output [0:0]m_axi_wuser;
  output m_axi_wvalid;
  input m_axi_wready;
  input [0:0]m_axi_bid;
  input [1:0]m_axi_bresp;
  input [0:0]m_axi_buser;
  input m_axi_bvalid;
  output m_axi_bready;
  input [0:0]s_axi_arid;
  input [31:0]s_axi_araddr;
  input [7:0]s_axi_arlen;
  input [2:0]s_axi_arsize;
  input [1:0]s_axi_arburst;
  input [0:0]s_axi_arlock;
  input [3:0]s_axi_arcache;
  input [2:0]s_axi_arprot;
  input [3:0]s_axi_arqos;
  input [3:0]s_axi_arregion;
  input [0:0]s_axi_aruser;
  input s_axi_arvalid;
  output s_axi_arready;
  output [0:0]s_axi_rid;
  output [63:0]s_axi_rdata;
  output [1:0]s_axi_rresp;
  output s_axi_rlast;
  output [0:0]s_axi_ruser;
  output s_axi_rvalid;
  input s_axi_rready;
  output [0:0]m_axi_arid;
  output [31:0]m_axi_araddr;
  output [7:0]m_axi_arlen;
  output [2:0]m_axi_arsize;
  output [1:0]m_axi_arburst;
  output [0:0]m_axi_arlock;
  output [3:0]m_axi_arcache;
  output [2:0]m_axi_arprot;
  output [3:0]m_axi_arqos;
  output [3:0]m_axi_arregion;
  output [0:0]m_axi_aruser;
  output m_axi_arvalid;
  input m_axi_arready;
  input [0:0]m_axi_rid;
  input [63:0]m_axi_rdata;
  input [1:0]m_axi_rresp;
  input m_axi_rlast;
  input [0:0]m_axi_ruser;
  input m_axi_rvalid;
  output m_axi_rready;
  input s_axis_tvalid;
  output s_axis_tready;
  input [7:0]s_axis_tdata;
  input [0:0]s_axis_tstrb;
  input [0:0]s_axis_tkeep;
  input s_axis_tlast;
  input [0:0]s_axis_tid;
  input [0:0]s_axis_tdest;
  input [3:0]s_axis_tuser;
  output m_axis_tvalid;
  input m_axis_tready;
  output [7:0]m_axis_tdata;
  output [0:0]m_axis_tstrb;
  output [0:0]m_axis_tkeep;
  output m_axis_tlast;
  output [0:0]m_axis_tid;
  output [0:0]m_axis_tdest;
  output [3:0]m_axis_tuser;
  input axi_aw_injectsbiterr;
  input axi_aw_injectdbiterr;
  input [3:0]axi_aw_prog_full_thresh;
  input [3:0]axi_aw_prog_empty_thresh;
  output [4:0]axi_aw_data_count;
  output [4:0]axi_aw_wr_data_count;
  output [4:0]axi_aw_rd_data_count;
  output axi_aw_sbiterr;
  output axi_aw_dbiterr;
  output axi_aw_overflow;
  output axi_aw_underflow;
  output axi_aw_prog_full;
  output axi_aw_prog_empty;
  input axi_w_injectsbiterr;
  input axi_w_injectdbiterr;
  input [9:0]axi_w_prog_full_thresh;
  input [9:0]axi_w_prog_empty_thresh;
  output [10:0]axi_w_data_count;
  output [10:0]axi_w_wr_data_count;
  output [10:0]axi_w_rd_data_count;
  output axi_w_sbiterr;
  output axi_w_dbiterr;
  output axi_w_overflow;
  output axi_w_underflow;
  output axi_w_prog_full;
  output axi_w_prog_empty;
  input axi_b_injectsbiterr;
  input axi_b_injectdbiterr;
  input [3:0]axi_b_prog_full_thresh;
  input [3:0]axi_b_prog_empty_thresh;
  output [4:0]axi_b_data_count;
  output [4:0]axi_b_wr_data_count;
  output [4:0]axi_b_rd_data_count;
  output axi_b_sbiterr;
  output axi_b_dbiterr;
  output axi_b_overflow;
  output axi_b_underflow;
  output axi_b_prog_full;
  output axi_b_prog_empty;
  input axi_ar_injectsbiterr;
  input axi_ar_injectdbiterr;
  input [3:0]axi_ar_prog_full_thresh;
  input [3:0]axi_ar_prog_empty_thresh;
  output [4:0]axi_ar_data_count;
  output [4:0]axi_ar_wr_data_count;
  output [4:0]axi_ar_rd_data_count;
  output axi_ar_sbiterr;
  output axi_ar_dbiterr;
  output axi_ar_overflow;
  output axi_ar_underflow;
  output axi_ar_prog_full;
  output axi_ar_prog_empty;
  input axi_r_injectsbiterr;
  input axi_r_injectdbiterr;
  input [9:0]axi_r_prog_full_thresh;
  input [9:0]axi_r_prog_empty_thresh;
  output [10:0]axi_r_data_count;
  output [10:0]axi_r_wr_data_count;
  output [10:0]axi_r_rd_data_count;
  output axi_r_sbiterr;
  output axi_r_dbiterr;
  output axi_r_overflow;
  output axi_r_underflow;
  output axi_r_prog_full;
  output axi_r_prog_empty;
  input axis_injectsbiterr;
  input axis_injectdbiterr;
  input [9:0]axis_prog_full_thresh;
  input [9:0]axis_prog_empty_thresh;
  output [10:0]axis_data_count;
  output [10:0]axis_wr_data_count;
  output [10:0]axis_rd_data_count;
  output axis_sbiterr;
  output axis_dbiterr;
  output axis_overflow;
  output axis_underflow;
  output axis_prog_full;
  output axis_prog_empty;

  wire \<const0> ;
  wire \<const1> ;
  wire almost_full;
  wire [33:0]din;
  wire [33:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [4:0]rd_data_count;
  wire rd_en;
  wire rd_rst_busy;
  wire rst;
  wire valid;
  wire wr_clk;
  wire [4:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  assign almost_empty = \<const0> ;
  assign axi_ar_data_count[4] = \<const0> ;
  assign axi_ar_data_count[3] = \<const0> ;
  assign axi_ar_data_count[2] = \<const0> ;
  assign axi_ar_data_count[1] = \<const0> ;
  assign axi_ar_data_count[0] = \<const0> ;
  assign axi_ar_dbiterr = \<const0> ;
  assign axi_ar_overflow = \<const0> ;
  assign axi_ar_prog_empty = \<const1> ;
  assign axi_ar_prog_full = \<const0> ;
  assign axi_ar_rd_data_count[4] = \<const0> ;
  assign axi_ar_rd_data_count[3] = \<const0> ;
  assign axi_ar_rd_data_count[2] = \<const0> ;
  assign axi_ar_rd_data_count[1] = \<const0> ;
  assign axi_ar_rd_data_count[0] = \<const0> ;
  assign axi_ar_sbiterr = \<const0> ;
  assign axi_ar_underflow = \<const0> ;
  assign axi_ar_wr_data_count[4] = \<const0> ;
  assign axi_ar_wr_data_count[3] = \<const0> ;
  assign axi_ar_wr_data_count[2] = \<const0> ;
  assign axi_ar_wr_data_count[1] = \<const0> ;
  assign axi_ar_wr_data_count[0] = \<const0> ;
  assign axi_aw_data_count[4] = \<const0> ;
  assign axi_aw_data_count[3] = \<const0> ;
  assign axi_aw_data_count[2] = \<const0> ;
  assign axi_aw_data_count[1] = \<const0> ;
  assign axi_aw_data_count[0] = \<const0> ;
  assign axi_aw_dbiterr = \<const0> ;
  assign axi_aw_overflow = \<const0> ;
  assign axi_aw_prog_empty = \<const1> ;
  assign axi_aw_prog_full = \<const0> ;
  assign axi_aw_rd_data_count[4] = \<const0> ;
  assign axi_aw_rd_data_count[3] = \<const0> ;
  assign axi_aw_rd_data_count[2] = \<const0> ;
  assign axi_aw_rd_data_count[1] = \<const0> ;
  assign axi_aw_rd_data_count[0] = \<const0> ;
  assign axi_aw_sbiterr = \<const0> ;
  assign axi_aw_underflow = \<const0> ;
  assign axi_aw_wr_data_count[4] = \<const0> ;
  assign axi_aw_wr_data_count[3] = \<const0> ;
  assign axi_aw_wr_data_count[2] = \<const0> ;
  assign axi_aw_wr_data_count[1] = \<const0> ;
  assign axi_aw_wr_data_count[0] = \<const0> ;
  assign axi_b_data_count[4] = \<const0> ;
  assign axi_b_data_count[3] = \<const0> ;
  assign axi_b_data_count[2] = \<const0> ;
  assign axi_b_data_count[1] = \<const0> ;
  assign axi_b_data_count[0] = \<const0> ;
  assign axi_b_dbiterr = \<const0> ;
  assign axi_b_overflow = \<const0> ;
  assign axi_b_prog_empty = \<const1> ;
  assign axi_b_prog_full = \<const0> ;
  assign axi_b_rd_data_count[4] = \<const0> ;
  assign axi_b_rd_data_count[3] = \<const0> ;
  assign axi_b_rd_data_count[2] = \<const0> ;
  assign axi_b_rd_data_count[1] = \<const0> ;
  assign axi_b_rd_data_count[0] = \<const0> ;
  assign axi_b_sbiterr = \<const0> ;
  assign axi_b_underflow = \<const0> ;
  assign axi_b_wr_data_count[4] = \<const0> ;
  assign axi_b_wr_data_count[3] = \<const0> ;
  assign axi_b_wr_data_count[2] = \<const0> ;
  assign axi_b_wr_data_count[1] = \<const0> ;
  assign axi_b_wr_data_count[0] = \<const0> ;
  assign axi_r_data_count[10] = \<const0> ;
  assign axi_r_data_count[9] = \<const0> ;
  assign axi_r_data_count[8] = \<const0> ;
  assign axi_r_data_count[7] = \<const0> ;
  assign axi_r_data_count[6] = \<const0> ;
  assign axi_r_data_count[5] = \<const0> ;
  assign axi_r_data_count[4] = \<const0> ;
  assign axi_r_data_count[3] = \<const0> ;
  assign axi_r_data_count[2] = \<const0> ;
  assign axi_r_data_count[1] = \<const0> ;
  assign axi_r_data_count[0] = \<const0> ;
  assign axi_r_dbiterr = \<const0> ;
  assign axi_r_overflow = \<const0> ;
  assign axi_r_prog_empty = \<const1> ;
  assign axi_r_prog_full = \<const0> ;
  assign axi_r_rd_data_count[10] = \<const0> ;
  assign axi_r_rd_data_count[9] = \<const0> ;
  assign axi_r_rd_data_count[8] = \<const0> ;
  assign axi_r_rd_data_count[7] = \<const0> ;
  assign axi_r_rd_data_count[6] = \<const0> ;
  assign axi_r_rd_data_count[5] = \<const0> ;
  assign axi_r_rd_data_count[4] = \<const0> ;
  assign axi_r_rd_data_count[3] = \<const0> ;
  assign axi_r_rd_data_count[2] = \<const0> ;
  assign axi_r_rd_data_count[1] = \<const0> ;
  assign axi_r_rd_data_count[0] = \<const0> ;
  assign axi_r_sbiterr = \<const0> ;
  assign axi_r_underflow = \<const0> ;
  assign axi_r_wr_data_count[10] = \<const0> ;
  assign axi_r_wr_data_count[9] = \<const0> ;
  assign axi_r_wr_data_count[8] = \<const0> ;
  assign axi_r_wr_data_count[7] = \<const0> ;
  assign axi_r_wr_data_count[6] = \<const0> ;
  assign axi_r_wr_data_count[5] = \<const0> ;
  assign axi_r_wr_data_count[4] = \<const0> ;
  assign axi_r_wr_data_count[3] = \<const0> ;
  assign axi_r_wr_data_count[2] = \<const0> ;
  assign axi_r_wr_data_count[1] = \<const0> ;
  assign axi_r_wr_data_count[0] = \<const0> ;
  assign axi_w_data_count[10] = \<const0> ;
  assign axi_w_data_count[9] = \<const0> ;
  assign axi_w_data_count[8] = \<const0> ;
  assign axi_w_data_count[7] = \<const0> ;
  assign axi_w_data_count[6] = \<const0> ;
  assign axi_w_data_count[5] = \<const0> ;
  assign axi_w_data_count[4] = \<const0> ;
  assign axi_w_data_count[3] = \<const0> ;
  assign axi_w_data_count[2] = \<const0> ;
  assign axi_w_data_count[1] = \<const0> ;
  assign axi_w_data_count[0] = \<const0> ;
  assign axi_w_dbiterr = \<const0> ;
  assign axi_w_overflow = \<const0> ;
  assign axi_w_prog_empty = \<const1> ;
  assign axi_w_prog_full = \<const0> ;
  assign axi_w_rd_data_count[10] = \<const0> ;
  assign axi_w_rd_data_count[9] = \<const0> ;
  assign axi_w_rd_data_count[8] = \<const0> ;
  assign axi_w_rd_data_count[7] = \<const0> ;
  assign axi_w_rd_data_count[6] = \<const0> ;
  assign axi_w_rd_data_count[5] = \<const0> ;
  assign axi_w_rd_data_count[4] = \<const0> ;
  assign axi_w_rd_data_count[3] = \<const0> ;
  assign axi_w_rd_data_count[2] = \<const0> ;
  assign axi_w_rd_data_count[1] = \<const0> ;
  assign axi_w_rd_data_count[0] = \<const0> ;
  assign axi_w_sbiterr = \<const0> ;
  assign axi_w_underflow = \<const0> ;
  assign axi_w_wr_data_count[10] = \<const0> ;
  assign axi_w_wr_data_count[9] = \<const0> ;
  assign axi_w_wr_data_count[8] = \<const0> ;
  assign axi_w_wr_data_count[7] = \<const0> ;
  assign axi_w_wr_data_count[6] = \<const0> ;
  assign axi_w_wr_data_count[5] = \<const0> ;
  assign axi_w_wr_data_count[4] = \<const0> ;
  assign axi_w_wr_data_count[3] = \<const0> ;
  assign axi_w_wr_data_count[2] = \<const0> ;
  assign axi_w_wr_data_count[1] = \<const0> ;
  assign axi_w_wr_data_count[0] = \<const0> ;
  assign axis_data_count[10] = \<const0> ;
  assign axis_data_count[9] = \<const0> ;
  assign axis_data_count[8] = \<const0> ;
  assign axis_data_count[7] = \<const0> ;
  assign axis_data_count[6] = \<const0> ;
  assign axis_data_count[5] = \<const0> ;
  assign axis_data_count[4] = \<const0> ;
  assign axis_data_count[3] = \<const0> ;
  assign axis_data_count[2] = \<const0> ;
  assign axis_data_count[1] = \<const0> ;
  assign axis_data_count[0] = \<const0> ;
  assign axis_dbiterr = \<const0> ;
  assign axis_overflow = \<const0> ;
  assign axis_prog_empty = \<const1> ;
  assign axis_prog_full = \<const0> ;
  assign axis_rd_data_count[10] = \<const0> ;
  assign axis_rd_data_count[9] = \<const0> ;
  assign axis_rd_data_count[8] = \<const0> ;
  assign axis_rd_data_count[7] = \<const0> ;
  assign axis_rd_data_count[6] = \<const0> ;
  assign axis_rd_data_count[5] = \<const0> ;
  assign axis_rd_data_count[4] = \<const0> ;
  assign axis_rd_data_count[3] = \<const0> ;
  assign axis_rd_data_count[2] = \<const0> ;
  assign axis_rd_data_count[1] = \<const0> ;
  assign axis_rd_data_count[0] = \<const0> ;
  assign axis_sbiterr = \<const0> ;
  assign axis_underflow = \<const0> ;
  assign axis_wr_data_count[10] = \<const0> ;
  assign axis_wr_data_count[9] = \<const0> ;
  assign axis_wr_data_count[8] = \<const0> ;
  assign axis_wr_data_count[7] = \<const0> ;
  assign axis_wr_data_count[6] = \<const0> ;
  assign axis_wr_data_count[5] = \<const0> ;
  assign axis_wr_data_count[4] = \<const0> ;
  assign axis_wr_data_count[3] = \<const0> ;
  assign axis_wr_data_count[2] = \<const0> ;
  assign axis_wr_data_count[1] = \<const0> ;
  assign axis_wr_data_count[0] = \<const0> ;
  assign data_count[3] = \<const0> ;
  assign data_count[2] = \<const0> ;
  assign data_count[1] = \<const0> ;
  assign data_count[0] = \<const0> ;
  assign dbiterr = \<const0> ;
  assign m_axi_araddr[31] = \<const0> ;
  assign m_axi_araddr[30] = \<const0> ;
  assign m_axi_araddr[29] = \<const0> ;
  assign m_axi_araddr[28] = \<const0> ;
  assign m_axi_araddr[27] = \<const0> ;
  assign m_axi_araddr[26] = \<const0> ;
  assign m_axi_araddr[25] = \<const0> ;
  assign m_axi_araddr[24] = \<const0> ;
  assign m_axi_araddr[23] = \<const0> ;
  assign m_axi_araddr[22] = \<const0> ;
  assign m_axi_araddr[21] = \<const0> ;
  assign m_axi_araddr[20] = \<const0> ;
  assign m_axi_araddr[19] = \<const0> ;
  assign m_axi_araddr[18] = \<const0> ;
  assign m_axi_araddr[17] = \<const0> ;
  assign m_axi_araddr[16] = \<const0> ;
  assign m_axi_araddr[15] = \<const0> ;
  assign m_axi_araddr[14] = \<const0> ;
  assign m_axi_araddr[13] = \<const0> ;
  assign m_axi_araddr[12] = \<const0> ;
  assign m_axi_araddr[11] = \<const0> ;
  assign m_axi_araddr[10] = \<const0> ;
  assign m_axi_araddr[9] = \<const0> ;
  assign m_axi_araddr[8] = \<const0> ;
  assign m_axi_araddr[7] = \<const0> ;
  assign m_axi_araddr[6] = \<const0> ;
  assign m_axi_araddr[5] = \<const0> ;
  assign m_axi_araddr[4] = \<const0> ;
  assign m_axi_araddr[3] = \<const0> ;
  assign m_axi_araddr[2] = \<const0> ;
  assign m_axi_araddr[1] = \<const0> ;
  assign m_axi_araddr[0] = \<const0> ;
  assign m_axi_arburst[1] = \<const0> ;
  assign m_axi_arburst[0] = \<const0> ;
  assign m_axi_arcache[3] = \<const0> ;
  assign m_axi_arcache[2] = \<const0> ;
  assign m_axi_arcache[1] = \<const0> ;
  assign m_axi_arcache[0] = \<const0> ;
  assign m_axi_arid[0] = \<const0> ;
  assign m_axi_arlen[7] = \<const0> ;
  assign m_axi_arlen[6] = \<const0> ;
  assign m_axi_arlen[5] = \<const0> ;
  assign m_axi_arlen[4] = \<const0> ;
  assign m_axi_arlen[3] = \<const0> ;
  assign m_axi_arlen[2] = \<const0> ;
  assign m_axi_arlen[1] = \<const0> ;
  assign m_axi_arlen[0] = \<const0> ;
  assign m_axi_arlock[0] = \<const0> ;
  assign m_axi_arprot[2] = \<const0> ;
  assign m_axi_arprot[1] = \<const0> ;
  assign m_axi_arprot[0] = \<const0> ;
  assign m_axi_arqos[3] = \<const0> ;
  assign m_axi_arqos[2] = \<const0> ;
  assign m_axi_arqos[1] = \<const0> ;
  assign m_axi_arqos[0] = \<const0> ;
  assign m_axi_arregion[3] = \<const0> ;
  assign m_axi_arregion[2] = \<const0> ;
  assign m_axi_arregion[1] = \<const0> ;
  assign m_axi_arregion[0] = \<const0> ;
  assign m_axi_arsize[2] = \<const0> ;
  assign m_axi_arsize[1] = \<const0> ;
  assign m_axi_arsize[0] = \<const0> ;
  assign m_axi_aruser[0] = \<const0> ;
  assign m_axi_arvalid = \<const0> ;
  assign m_axi_awaddr[31] = \<const0> ;
  assign m_axi_awaddr[30] = \<const0> ;
  assign m_axi_awaddr[29] = \<const0> ;
  assign m_axi_awaddr[28] = \<const0> ;
  assign m_axi_awaddr[27] = \<const0> ;
  assign m_axi_awaddr[26] = \<const0> ;
  assign m_axi_awaddr[25] = \<const0> ;
  assign m_axi_awaddr[24] = \<const0> ;
  assign m_axi_awaddr[23] = \<const0> ;
  assign m_axi_awaddr[22] = \<const0> ;
  assign m_axi_awaddr[21] = \<const0> ;
  assign m_axi_awaddr[20] = \<const0> ;
  assign m_axi_awaddr[19] = \<const0> ;
  assign m_axi_awaddr[18] = \<const0> ;
  assign m_axi_awaddr[17] = \<const0> ;
  assign m_axi_awaddr[16] = \<const0> ;
  assign m_axi_awaddr[15] = \<const0> ;
  assign m_axi_awaddr[14] = \<const0> ;
  assign m_axi_awaddr[13] = \<const0> ;
  assign m_axi_awaddr[12] = \<const0> ;
  assign m_axi_awaddr[11] = \<const0> ;
  assign m_axi_awaddr[10] = \<const0> ;
  assign m_axi_awaddr[9] = \<const0> ;
  assign m_axi_awaddr[8] = \<const0> ;
  assign m_axi_awaddr[7] = \<const0> ;
  assign m_axi_awaddr[6] = \<const0> ;
  assign m_axi_awaddr[5] = \<const0> ;
  assign m_axi_awaddr[4] = \<const0> ;
  assign m_axi_awaddr[3] = \<const0> ;
  assign m_axi_awaddr[2] = \<const0> ;
  assign m_axi_awaddr[1] = \<const0> ;
  assign m_axi_awaddr[0] = \<const0> ;
  assign m_axi_awburst[1] = \<const0> ;
  assign m_axi_awburst[0] = \<const0> ;
  assign m_axi_awcache[3] = \<const0> ;
  assign m_axi_awcache[2] = \<const0> ;
  assign m_axi_awcache[1] = \<const0> ;
  assign m_axi_awcache[0] = \<const0> ;
  assign m_axi_awid[0] = \<const0> ;
  assign m_axi_awlen[7] = \<const0> ;
  assign m_axi_awlen[6] = \<const0> ;
  assign m_axi_awlen[5] = \<const0> ;
  assign m_axi_awlen[4] = \<const0> ;
  assign m_axi_awlen[3] = \<const0> ;
  assign m_axi_awlen[2] = \<const0> ;
  assign m_axi_awlen[1] = \<const0> ;
  assign m_axi_awlen[0] = \<const0> ;
  assign m_axi_awlock[0] = \<const0> ;
  assign m_axi_awprot[2] = \<const0> ;
  assign m_axi_awprot[1] = \<const0> ;
  assign m_axi_awprot[0] = \<const0> ;
  assign m_axi_awqos[3] = \<const0> ;
  assign m_axi_awqos[2] = \<const0> ;
  assign m_axi_awqos[1] = \<const0> ;
  assign m_axi_awqos[0] = \<const0> ;
  assign m_axi_awregion[3] = \<const0> ;
  assign m_axi_awregion[2] = \<const0> ;
  assign m_axi_awregion[1] = \<const0> ;
  assign m_axi_awregion[0] = \<const0> ;
  assign m_axi_awsize[2] = \<const0> ;
  assign m_axi_awsize[1] = \<const0> ;
  assign m_axi_awsize[0] = \<const0> ;
  assign m_axi_awuser[0] = \<const0> ;
  assign m_axi_awvalid = \<const0> ;
  assign m_axi_bready = \<const0> ;
  assign m_axi_rready = \<const0> ;
  assign m_axi_wdata[63] = \<const0> ;
  assign m_axi_wdata[62] = \<const0> ;
  assign m_axi_wdata[61] = \<const0> ;
  assign m_axi_wdata[60] = \<const0> ;
  assign m_axi_wdata[59] = \<const0> ;
  assign m_axi_wdata[58] = \<const0> ;
  assign m_axi_wdata[57] = \<const0> ;
  assign m_axi_wdata[56] = \<const0> ;
  assign m_axi_wdata[55] = \<const0> ;
  assign m_axi_wdata[54] = \<const0> ;
  assign m_axi_wdata[53] = \<const0> ;
  assign m_axi_wdata[52] = \<const0> ;
  assign m_axi_wdata[51] = \<const0> ;
  assign m_axi_wdata[50] = \<const0> ;
  assign m_axi_wdata[49] = \<const0> ;
  assign m_axi_wdata[48] = \<const0> ;
  assign m_axi_wdata[47] = \<const0> ;
  assign m_axi_wdata[46] = \<const0> ;
  assign m_axi_wdata[45] = \<const0> ;
  assign m_axi_wdata[44] = \<const0> ;
  assign m_axi_wdata[43] = \<const0> ;
  assign m_axi_wdata[42] = \<const0> ;
  assign m_axi_wdata[41] = \<const0> ;
  assign m_axi_wdata[40] = \<const0> ;
  assign m_axi_wdata[39] = \<const0> ;
  assign m_axi_wdata[38] = \<const0> ;
  assign m_axi_wdata[37] = \<const0> ;
  assign m_axi_wdata[36] = \<const0> ;
  assign m_axi_wdata[35] = \<const0> ;
  assign m_axi_wdata[34] = \<const0> ;
  assign m_axi_wdata[33] = \<const0> ;
  assign m_axi_wdata[32] = \<const0> ;
  assign m_axi_wdata[31] = \<const0> ;
  assign m_axi_wdata[30] = \<const0> ;
  assign m_axi_wdata[29] = \<const0> ;
  assign m_axi_wdata[28] = \<const0> ;
  assign m_axi_wdata[27] = \<const0> ;
  assign m_axi_wdata[26] = \<const0> ;
  assign m_axi_wdata[25] = \<const0> ;
  assign m_axi_wdata[24] = \<const0> ;
  assign m_axi_wdata[23] = \<const0> ;
  assign m_axi_wdata[22] = \<const0> ;
  assign m_axi_wdata[21] = \<const0> ;
  assign m_axi_wdata[20] = \<const0> ;
  assign m_axi_wdata[19] = \<const0> ;
  assign m_axi_wdata[18] = \<const0> ;
  assign m_axi_wdata[17] = \<const0> ;
  assign m_axi_wdata[16] = \<const0> ;
  assign m_axi_wdata[15] = \<const0> ;
  assign m_axi_wdata[14] = \<const0> ;
  assign m_axi_wdata[13] = \<const0> ;
  assign m_axi_wdata[12] = \<const0> ;
  assign m_axi_wdata[11] = \<const0> ;
  assign m_axi_wdata[10] = \<const0> ;
  assign m_axi_wdata[9] = \<const0> ;
  assign m_axi_wdata[8] = \<const0> ;
  assign m_axi_wdata[7] = \<const0> ;
  assign m_axi_wdata[6] = \<const0> ;
  assign m_axi_wdata[5] = \<const0> ;
  assign m_axi_wdata[4] = \<const0> ;
  assign m_axi_wdata[3] = \<const0> ;
  assign m_axi_wdata[2] = \<const0> ;
  assign m_axi_wdata[1] = \<const0> ;
  assign m_axi_wdata[0] = \<const0> ;
  assign m_axi_wid[0] = \<const0> ;
  assign m_axi_wlast = \<const0> ;
  assign m_axi_wstrb[7] = \<const0> ;
  assign m_axi_wstrb[6] = \<const0> ;
  assign m_axi_wstrb[5] = \<const0> ;
  assign m_axi_wstrb[4] = \<const0> ;
  assign m_axi_wstrb[3] = \<const0> ;
  assign m_axi_wstrb[2] = \<const0> ;
  assign m_axi_wstrb[1] = \<const0> ;
  assign m_axi_wstrb[0] = \<const0> ;
  assign m_axi_wuser[0] = \<const0> ;
  assign m_axi_wvalid = \<const0> ;
  assign m_axis_tdata[7] = \<const0> ;
  assign m_axis_tdata[6] = \<const0> ;
  assign m_axis_tdata[5] = \<const0> ;
  assign m_axis_tdata[4] = \<const0> ;
  assign m_axis_tdata[3] = \<const0> ;
  assign m_axis_tdata[2] = \<const0> ;
  assign m_axis_tdata[1] = \<const0> ;
  assign m_axis_tdata[0] = \<const0> ;
  assign m_axis_tdest[0] = \<const0> ;
  assign m_axis_tid[0] = \<const0> ;
  assign m_axis_tkeep[0] = \<const0> ;
  assign m_axis_tlast = \<const0> ;
  assign m_axis_tstrb[0] = \<const0> ;
  assign m_axis_tuser[3] = \<const0> ;
  assign m_axis_tuser[2] = \<const0> ;
  assign m_axis_tuser[1] = \<const0> ;
  assign m_axis_tuser[0] = \<const0> ;
  assign m_axis_tvalid = \<const0> ;
  assign overflow = \<const0> ;
  assign prog_empty = \<const0> ;
  assign prog_full = \<const0> ;
  assign s_axi_arready = \<const0> ;
  assign s_axi_awready = \<const0> ;
  assign s_axi_bid[0] = \<const0> ;
  assign s_axi_bresp[1] = \<const0> ;
  assign s_axi_bresp[0] = \<const0> ;
  assign s_axi_buser[0] = \<const0> ;
  assign s_axi_bvalid = \<const0> ;
  assign s_axi_rdata[63] = \<const0> ;
  assign s_axi_rdata[62] = \<const0> ;
  assign s_axi_rdata[61] = \<const0> ;
  assign s_axi_rdata[60] = \<const0> ;
  assign s_axi_rdata[59] = \<const0> ;
  assign s_axi_rdata[58] = \<const0> ;
  assign s_axi_rdata[57] = \<const0> ;
  assign s_axi_rdata[56] = \<const0> ;
  assign s_axi_rdata[55] = \<const0> ;
  assign s_axi_rdata[54] = \<const0> ;
  assign s_axi_rdata[53] = \<const0> ;
  assign s_axi_rdata[52] = \<const0> ;
  assign s_axi_rdata[51] = \<const0> ;
  assign s_axi_rdata[50] = \<const0> ;
  assign s_axi_rdata[49] = \<const0> ;
  assign s_axi_rdata[48] = \<const0> ;
  assign s_axi_rdata[47] = \<const0> ;
  assign s_axi_rdata[46] = \<const0> ;
  assign s_axi_rdata[45] = \<const0> ;
  assign s_axi_rdata[44] = \<const0> ;
  assign s_axi_rdata[43] = \<const0> ;
  assign s_axi_rdata[42] = \<const0> ;
  assign s_axi_rdata[41] = \<const0> ;
  assign s_axi_rdata[40] = \<const0> ;
  assign s_axi_rdata[39] = \<const0> ;
  assign s_axi_rdata[38] = \<const0> ;
  assign s_axi_rdata[37] = \<const0> ;
  assign s_axi_rdata[36] = \<const0> ;
  assign s_axi_rdata[35] = \<const0> ;
  assign s_axi_rdata[34] = \<const0> ;
  assign s_axi_rdata[33] = \<const0> ;
  assign s_axi_rdata[32] = \<const0> ;
  assign s_axi_rdata[31] = \<const0> ;
  assign s_axi_rdata[30] = \<const0> ;
  assign s_axi_rdata[29] = \<const0> ;
  assign s_axi_rdata[28] = \<const0> ;
  assign s_axi_rdata[27] = \<const0> ;
  assign s_axi_rdata[26] = \<const0> ;
  assign s_axi_rdata[25] = \<const0> ;
  assign s_axi_rdata[24] = \<const0> ;
  assign s_axi_rdata[23] = \<const0> ;
  assign s_axi_rdata[22] = \<const0> ;
  assign s_axi_rdata[21] = \<const0> ;
  assign s_axi_rdata[20] = \<const0> ;
  assign s_axi_rdata[19] = \<const0> ;
  assign s_axi_rdata[18] = \<const0> ;
  assign s_axi_rdata[17] = \<const0> ;
  assign s_axi_rdata[16] = \<const0> ;
  assign s_axi_rdata[15] = \<const0> ;
  assign s_axi_rdata[14] = \<const0> ;
  assign s_axi_rdata[13] = \<const0> ;
  assign s_axi_rdata[12] = \<const0> ;
  assign s_axi_rdata[11] = \<const0> ;
  assign s_axi_rdata[10] = \<const0> ;
  assign s_axi_rdata[9] = \<const0> ;
  assign s_axi_rdata[8] = \<const0> ;
  assign s_axi_rdata[7] = \<const0> ;
  assign s_axi_rdata[6] = \<const0> ;
  assign s_axi_rdata[5] = \<const0> ;
  assign s_axi_rdata[4] = \<const0> ;
  assign s_axi_rdata[3] = \<const0> ;
  assign s_axi_rdata[2] = \<const0> ;
  assign s_axi_rdata[1] = \<const0> ;
  assign s_axi_rdata[0] = \<const0> ;
  assign s_axi_rid[0] = \<const0> ;
  assign s_axi_rlast = \<const0> ;
  assign s_axi_rresp[1] = \<const0> ;
  assign s_axi_rresp[0] = \<const0> ;
  assign s_axi_ruser[0] = \<const0> ;
  assign s_axi_rvalid = \<const0> ;
  assign s_axi_wready = \<const0> ;
  assign s_axis_tready = \<const0> ;
  assign sbiterr = \<const0> ;
  assign underflow = \<const0> ;
  assign wr_ack = \<const0> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  axi_mem2stream_fifo_async_34x16_fifo_generator_v13_2_3_synth inst_fifo_gen
       (.AR(rd_rst_busy),
        .VALID(valid),
        .almost_full(almost_full),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "fifo_generator_v13_2_3_synth" *) 
module axi_mem2stream_fifo_async_34x16_fifo_generator_v13_2_3_synth
   (wr_rst_busy,
    AR,
    empty,
    VALID,
    full,
    dout,
    rd_data_count,
    wr_data_count,
    almost_full,
    wr_en,
    rst,
    wr_clk,
    rd_clk,
    din,
    rd_en);
  output wr_rst_busy;
  output [0:0]AR;
  output empty;
  output VALID;
  output full;
  output [33:0]dout;
  output [4:0]rd_data_count;
  output [4:0]wr_data_count;
  output almost_full;
  input wr_en;
  input rst;
  input wr_clk;
  input rd_clk;
  input [33:0]din;
  input rd_en;

  wire [0:0]AR;
  wire VALID;
  wire almost_full;
  wire [33:0]din;
  wire [33:0]dout;
  wire empty;
  wire full;
  wire rd_clk;
  wire [4:0]rd_data_count;
  wire rd_en;
  wire rst;
  wire wr_clk;
  wire [4:0]wr_data_count;
  wire wr_en;
  wire wr_rst_busy;

  axi_mem2stream_fifo_async_34x16_fifo_generator_top \gconvfifo.rf 
       (.AS(AR),
        .VALID(VALID),
        .almost_full(almost_full),
        .din(din),
        .dout(dout),
        .empty(empty),
        .full(full),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count),
        .rd_en(rd_en),
        .rst(rst),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count),
        .wr_en(wr_en),
        .wr_rst_busy(wr_rst_busy));
endmodule

(* ORIG_REF_NAME = "memory" *) 
module axi_mem2stream_fifo_async_34x16_memory
   (dout,
    rd_clk,
    wr_clk,
    tmp_ram_rd_en,
    E,
    SR,
    Q,
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ,
    din,
    \goreg_bm.dout_i_reg[33]_0 );
  output [33:0]dout;
  input rd_clk;
  input wr_clk;
  input tmp_ram_rd_en;
  input [0:0]E;
  input [0:0]SR;
  input [3:0]Q;
  input [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  input [33:0]din;
  input [0:0]\goreg_bm.dout_i_reg[33]_0 ;

  wire [3:0]\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ;
  wire [0:0]E;
  wire [3:0]Q;
  wire [0:0]SR;
  wire [33:0]din;
  wire [33:0]dout;
  wire [33:0]doutb;
  wire [0:0]\goreg_bm.dout_i_reg[33]_0 ;
  wire rd_clk;
  wire tmp_ram_rd_en;
  wire wr_clk;

  axi_mem2stream_fifo_async_34x16_blk_mem_gen_v8_4_2 \gbm.gbmg.gbmga.ngecc.bmg 
       (.D(doutb),
        .\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram (\DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram ),
        .E(E),
        .Q(Q),
        .SR(SR),
        .din(din),
        .rd_clk(rd_clk),
        .tmp_ram_rd_en(tmp_ram_rd_en),
        .wr_clk(wr_clk));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[0] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[0]),
        .Q(dout[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[10] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[10]),
        .Q(dout[10]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[11] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[11]),
        .Q(dout[11]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[12] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[12]),
        .Q(dout[12]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[13] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[13]),
        .Q(dout[13]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[14] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[14]),
        .Q(dout[14]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[15] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[15]),
        .Q(dout[15]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[16] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[16]),
        .Q(dout[16]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[17] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[17]),
        .Q(dout[17]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[18] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[18]),
        .Q(dout[18]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[19] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[19]),
        .Q(dout[19]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[1] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[1]),
        .Q(dout[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[20] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[20]),
        .Q(dout[20]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[21] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[21]),
        .Q(dout[21]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[22] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[22]),
        .Q(dout[22]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[23] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[23]),
        .Q(dout[23]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[24] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[24]),
        .Q(dout[24]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[25] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[25]),
        .Q(dout[25]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[26] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[26]),
        .Q(dout[26]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[27] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[27]),
        .Q(dout[27]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[28] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[28]),
        .Q(dout[28]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[29] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[29]),
        .Q(dout[29]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[2] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[2]),
        .Q(dout[2]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[30] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[30]),
        .Q(dout[30]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[31] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[31]),
        .Q(dout[31]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[32] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[32]),
        .Q(dout[32]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[33] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[33]),
        .Q(dout[33]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[3] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[3]),
        .Q(dout[3]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[4] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[4]),
        .Q(dout[4]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[5] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[5]),
        .Q(dout[5]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[6] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[6]),
        .Q(dout[6]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[7] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[7]),
        .Q(dout[7]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[8] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[8]),
        .Q(dout[8]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \goreg_bm.dout_i_reg[9] 
       (.C(rd_clk),
        .CE(\goreg_bm.dout_i_reg[33]_0 ),
        .D(doutb[9]),
        .Q(dout[9]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "rd_bin_cntr" *) 
module axi_mem2stream_fifo_async_34x16_rd_bin_cntr
   (\gc0.count_reg[0]_0 ,
    D,
    \dest_out_bin_ff_reg[2] ,
    Q,
    WR_PNTR_RD,
    E,
    out,
    \g_rd.gvalid_low.rd_dc_i_reg[2] ,
    rd_clk,
    AS);
  output \gc0.count_reg[0]_0 ;
  output [0:0]D;
  output [0:0]\dest_out_bin_ff_reg[2] ;
  output [3:0]Q;
  input [3:0]WR_PNTR_RD;
  input [0:0]E;
  input out;
  input [0:0]\g_rd.gvalid_low.rd_dc_i_reg[2] ;
  input rd_clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [0:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire [3:0]WR_PNTR_RD;
  wire [0:0]\dest_out_bin_ff_reg[2] ;
  wire [1:1]diff_wr_rd;
  wire \g_rd.gvalid_low.rd_dc_i[2]_i_3_n_0 ;
  wire [0:0]\g_rd.gvalid_low.rd_dc_i_reg[2] ;
  wire \gc0.count_reg[0]_0 ;
  wire out;
  wire [3:0]plusOp__0;
  wire ram_empty_i_i_4_n_0;
  wire rd_clk;
  wire [3:0]rd_pntr_plus1;

  LUT6 #(
    .INIT(64'h8228288200000000)) 
    \g_rd.gvalid_low.rd_dc_i[2]_i_1 
       (.I0(out),
        .I1(diff_wr_rd),
        .I2(WR_PNTR_RD[2]),
        .I3(Q[2]),
        .I4(\g_rd.gvalid_low.rd_dc_i[2]_i_3_n_0 ),
        .I5(\g_rd.gvalid_low.rd_dc_i_reg[2] ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h2DD2)) 
    \g_rd.gvalid_low.rd_dc_i[2]_i_2 
       (.I0(Q[0]),
        .I1(WR_PNTR_RD[0]),
        .I2(Q[1]),
        .I3(WR_PNTR_RD[1]),
        .O(diff_wr_rd));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hDD4D)) 
    \g_rd.gvalid_low.rd_dc_i[2]_i_3 
       (.I0(Q[1]),
        .I1(WR_PNTR_RD[1]),
        .I2(Q[0]),
        .I3(WR_PNTR_RD[0]),
        .O(\g_rd.gvalid_low.rd_dc_i[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h718E8E71)) 
    \g_rd.gvalid_low.rd_dc_i[4]_i_2 
       (.I0(\g_rd.gvalid_low.rd_dc_i[2]_i_3_n_0 ),
        .I1(WR_PNTR_RD[2]),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(WR_PNTR_RD[3]),
        .O(\dest_out_bin_ff_reg[2] ));
  LUT1 #(
    .INIT(2'h1)) 
    \gc0.count[0]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .O(plusOp__0[0]));
  LUT2 #(
    .INIT(4'h6)) 
    \gc0.count[1]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gc0.count[2]_i_1 
       (.I0(rd_pntr_plus1[0]),
        .I1(rd_pntr_plus1[1]),
        .I2(rd_pntr_plus1[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gc0.count[3]_i_1 
       (.I0(rd_pntr_plus1[1]),
        .I1(rd_pntr_plus1[0]),
        .I2(rd_pntr_plus1[2]),
        .I3(rd_pntr_plus1[3]),
        .O(plusOp__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AS),
        .D(rd_pntr_plus1[0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AS),
        .D(rd_pntr_plus1[1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AS),
        .D(rd_pntr_plus1[2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_d1_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AS),
        .D(rd_pntr_plus1[3]),
        .Q(Q[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gc0.count_reg[0] 
       (.C(rd_clk),
        .CE(E),
        .D(plusOp__0[0]),
        .PRE(AS),
        .Q(rd_pntr_plus1[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[1] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[1]),
        .Q(rd_pntr_plus1[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[2] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[2]),
        .Q(rd_pntr_plus1[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gc0.count_reg[3] 
       (.C(rd_clk),
        .CE(E),
        .CLR(AS),
        .D(plusOp__0[3]),
        .Q(rd_pntr_plus1[3]));
  LUT6 #(
    .INIT(64'h8200008200000000)) 
    ram_empty_i_i_3
       (.I0(ram_empty_i_i_4_n_0),
        .I1(rd_pntr_plus1[0]),
        .I2(WR_PNTR_RD[0]),
        .I3(rd_pntr_plus1[1]),
        .I4(WR_PNTR_RD[1]),
        .I5(E),
        .O(\gc0.count_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    ram_empty_i_i_4
       (.I0(rd_pntr_plus1[2]),
        .I1(WR_PNTR_RD[2]),
        .I2(rd_pntr_plus1[3]),
        .I3(WR_PNTR_RD[3]),
        .O(ram_empty_i_i_4_n_0));
endmodule

(* ORIG_REF_NAME = "rd_dc_fwft_ext_as" *) 
module axi_mem2stream_fifo_async_34x16_rd_dc_fwft_ext_as
   (rd_data_count,
    D,
    rd_clk,
    AS);
  output [4:0]rd_data_count;
  input [4:0]D;
  input rd_clk;
  input [0:0]AS;

  wire [0:0]AS;
  wire [4:0]D;
  wire rd_clk;
  wire [4:0]rd_data_count;

  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(D[0]),
        .Q(rd_data_count[0]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(D[1]),
        .Q(rd_data_count[1]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[2] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(D[2]),
        .Q(rd_data_count[2]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[3] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(D[3]),
        .Q(rd_data_count[3]));
  FDCE #(
    .INIT(1'b0)) 
    \g_rd.gvalid_low.rd_dc_i_reg[4] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(D[4]),
        .Q(rd_data_count[4]));
endmodule

(* ORIG_REF_NAME = "rd_fwft" *) 
module axi_mem2stream_fifo_async_34x16_rd_fwft
   (out,
    empty,
    \gpregsm1.user_valid_reg_0 ,
    tmp_ram_rd_en,
    E,
    ram_empty_fb_i_reg,
    D,
    rd_clk,
    AS,
    rd_en,
    \gpregsm1.curr_fwft_state_reg[1]_0 ,
    \g_rd.gvalid_low.rd_dc_i_reg[4] ,
    diff_wr_rd,
    WR_PNTR_RD,
    Q);
  output [0:0]out;
  output empty;
  output \gpregsm1.user_valid_reg_0 ;
  output tmp_ram_rd_en;
  output [0:0]E;
  output [0:0]ram_empty_fb_i_reg;
  output [3:0]D;
  input rd_clk;
  input [0:0]AS;
  input rd_en;
  input \gpregsm1.curr_fwft_state_reg[1]_0 ;
  input \g_rd.gvalid_low.rd_dc_i_reg[4] ;
  input [0:0]diff_wr_rd;
  input [1:0]WR_PNTR_RD;
  input [1:0]Q;

  wire [0:0]AS;
  wire [3:0]D;
  wire [0:0]E;
  wire [1:0]Q;
  wire [1:0]WR_PNTR_RD;
  (* DONT_TOUCH *) wire aempty_fwft_fb_i;
  (* DONT_TOUCH *) wire aempty_fwft_i;
  wire aempty_fwft_i0;
  (* DONT_TOUCH *) wire [1:0]curr_fwft_state;
  wire [0:0]diff_wr_rd;
  (* DONT_TOUCH *) wire empty_fwft_fb_i;
  (* DONT_TOUCH *) wire empty_fwft_fb_o_i;
  wire empty_fwft_fb_o_i0;
  (* DONT_TOUCH *) wire empty_fwft_i;
  wire empty_fwft_i0;
  wire \g_rd.gvalid_low.rd_dc_i_reg[4] ;
  wire \gpregsm1.curr_fwft_state_reg[1]_0 ;
  wire [1:0]next_fwft_state;
  wire [0:0]ram_empty_fb_i_reg;
  wire rd_clk;
  wire rd_en;
  wire tmp_ram_rd_en;
  (* DONT_TOUCH *) wire user_valid;

  assign empty = empty_fwft_i;
  assign \gpregsm1.user_valid_reg_0  = user_valid;
  assign out[0] = curr_fwft_state[1];
  LUT5 #(
    .INIT(32'hFFFF4555)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1]_0 ),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .I4(AS),
        .O(tmp_ram_rd_en));
  LUT5 #(
    .INIT(32'hFFCB8000)) 
    aempty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[0]),
        .I2(curr_fwft_state[1]),
        .I3(\gpregsm1.curr_fwft_state_reg[1]_0 ),
        .I4(aempty_fwft_fb_i),
        .O(aempty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AS),
        .Q(aempty_fwft_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    aempty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(aempty_fwft_i0),
        .PRE(AS),
        .Q(aempty_fwft_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_i),
        .O(empty_fwft_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AS),
        .Q(empty_fwft_fb_i));
  LUT4 #(
    .INIT(16'hF320)) 
    empty_fwft_fb_o_i_i_1
       (.I0(rd_en),
        .I1(curr_fwft_state[1]),
        .I2(curr_fwft_state[0]),
        .I3(empty_fwft_fb_o_i),
        .O(empty_fwft_fb_o_i0));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_fb_o_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_fb_o_i0),
        .PRE(AS),
        .Q(empty_fwft_fb_o_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    empty_fwft_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(empty_fwft_i0),
        .PRE(AS),
        .Q(empty_fwft_i));
  LUT4 #(
    .INIT(16'h28AA)) 
    \g_rd.gvalid_low.rd_dc_i[0]_i_1 
       (.I0(user_valid),
        .I1(WR_PNTR_RD[0]),
        .I2(Q[0]),
        .I3(curr_fwft_state[1]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hA20808A200000000)) 
    \g_rd.gvalid_low.rd_dc_i[1]_i_1 
       (.I0(user_valid),
        .I1(Q[0]),
        .I2(WR_PNTR_RD[0]),
        .I3(Q[1]),
        .I4(WR_PNTR_RD[1]),
        .I5(curr_fwft_state[1]),
        .O(D[1]));
  LUT4 #(
    .INIT(16'h2800)) 
    \g_rd.gvalid_low.rd_dc_i[3]_i_1 
       (.I0(user_valid),
        .I1(\g_rd.gvalid_low.rd_dc_i_reg[4] ),
        .I2(diff_wr_rd),
        .I3(curr_fwft_state[1]),
        .O(D[2]));
  LUT4 #(
    .INIT(16'h8000)) 
    \g_rd.gvalid_low.rd_dc_i[4]_i_1 
       (.I0(user_valid),
        .I1(diff_wr_rd),
        .I2(\g_rd.gvalid_low.rd_dc_i_reg[4] ),
        .I3(curr_fwft_state[1]),
        .O(D[3]));
  LUT4 #(
    .INIT(16'h4555)) 
    \gc0.count_d1[3]_i_1 
       (.I0(\gpregsm1.curr_fwft_state_reg[1]_0 ),
        .I1(rd_en),
        .I2(curr_fwft_state[1]),
        .I3(curr_fwft_state[0]),
        .O(ram_empty_fb_i_reg));
  LUT3 #(
    .INIT(8'hA2)) 
    \goreg_bm.dout_i[33]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(curr_fwft_state[0]),
        .I2(rd_en),
        .O(E));
  LUT3 #(
    .INIT(8'hBA)) 
    \gpregsm1.curr_fwft_state[0]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .O(next_fwft_state[0]));
  LUT4 #(
    .INIT(16'h20FF)) 
    \gpregsm1.curr_fwft_state[1]_i_1 
       (.I0(curr_fwft_state[1]),
        .I1(rd_en),
        .I2(curr_fwft_state[0]),
        .I3(\gpregsm1.curr_fwft_state_reg[1]_0 ),
        .O(next_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(next_fwft_state[0]),
        .Q(curr_fwft_state[0]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.curr_fwft_state_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(next_fwft_state[1]),
        .Q(curr_fwft_state[1]));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDCE #(
    .INIT(1'b0)) 
    \gpregsm1.user_valid_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(AS),
        .D(next_fwft_state[0]),
        .Q(user_valid));
endmodule

(* ORIG_REF_NAME = "rd_logic" *) 
module axi_mem2stream_fifo_async_34x16_rd_logic
   (empty,
    out,
    tmp_ram_rd_en,
    \gc0.count_reg[0] ,
    E,
    Q,
    rd_data_count,
    ram_empty_fb_i_reg,
    rd_clk,
    AS,
    rd_en,
    WR_PNTR_RD,
    \g_rd.gvalid_low.rd_dc_i_reg[4] );
  output empty;
  output out;
  output tmp_ram_rd_en;
  output \gc0.count_reg[0] ;
  output [0:0]E;
  output [3:0]Q;
  output [4:0]rd_data_count;
  input ram_empty_fb_i_reg;
  input rd_clk;
  input [0:0]AS;
  input rd_en;
  input [3:0]WR_PNTR_RD;
  input \g_rd.gvalid_low.rd_dc_i_reg[4] ;

  wire [0:0]AS;
  wire [0:0]E;
  wire [3:0]Q;
  wire [3:0]WR_PNTR_RD;
  wire [3:3]diff_wr_rd;
  wire empty;
  wire \g_rd.gvalid_low.rd_dc_i_reg[4] ;
  wire \gc0.count_reg[0] ;
  wire \gr1.gr1_int.rfwft_n_6 ;
  wire \gr1.gr1_int.rfwft_n_7 ;
  wire \gr1.gr1_int.rfwft_n_8 ;
  wire \gr1.gr1_int.rfwft_n_9 ;
  wire out;
  wire p_2_out;
  wire p_3_out;
  wire p_8_out;
  wire ram_empty_fb_i_reg;
  wire rd_clk;
  wire [4:0]rd_data_count;
  wire rd_en;
  wire rpntr_n_1;
  wire tmp_ram_rd_en;

  axi_mem2stream_fifo_async_34x16_rd_fwft \gr1.gr1_int.rfwft 
       (.AS(AS),
        .D({\gr1.gr1_int.rfwft_n_6 ,\gr1.gr1_int.rfwft_n_7 ,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .E(E),
        .Q(Q[1:0]),
        .WR_PNTR_RD(WR_PNTR_RD[1:0]),
        .diff_wr_rd(diff_wr_rd),
        .empty(empty),
        .\g_rd.gvalid_low.rd_dc_i_reg[4] (\g_rd.gvalid_low.rd_dc_i_reg[4] ),
        .\gpregsm1.curr_fwft_state_reg[1]_0 (p_2_out),
        .\gpregsm1.user_valid_reg_0 (out),
        .out(p_3_out),
        .ram_empty_fb_i_reg(p_8_out),
        .rd_clk(rd_clk),
        .rd_en(rd_en),
        .tmp_ram_rd_en(tmp_ram_rd_en));
  axi_mem2stream_fifo_async_34x16_rd_dc_fwft_ext_as \gr1.grdc2.rdc 
       (.AS(AS),
        .D({\gr1.gr1_int.rfwft_n_6 ,\gr1.gr1_int.rfwft_n_7 ,rpntr_n_1,\gr1.gr1_int.rfwft_n_8 ,\gr1.gr1_int.rfwft_n_9 }),
        .rd_clk(rd_clk),
        .rd_data_count(rd_data_count));
  axi_mem2stream_fifo_async_34x16_rd_status_flags_as \gras.rsts 
       (.AS(AS),
        .out(p_2_out),
        .ram_empty_fb_i_reg_0(ram_empty_fb_i_reg),
        .rd_clk(rd_clk));
  axi_mem2stream_fifo_async_34x16_rd_bin_cntr rpntr
       (.AS(AS),
        .D(rpntr_n_1),
        .E(p_8_out),
        .Q(Q),
        .WR_PNTR_RD(WR_PNTR_RD),
        .\dest_out_bin_ff_reg[2] (diff_wr_rd),
        .\g_rd.gvalid_low.rd_dc_i_reg[2] (p_3_out),
        .\gc0.count_reg[0]_0 (\gc0.count_reg[0] ),
        .out(out),
        .rd_clk(rd_clk));
endmodule

(* ORIG_REF_NAME = "rd_status_flags_as" *) 
module axi_mem2stream_fifo_async_34x16_rd_status_flags_as
   (out,
    ram_empty_fb_i_reg_0,
    rd_clk,
    AS);
  output out;
  input ram_empty_fb_i_reg_0;
  input rd_clk;
  input [0:0]AS;

  wire [0:0]AS;
  (* DONT_TOUCH *) wire ram_empty_fb_i;
  wire ram_empty_fb_i_reg_0;
  (* DONT_TOUCH *) wire ram_empty_i;
  wire rd_clk;

  assign out = ram_empty_fb_i;
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_fb_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AS),
        .Q(ram_empty_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_empty_i_reg
       (.C(rd_clk),
        .CE(1'b1),
        .D(ram_empty_fb_i_reg_0),
        .PRE(AS),
        .Q(ram_empty_i));
endmodule

(* ORIG_REF_NAME = "reset_blk_ramfifo" *) 
module axi_mem2stream_fifo_async_34x16_reset_blk_ramfifo
   (AR,
    SR,
    out,
    \grstd1.grst_full.grst_f.rst_d3_reg_0 ,
    wr_rst_busy,
    rst,
    wr_clk,
    rd_clk);
  output [0:0]AR;
  output [0:0]SR;
  output out;
  output \grstd1.grst_full.grst_f.rst_d3_reg_0 ;
  output wr_rst_busy;
  input rst;
  input wr_clk;
  input rd_clk;

  wire [0:0]AR;
  wire [0:0]SR;
  wire dest_out;
  wire \grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ;
  wire \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ;
  wire rd_clk;
  wire [3:0]rd_rst_wr_ext;
  wire rst;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d1;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_d3;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_rd_reg2;
  (* async_reg = "true" *) (* msgon = "true" *) wire rst_wr_reg2;
  wire sckt_rd_rst_wr;
  wire wr_clk;
  wire wr_rst_busy;
  wire [1:0]wr_rst_rd_ext;

  assign \grstd1.grst_full.grst_f.rst_d3_reg_0  = rst_d3;
  assign out = rst_d2;
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d1_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(wr_rst_busy),
        .PRE(rst_wr_reg2),
        .Q(rst_d1));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d2_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(rst_d1),
        .PRE(rst_wr_reg2),
        .Q(rst_d2));
  LUT2 #(
    .INIT(4'hE)) 
    \grstd1.grst_full.grst_f.rst_d3_i_1 
       (.I0(rst_d2),
        .I1(AR),
        .O(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* msgon = "true" *) 
  FDPE #(
    .INIT(1'b1)) 
    \grstd1.grst_full.grst_f.rst_d3_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\grstd1.grst_full.grst_f.rst_d3_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(rst_d3));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(sckt_rd_rst_wr),
        .Q(rd_rst_wr_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[0]),
        .Q(rd_rst_wr_ext[1]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[1]),
        .Q(rd_rst_wr_ext[2]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rd_rst_wr_ext_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(rst_wr_reg2),
        .D(rd_rst_wr_ext[2]),
        .Q(rd_rst_wr_ext[3]));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  axi_mem2stream_fifo_async_34x16_xpm_cdc_async_rst \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.rst_rd_reg2_inst 
       (.dest_arst(rst_rd_reg2),
        .dest_clk(rd_clk),
        .src_arst(rst));
  LUT2 #(
    .INIT(4'h2)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1 
       (.I0(SR),
        .I1(wr_rst_rd_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_reg 
       (.C(rd_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_rd_rst_ic_i_1_n_0 ),
        .PRE(rst_rd_reg2),
        .Q(SR));
  LUT3 #(
    .INIT(8'h8A)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1 
       (.I0(AR),
        .I1(rd_rst_wr_ext[0]),
        .I2(rd_rst_wr_ext[1]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.sckt_wr_rst_ic_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(AR));
  LUT5 #(
    .INIT(32'hAAAA08AA)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1 
       (.I0(wr_rst_busy),
        .I1(rd_rst_wr_ext[1]),
        .I2(rd_rst_wr_ext[0]),
        .I3(rd_rst_wr_ext[3]),
        .I4(rd_rst_wr_ext[2]),
        .O(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ));
  FDPE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_busy_i_i_1_n_0 ),
        .PRE(rst_wr_reg2),
        .Q(wr_rst_busy));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[0] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(dest_out),
        .Q(wr_rst_rd_ext[0]));
  FDCE #(
    .INIT(1'b0)) 
    \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.wr_rst_rd_ext_reg[1] 
       (.C(rd_clk),
        .CE(1'b1),
        .CLR(rst_rd_reg2),
        .D(wr_rst_rd_ext[0]),
        .Q(wr_rst_rd_ext[1]));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  axi_mem2stream_fifo_async_34x16_xpm_cdc_single \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_rrst_wr 
       (.dest_clk(wr_clk),
        .dest_out(sckt_rd_rst_wr),
        .src_clk(rd_clk),
        .src_in(SR));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  axi_mem2stream_fifo_async_34x16_xpm_cdc_single__2 \ngwrdrst.grst.g7serrst.gnsckt_wrst.gic_rst.xpm_cdc_single_inst_wrst_rd 
       (.dest_clk(rd_clk),
        .dest_out(dest_out),
        .src_clk(wr_clk),
        .src_in(AR));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "2" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  axi_mem2stream_fifo_async_34x16_xpm_cdc_async_rst__2 \ngwrdrst.grst.g7serrst.gnsckt_wrst.rst_wr_reg2_inst 
       (.dest_arst(rst_wr_reg2),
        .dest_clk(wr_clk),
        .src_arst(rst));
endmodule

(* ORIG_REF_NAME = "wr_bin_cntr" *) 
module axi_mem2stream_fifo_async_34x16_wr_bin_cntr
   (D,
    Q,
    \gic0.gc1.count_reg[3]_0 ,
    \gic0.gc1.count_d1_reg[3]_0 ,
    \gic0.gc1.count_d2_reg[3]_0 ,
    RD_PNTR_WR,
    E,
    wr_clk,
    AR);
  output [2:0]D;
  output [3:0]Q;
  output [3:0]\gic0.gc1.count_reg[3]_0 ;
  output [3:0]\gic0.gc1.count_d1_reg[3]_0 ;
  output [3:0]\gic0.gc1.count_d2_reg[3]_0 ;
  input [2:0]RD_PNTR_WR;
  input [0:0]E;
  input wr_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [2:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire [3:0]\gic0.gc1.count_d1_reg[3]_0 ;
  wire [3:0]\gic0.gc1.count_d2_reg[3]_0 ;
  wire [3:0]\gic0.gc1.count_reg[3]_0 ;
  wire [3:0]plusOp;
  wire wr_clk;

  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \gic0.gc1.count[0]_i_1 
       (.I0(\gic0.gc1.count_reg[3]_0 [0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \gic0.gc1.count[1]_i_1 
       (.I0(\gic0.gc1.count_reg[3]_0 [0]),
        .I1(\gic0.gc1.count_reg[3]_0 [1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \gic0.gc1.count[2]_i_1 
       (.I0(\gic0.gc1.count_reg[3]_0 [0]),
        .I1(\gic0.gc1.count_reg[3]_0 [1]),
        .I2(\gic0.gc1.count_reg[3]_0 [2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \gic0.gc1.count[3]_i_1 
       (.I0(\gic0.gc1.count_reg[3]_0 [1]),
        .I1(\gic0.gc1.count_reg[3]_0 [0]),
        .I2(\gic0.gc1.count_reg[3]_0 [2]),
        .I3(\gic0.gc1.count_reg[3]_0 [3]),
        .O(plusOp[3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d1_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_reg[3]_0 [0]),
        .Q(\gic0.gc1.count_d1_reg[3]_0 [0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc1.count_d1_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc1.count_reg[3]_0 [1]),
        .PRE(AR),
        .Q(\gic0.gc1.count_d1_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d1_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_reg[3]_0 [2]),
        .Q(\gic0.gc1.count_d1_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d1_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_reg[3]_0 [3]),
        .Q(\gic0.gc1.count_d1_reg[3]_0 [3]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc1.count_d2_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(\gic0.gc1.count_d1_reg[3]_0 [0]),
        .PRE(AR),
        .Q(\gic0.gc1.count_d2_reg[3]_0 [0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d2_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_d1_reg[3]_0 [1]),
        .Q(\gic0.gc1.count_d2_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d2_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_d1_reg[3]_0 [2]),
        .Q(\gic0.gc1.count_d2_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d2_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_d1_reg[3]_0 [3]),
        .Q(\gic0.gc1.count_d2_reg[3]_0 [3]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d3_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_d2_reg[3]_0 [0]),
        .Q(Q[0]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d3_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_d2_reg[3]_0 [1]),
        .Q(Q[1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d3_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_d2_reg[3]_0 [2]),
        .Q(Q[2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_d3_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(\gic0.gc1.count_d2_reg[3]_0 [3]),
        .Q(Q[3]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc1.count_reg[0] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[0]),
        .PRE(AR),
        .Q(\gic0.gc1.count_reg[3]_0 [0]));
  FDPE #(
    .INIT(1'b1)) 
    \gic0.gc1.count_reg[1] 
       (.C(wr_clk),
        .CE(E),
        .D(plusOp[1]),
        .PRE(AR),
        .Q(\gic0.gc1.count_reg[3]_0 [1]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_reg[2] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[2]),
        .Q(\gic0.gc1.count_reg[3]_0 [2]));
  FDCE #(
    .INIT(1'b0)) 
    \gic0.gc1.count_reg[3] 
       (.C(wr_clk),
        .CE(E),
        .CLR(AR),
        .D(plusOp[3]),
        .Q(\gic0.gc1.count_reg[3]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wr_data_count_i[0]_i_1 
       (.I0(Q[0]),
        .I1(RD_PNTR_WR[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h9699)) 
    \wr_data_count_i[1]_i_1 
       (.I0(Q[1]),
        .I1(RD_PNTR_WR[1]),
        .I2(Q[0]),
        .I3(RD_PNTR_WR[0]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h6966696666966966)) 
    \wr_data_count_i[2]_i_1 
       (.I0(Q[2]),
        .I1(RD_PNTR_WR[2]),
        .I2(RD_PNTR_WR[1]),
        .I3(Q[1]),
        .I4(RD_PNTR_WR[0]),
        .I5(Q[0]),
        .O(D[2]));
endmodule

(* ORIG_REF_NAME = "wr_dc_fwft_ext_as" *) 
module axi_mem2stream_fifo_async_34x16_wr_dc_fwft_ext_as
   (wr_data_count,
    D,
    wr_clk,
    AR);
  output [4:0]wr_data_count;
  input [4:0]D;
  input wr_clk;
  input [0:0]AR;

  wire [0:0]AR;
  wire [4:0]D;
  wire wr_clk;
  wire [4:0]wr_data_count;

  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[0] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(D[0]),
        .Q(wr_data_count[0]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[1] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(D[1]),
        .Q(wr_data_count[1]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[2] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(D[2]),
        .Q(wr_data_count[2]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[3] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(D[3]),
        .Q(wr_data_count[3]));
  FDCE #(
    .INIT(1'b0)) 
    \wr_data_count_i_reg[4] 
       (.C(wr_clk),
        .CE(1'b1),
        .CLR(AR),
        .D(D[4]),
        .Q(wr_data_count[4]));
endmodule

(* ORIG_REF_NAME = "wr_logic" *) 
module axi_mem2stream_fifo_async_34x16_wr_logic
   (full,
    out,
    almost_full,
    Q,
    E,
    \gic0.gc1.count_reg[3] ,
    \gic0.gc1.count_d1_reg[3] ,
    \gic0.gc1.count_d2_reg[3] ,
    wr_data_count,
    ram_full_i_reg,
    wr_clk,
    \gaf.ram_almost_full_i_reg ,
    \gaf.ram_almost_full_i_reg_0 ,
    RD_PNTR_WR,
    wr_en,
    AR,
    D);
  output full;
  output out;
  output almost_full;
  output [3:0]Q;
  output [0:0]E;
  output [3:0]\gic0.gc1.count_reg[3] ;
  output [3:0]\gic0.gc1.count_d1_reg[3] ;
  output [3:0]\gic0.gc1.count_d2_reg[3] ;
  output [4:0]wr_data_count;
  input ram_full_i_reg;
  input wr_clk;
  input \gaf.ram_almost_full_i_reg ;
  input \gaf.ram_almost_full_i_reg_0 ;
  input [2:0]RD_PNTR_WR;
  input wr_en;
  input [0:0]AR;
  input [1:0]D;

  wire [0:0]AR;
  wire [1:0]D;
  wire [0:0]E;
  wire [3:0]Q;
  wire [2:0]RD_PNTR_WR;
  wire almost_full;
  wire full;
  wire \gaf.ram_almost_full_i_reg ;
  wire \gaf.ram_almost_full_i_reg_0 ;
  wire [3:0]\gic0.gc1.count_d1_reg[3] ;
  wire [3:0]\gic0.gc1.count_d2_reg[3] ;
  wire [3:0]\gic0.gc1.count_reg[3] ;
  wire out;
  wire ram_full_i_reg;
  wire wpntr_n_0;
  wire wpntr_n_1;
  wire wpntr_n_2;
  wire wr_clk;
  wire [4:0]wr_data_count;
  wire wr_en;

  axi_mem2stream_fifo_async_34x16_wr_dc_fwft_ext_as \gwas.gwdc1.wdcext 
       (.AR(AR),
        .D({D,wpntr_n_0,wpntr_n_1,wpntr_n_2}),
        .wr_clk(wr_clk),
        .wr_data_count(wr_data_count));
  axi_mem2stream_fifo_async_34x16_wr_status_flags_as \gwas.wsts 
       (.E(E),
        .almost_full(almost_full),
        .full(full),
        .\gaf.ram_almost_full_i_reg_0 (\gaf.ram_almost_full_i_reg ),
        .\gaf.ram_almost_full_i_reg_1 (\gaf.ram_almost_full_i_reg_0 ),
        .out(out),
        .ram_full_i_reg_0(ram_full_i_reg),
        .wr_clk(wr_clk),
        .wr_en(wr_en));
  axi_mem2stream_fifo_async_34x16_wr_bin_cntr wpntr
       (.AR(AR),
        .D({wpntr_n_0,wpntr_n_1,wpntr_n_2}),
        .E(E),
        .Q(Q),
        .RD_PNTR_WR(RD_PNTR_WR),
        .\gic0.gc1.count_d1_reg[3]_0 (\gic0.gc1.count_d1_reg[3] ),
        .\gic0.gc1.count_d2_reg[3]_0 (\gic0.gc1.count_d2_reg[3] ),
        .\gic0.gc1.count_reg[3]_0 (\gic0.gc1.count_reg[3] ),
        .wr_clk(wr_clk));
endmodule

(* ORIG_REF_NAME = "wr_status_flags_as" *) 
module axi_mem2stream_fifo_async_34x16_wr_status_flags_as
   (full,
    out,
    almost_full,
    E,
    ram_full_i_reg_0,
    wr_clk,
    \gaf.ram_almost_full_i_reg_0 ,
    \gaf.ram_almost_full_i_reg_1 ,
    wr_en);
  output full;
  output out;
  output almost_full;
  output [0:0]E;
  input ram_full_i_reg_0;
  input wr_clk;
  input \gaf.ram_almost_full_i_reg_0 ;
  input \gaf.ram_almost_full_i_reg_1 ;
  input wr_en;

  wire [0:0]E;
  wire almost_full;
  wire \gaf.ram_almost_full_i_reg_0 ;
  wire \gaf.ram_almost_full_i_reg_1 ;
  (* DONT_TOUCH *) wire ram_full_fb_i;
  (* DONT_TOUCH *) wire ram_full_i;
  wire ram_full_i_reg_0;
  wire wr_clk;
  wire wr_en;

  assign full = ram_full_i;
  assign out = ram_full_fb_i;
  LUT2 #(
    .INIT(4'h2)) 
    \DEVICE_7SERIES.NO_BMM_INFO.SDP.WIDE_PRIM18.ram_i_2 
       (.I0(wr_en),
        .I1(ram_full_fb_i),
        .O(E));
  FDPE #(
    .INIT(1'b1)) 
    \gaf.ram_almost_full_i_reg 
       (.C(wr_clk),
        .CE(1'b1),
        .D(\gaf.ram_almost_full_i_reg_1 ),
        .PRE(\gaf.ram_almost_full_i_reg_0 ),
        .Q(almost_full));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_fb_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i_reg_0),
        .PRE(\gaf.ram_almost_full_i_reg_0 ),
        .Q(ram_full_fb_i));
  (* DONT_TOUCH *) 
  (* KEEP = "yes" *) 
  (* equivalent_register_removal = "no" *) 
  FDPE #(
    .INIT(1'b1)) 
    ram_full_i_reg
       (.C(wr_clk),
        .CE(1'b1),
        .D(ram_full_i_reg_0),
        .PRE(\gaf.ram_almost_full_i_reg_0 ),
        .Q(ram_full_i));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl;// ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
